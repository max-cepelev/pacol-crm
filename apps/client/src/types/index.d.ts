/**
 * Client
 **/

import * as runtime from "@prisma/client/runtime/index";
declare const prisma: unique symbol;
export type PrismaPromise<A> = Promise<A> & { [prisma]: true };
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P;
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}`
    ? Tuple[K] extends PrismaPromise<infer X>
      ? X
      : UnwrapPromise<Tuple[K]>
    : UnwrapPromise<Tuple[K]>;
};

/**
 * Model Distributor
 *
 */
export type Distributor = {
  id: number;
  name: string;
  fullName: string;
  legalAddress: string | null;
  actualAddress: string | null;
  inn: string;
  kpp: string | null;
  ogrn: string | null;
  manager: string | null;
  website: string | null;
  phone: string | null;
  email: string | null;
  info: string | null;
  discount: number;
};

/**
 * Model Group
 *
 */
export type Group = {
  id: number;
  name: string;
  distributorId: number | null;
};

/**
 * Model Client
 *
 */
export type Client = {
  id: number;
  name: string;
  fullName: string;
  legalAddress: string | null;
  actualAddress: string | null;
  inn: string;
  kpp: string | null;
  ogrn: string | null;
  manager: string | null;
  website: string | null;
  phone: string | null;
  email: string | null;
  info: string | null;
  distributorId: number | null;
  groupId: number;
};

/**
 * Model Contact
 *
 */
export type Contact = {
  id: number;
  name: string;
  email: string;
  phone: string | null;
  description: string | null;
  clientId: number;
  distributorId: number;
};

/**
 * Model Project
 *
 */
export type Project = {
  id: number;
  name: string;
  description: string | null;
  discount: number | null;
  startDate: Date;
  finishDate: Date | null;
  statusId: number;
  distributorId: number;
  clientId: number;
  groupId: number;
};

/**
 * Model ProjectStatus
 *
 */
export type ProjectStatus = {
  id: number;
  name: string;
};

/**
 * Model Task
 *
 */
export type Task = {
  id: number;
  title: string;
  dateStarted: Date;
  dateEnded: Date | null;
  content: string;
  statusId: number;
  distributorId: number | null;
  clientId: number | null;
  projectId: number | null;
  userId: number;
  contactId: number | null;
  createdAt: Date;
  updatedAt: Date;
};

/**
 * Model TaskStatus
 *
 */
export type TaskStatus = {
  id: number;
  name: string;
};

/**
 * Model Category
 *
 */
export type Category = {
  id: number;
  name: string;
};

/**
 * Model Subcategory
 *
 */
export type Subcategory = {
  id: number;
  name: string;
  categoryId: number;
};

/**
 * Model Product
 *
 */
export type Product = {
  id: number;
  name: string;
  description: string | null;
  price: number;
  images: string[];
  video: string | null;
  instruction: string | null;
  categoryId: number;
  subcategoryId: number | null;
};

/**
 * Model Property
 *
 */
export type Property = {
  id: number;
  img: string | null;
  content: string;
  productId: number;
};

/**
 * Model Characteristic
 *
 */
export type Characteristic = {
  id: number;
  name: string;
  unit: string | null;
  value: string;
  productId: number;
};

/**
 * Model Sale
 *
 */
export type Sale = {
  id: number;
  date: Date;
  sum: number;
  distributorId: number;
  clientId: number;
  projectId: number;
  userId: number;
  statusId: number;
  createdAt: Date;
  updatedAt: Date;
};

/**
 * Model SaleStatus
 *
 */
export type SaleStatus = {
  id: number;
  name: string;
};

/**
 * Model SaleContent
 *
 */
export type SaleContent = {
  id: number;
  price: number;
  amount: number;
  saleId: number;
  productId: number;
};

/**
 * Model User
 *
 */
export type User = {
  id: number;
  email: string;
  name: string | null;
  phone: string | null;
  description: string;
  password: string;
  salt: string;
  activated: boolean;
  role: Role;
  distributorId: number | null;
  createdAt: Date;
  updatedAt: Date;
};

/**
 * Model Token
 *
 */
export type Token = {
  id: number;
  refreshToken: string;
  userId: number;
  createdAt: Date;
  updatedAt: Date;
};

/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: "USER";
  ADMIN: "ADMIN";
  DISTRIBUTOR: "DISTRIBUTOR";
};

export type Role = typeof Role[keyof typeof Role];

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Distributors
 * const distributors = await prisma.distributor.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = "log" extends keyof T
    ? T["log"] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<T["log"]>
      : never
    : never,
  GlobalReject extends
    | Prisma.RejectOnNotFound
    | Prisma.RejectPerOperation
    | false
    | undefined = "rejectOnNotFound" extends keyof T
    ? T["rejectOnNotFound"]
    : false
> {
  /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Distributors
   * const distributors = await prisma.distributor.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U | "beforeExit">(
    eventType: V,
    callback: (
      event: V extends "query"
        ? Prisma.QueryEvent
        : V extends "beforeExit"
        ? () => Promise<void>
        : Prisma.LogEvent
    ) => void
  ): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel }
  ): Promise<UnwrapTuple<P>>;

  $transaction<R>(
    fn: (prisma: Prisma.TransactionClient) => Promise<R>,
    options?: {
      maxWait?: number;
      timeout?: number;
      isolationLevel?: Prisma.TransactionIsolationLevel;
    }
  ): Promise<R>;

  /**
   * `prisma.distributor`: Exposes CRUD operations for the **Distributor** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Distributors
   * const distributors = await prisma.distributor.findMany()
   * ```
   */
  get distributor(): Prisma.DistributorDelegate<GlobalReject>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Groups
   * const groups = await prisma.group.findMany()
   * ```
   */
  get group(): Prisma.GroupDelegate<GlobalReject>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Clients
   * const clients = await prisma.client.findMany()
   * ```
   */
  get client(): Prisma.ClientDelegate<GlobalReject>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Contacts
   * const contacts = await prisma.contact.findMany()
   * ```
   */
  get contact(): Prisma.ContactDelegate<GlobalReject>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.projectStatus`: Exposes CRUD operations for the **ProjectStatus** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ProjectStatuses
   * const projectStatuses = await prisma.projectStatus.findMany()
   * ```
   */
  get projectStatus(): Prisma.ProjectStatusDelegate<GlobalReject>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tasks
   * const tasks = await prisma.task.findMany()
   * ```
   */
  get task(): Prisma.TaskDelegate<GlobalReject>;

  /**
   * `prisma.taskStatus`: Exposes CRUD operations for the **TaskStatus** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TaskStatuses
   * const taskStatuses = await prisma.taskStatus.findMany()
   * ```
   */
  get taskStatus(): Prisma.TaskStatusDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.subcategory`: Exposes CRUD operations for the **Subcategory** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Subcategories
   * const subcategories = await prisma.subcategory.findMany()
   * ```
   */
  get subcategory(): Prisma.SubcategoryDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Products
   * const products = await prisma.product.findMany()
   * ```
   */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Properties
   * const properties = await prisma.property.findMany()
   * ```
   */
  get property(): Prisma.PropertyDelegate<GlobalReject>;

  /**
   * `prisma.characteristic`: Exposes CRUD operations for the **Characteristic** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Characteristics
   * const characteristics = await prisma.characteristic.findMany()
   * ```
   */
  get characteristic(): Prisma.CharacteristicDelegate<GlobalReject>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **Sale** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Sales
   * const sales = await prisma.sale.findMany()
   * ```
   */
  get sale(): Prisma.SaleDelegate<GlobalReject>;

  /**
   * `prisma.saleStatus`: Exposes CRUD operations for the **SaleStatus** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SaleStatuses
   * const saleStatuses = await prisma.saleStatus.findMany()
   * ```
   */
  get saleStatus(): Prisma.SaleStatusDelegate<GlobalReject>;

  /**
   * `prisma.saleContent`: Exposes CRUD operations for the **SaleContent** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more SaleContents
   * const saleContents = await prisma.saleContent.findMany()
   * ```
   */
  get saleContent(): Prisma.SaleContentDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tokens
   * const tokens = await prisma.token.findMany()
   * ```
   */
  get token(): Prisma.TokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF;

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError;
  export import PrismaClientValidationError = runtime.PrismaClientValidationError;
  export import NotFoundError = runtime.NotFoundError;

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag;
  export import empty = runtime.empty;
  export import join = runtime.join;
  export import raw = runtime.raw;
  export import Sql = runtime.Sql;

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal;

  export type DecimalJsLike = runtime.DecimalJsLike;

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics;
  export type Metric<T> = runtime.Metric<T>;
  export type MetricHistogram = runtime.MetricHistogram;
  export type MetricHistogramBucket = runtime.MetricHistogramBucket;

  /**
   * Prisma Client JS version: 4.8.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string;
  };

  export const prismaVersion: PrismaVersion;

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from.
   */
  export type JsonObject = { [Key in string]?: JsonValue };

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue =
    | string
    | number
    | boolean
    | JsonObject
    | JsonArray
    | null;

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {
    readonly [Key in string]?: InputJsonValue | null;
  };

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray
    extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue =
    | string
    | number
    | boolean
    | InputJsonObject
    | InputJsonArray;

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
     * Type of `Prisma.DbNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class DbNull {
      private DbNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.JsonNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class JsonNull {
      private JsonNull: never;
      private constructor();
    }

    /**
     * Type of `Prisma.AnyNull`.
     *
     * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
     *
     * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
     */
    class AnyNull {
      private AnyNull: never;
      private constructor();
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull;

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull;

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull;

  type SelectAndInclude = {
    select: any;
    include: any;
  };
  type HasSelect = {
    select: any;
  };
  type HasInclude = {
    include: any;
  };
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? "Please either choose `select` or `include`"
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S;

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<
    infer U
  >
    ? U
    : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> =
    PromiseType<ReturnType<T>>;

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
  };

  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K;
  }[keyof T];

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K;
  };

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>;

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & (T extends SelectAndInclude
    ? "Please either choose `select` or `include`."
    : {});

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  } & K;

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = T extends object
    ? U extends object
      ? (Without<T, U> & U) | (Without<U, T> & T)
      : U
    : T;

  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
    ? False
    : T extends Date
    ? False
    : T extends Uint8Array
    ? False
    : T extends BigInt
    ? False
    : T extends object
    ? True
    : False;

  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
    }[K];

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<
    __Either<O, K>
  >;

  type _Either<O extends object, K extends Key, strict extends Boolean> = {
    1: EitherStrict<O, K>;
    0: EitherLoose<O, K>;
  }[strict];

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never;

  export type Union = any;

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
  } & {};

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never;

  export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<
    Overwrite<
      U,
      {
        [K in keyof U]-?: At<U, K>;
      }
    >
  >;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O
    ? O[K]
    : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown
    ? AtStrict<O, K>
    : never;
  export type At<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function
    ? A
    : {
        [K in keyof A]: A[K];
      } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
      ?
          | (K extends keyof O ? { [P in K]: O[P] } & O : O)
          | ({ [P in keyof O as P extends K ? K : never]-?: O[P] } & O)
      : never
  >;

  type _Strict<U, _U = U> = U extends unknown
    ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
    : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False;

  // /**
  // 1
  // */
  export type True = 1;

  /**
  0
  */
  export type False = 0;

  export type Not<B extends Boolean> = {
    0: 1;
    1: 0;
  }[B];

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0;

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >;

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0;
      1: 1;
    };
    1: {
      0: 1;
      1: 1;
    };
  }[B1][B2];

  export type Keys<U extends Union> = U extends unknown ? keyof U : never;

  type Exact<A, W = unknown> = W extends unknown
    ? A extends Narrowable
      ? Cast<A, W>
      : Cast<
          { [K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never },
          { [K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K] }
        >
    : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object
    ? {
        [P in keyof T]: P extends keyof O ? O[P] : never;
      }
    : never;

  type FieldPaths<
    T,
    U = Omit<T, "_avg" | "_sum" | "_count" | "_min" | "_max">
  > = IsObject<T> extends True ? U : T;

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<"OR", K>, Extends<"AND", K>>,
      Extends<"NOT", K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<
            UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
          >
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K;
  }[keyof T];

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<
    T,
    TupleToUnion<K>
  >;

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
    ? never
    : T;

  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

  type FieldRefInputType<Model, FieldType> = Model extends never
    ? never
    : FieldRef<Model, FieldType>;

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(
      prisma: PrismaClient<any, any>,
      debug?: boolean,
      hooks?: Hooks | undefined
    );
    request<T>(
      document: any,
      dataPath?: string[],
      rootField?: string,
      typeName?: string,
      isList?: boolean,
      callsite?: string
    ): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(
      document: any,
      data: any,
      path: string[],
      rootField?: string,
      isList?: boolean
    ): any;
  }

  export const ModelName: {
    Distributor: "Distributor";
    Group: "Group";
    Client: "Client";
    Contact: "Contact";
    Project: "Project";
    ProjectStatus: "ProjectStatus";
    Task: "Task";
    TaskStatus: "TaskStatus";
    Category: "Category";
    Subcategory: "Subcategory";
    Product: "Product";
    Property: "Property";
    Characteristic: "Characteristic";
    Sale: "Sale";
    SaleStatus: "SaleStatus";
    SaleContent: "SaleContent";
    User: "User";
    Token: "Token";
  };

  export type ModelName = typeof ModelName[keyof typeof ModelName];

  export type Datasources = {
    db?: Datasource;
  };

  export type DefaultPrismaClient = PrismaClient;
  export type RejectOnNotFound = boolean | ((error: Error) => Error);
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound };
  export type RejectPerOperation = {
    [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound;
  };
  type IsReject<T> = T extends true
    ? True
    : T extends (err: Error) => Error
    ? True
    : False;
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions["rejectOnNotFound"],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>;
  export type ErrorFormat = "pretty" | "colorless" | "minimal";

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null.
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation;
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources;

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat;

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     *
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>;
  }

  export type Hooks = {
    beforeRequest?: (options: {
      query: string;
      path: string[];
      rootField?: string;
      typeName?: string;
      document: any;
    }) => any;
  };

  /* Types for Logging */
  export type LogLevel = "info" | "query" | "warn" | "error";
  export type LogDefinition = {
    level: LogLevel;
    emit: "stdout" | "event";
  };

  export type GetLogType<T extends LogLevel | LogDefinition> =
    T extends LogDefinition
      ? T["emit"] extends "event"
        ? T["level"]
        : never
      : never;
  export type GetEvents<T extends any> = T extends Array<
    LogLevel | LogDefinition
  >
    ? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never;

  export type QueryEvent = {
    timestamp: Date;
    query: string;
    params: string;
    duration: number;
    target: string;
  };

  export type LogEvent = {
    timestamp: Date;
    message: string;
    target: string;
  };
  /* End Types for Logging */

  export type PrismaAction =
    | "findUnique"
    | "findMany"
    | "findFirst"
    | "create"
    | "createMany"
    | "update"
    | "updateMany"
    | "upsert"
    | "delete"
    | "deleteMany"
    | "executeRaw"
    | "queryRaw"
    | "aggregate"
    | "count"
    | "runCommandRaw"
    | "findRaw";

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName;
    action: PrismaAction;
    args: any;
    dataPath: string[];
    runInTransaction: boolean;
  };

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>
  ) => Promise<T>;

  // tested in getLogLevel.test.ts
  export function getLogLevel(
    log: Array<LogLevel | LogDefinition>
  ): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<
    Prisma.DefaultPrismaClient,
    "$connect" | "$disconnect" | "$on" | "$transaction" | "$use"
  >;

  export type Datasource = {
    url?: string;
  };

  /**
   * Count Types
   */

  /**
   * Count Type DistributorCountOutputType
   */

  export type DistributorCountOutputType = {
    clients: number;
    projects: number;
    sales: number;
    tasks: number;
    contacts: number;
    users: number;
    groups: number;
  };

  export type DistributorCountOutputTypeSelect = {
    clients?: boolean;
    projects?: boolean;
    sales?: boolean;
    tasks?: boolean;
    contacts?: boolean;
    users?: boolean;
    groups?: boolean;
  };

  export type DistributorCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DistributorCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? DistributorCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & DistributorCountOutputTypeArgs
    ? DistributorCountOutputType
    : S extends { select: any } & DistributorCountOutputTypeArgs
    ? {
        [P in TruthyKeys<
          S["select"]
        >]: P extends keyof DistributorCountOutputType
          ? DistributorCountOutputType[P]
          : never;
      }
    : DistributorCountOutputType;

  // Custom InputTypes

  /**
   * DistributorCountOutputType without action
   */
  export type DistributorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DistributorCountOutputType
     *
     **/
    select?: DistributorCountOutputTypeSelect | null;
  };

  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    clients: number;
    projects: number;
  };

  export type GroupCountOutputTypeSelect = {
    clients?: boolean;
    projects?: boolean;
  };

  export type GroupCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GroupCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? GroupCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & GroupCountOutputTypeArgs
    ? GroupCountOutputType
    : S extends { select: any } & GroupCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof GroupCountOutputType
          ? GroupCountOutputType[P]
          : never;
      }
    : GroupCountOutputType;

  // Custom InputTypes

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     *
     **/
    select?: GroupCountOutputTypeSelect | null;
  };

  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    projects: number;
    tasks: number;
    contacts: number;
    sales: number;
  };

  export type ClientCountOutputTypeSelect = {
    projects?: boolean;
    tasks?: boolean;
    contacts?: boolean;
    sales?: boolean;
  };

  export type ClientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ClientCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? ClientCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & ClientCountOutputTypeArgs
    ? ClientCountOutputType
    : S extends { select: any } & ClientCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof ClientCountOutputType
          ? ClientCountOutputType[P]
          : never;
      }
    : ClientCountOutputType;

  // Custom InputTypes

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     *
     **/
    select?: ClientCountOutputTypeSelect | null;
  };

  /**
   * Count Type ContactCountOutputType
   */

  export type ContactCountOutputType = {
    tasks: number;
  };

  export type ContactCountOutputTypeSelect = {
    tasks?: boolean;
  };

  export type ContactCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ContactCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? ContactCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & ContactCountOutputTypeArgs
    ? ContactCountOutputType
    : S extends { select: any } & ContactCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof ContactCountOutputType
          ? ContactCountOutputType[P]
          : never;
      }
    : ContactCountOutputType;

  // Custom InputTypes

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ContactCountOutputType
     *
     **/
    select?: ContactCountOutputTypeSelect | null;
  };

  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    tasks: number;
    sales: number;
  };

  export type ProjectCountOutputTypeSelect = {
    tasks?: boolean;
    sales?: boolean;
  };

  export type ProjectCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProjectCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? ProjectCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & ProjectCountOutputTypeArgs
    ? ProjectCountOutputType
    : S extends { select: any } & ProjectCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof ProjectCountOutputType
          ? ProjectCountOutputType[P]
          : never;
      }
    : ProjectCountOutputType;

  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     *
     **/
    select?: ProjectCountOutputTypeSelect | null;
  };

  /**
   * Count Type ProjectStatusCountOutputType
   */

  export type ProjectStatusCountOutputType = {
    projects: number;
  };

  export type ProjectStatusCountOutputTypeSelect = {
    projects?: boolean;
  };

  export type ProjectStatusCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProjectStatusCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? ProjectStatusCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & ProjectStatusCountOutputTypeArgs
    ? ProjectStatusCountOutputType
    : S extends { select: any } & ProjectStatusCountOutputTypeArgs
    ? {
        [P in TruthyKeys<
          S["select"]
        >]: P extends keyof ProjectStatusCountOutputType
          ? ProjectStatusCountOutputType[P]
          : never;
      }
    : ProjectStatusCountOutputType;

  // Custom InputTypes

  /**
   * ProjectStatusCountOutputType without action
   */
  export type ProjectStatusCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatusCountOutputType
     *
     **/
    select?: ProjectStatusCountOutputTypeSelect | null;
  };

  /**
   * Count Type TaskStatusCountOutputType
   */

  export type TaskStatusCountOutputType = {
    tasks: number;
  };

  export type TaskStatusCountOutputTypeSelect = {
    tasks?: boolean;
  };

  export type TaskStatusCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TaskStatusCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? TaskStatusCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & TaskStatusCountOutputTypeArgs
    ? TaskStatusCountOutputType
    : S extends { select: any } & TaskStatusCountOutputTypeArgs
    ? {
        [P in TruthyKeys<
          S["select"]
        >]: P extends keyof TaskStatusCountOutputType
          ? TaskStatusCountOutputType[P]
          : never;
      }
    : TaskStatusCountOutputType;

  // Custom InputTypes

  /**
   * TaskStatusCountOutputType without action
   */
  export type TaskStatusCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TaskStatusCountOutputType
     *
     **/
    select?: TaskStatusCountOutputTypeSelect | null;
  };

  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    subcategories: number;
    products: number;
  };

  export type CategoryCountOutputTypeSelect = {
    subcategories?: boolean;
    products?: boolean;
  };

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & CategoryCountOutputTypeArgs
    ? CategoryCountOutputType
    : S extends { select: any } & CategoryCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof CategoryCountOutputType
          ? CategoryCountOutputType[P]
          : never;
      }
    : CategoryCountOutputType;

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     *
     **/
    select?: CategoryCountOutputTypeSelect | null;
  };

  /**
   * Count Type SubcategoryCountOutputType
   */

  export type SubcategoryCountOutputType = {
    products: number;
  };

  export type SubcategoryCountOutputTypeSelect = {
    products?: boolean;
  };

  export type SubcategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SubcategoryCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? SubcategoryCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & SubcategoryCountOutputTypeArgs
    ? SubcategoryCountOutputType
    : S extends { select: any } & SubcategoryCountOutputTypeArgs
    ? {
        [P in TruthyKeys<
          S["select"]
        >]: P extends keyof SubcategoryCountOutputType
          ? SubcategoryCountOutputType[P]
          : never;
      }
    : SubcategoryCountOutputType;

  // Custom InputTypes

  /**
   * SubcategoryCountOutputType without action
   */
  export type SubcategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SubcategoryCountOutputType
     *
     **/
    select?: SubcategoryCountOutputTypeSelect | null;
  };

  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    properties: number;
    saleContents: number;
    characteristics: number;
  };

  export type ProductCountOutputTypeSelect = {
    properties?: boolean;
    saleContents?: boolean;
    characteristics?: boolean;
  };

  export type ProductCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? ProductCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & ProductCountOutputTypeArgs
    ? ProductCountOutputType
    : S extends { select: any } & ProductCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof ProductCountOutputType
          ? ProductCountOutputType[P]
          : never;
      }
    : ProductCountOutputType;

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     *
     **/
    select?: ProductCountOutputTypeSelect | null;
  };

  /**
   * Count Type SaleCountOutputType
   */

  export type SaleCountOutputType = {
    saleContent: number;
  };

  export type SaleCountOutputTypeSelect = {
    saleContent?: boolean;
  };

  export type SaleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SaleCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? SaleCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & SaleCountOutputTypeArgs
    ? SaleCountOutputType
    : S extends { select: any } & SaleCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof SaleCountOutputType
          ? SaleCountOutputType[P]
          : never;
      }
    : SaleCountOutputType;

  // Custom InputTypes

  /**
   * SaleCountOutputType without action
   */
  export type SaleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SaleCountOutputType
     *
     **/
    select?: SaleCountOutputTypeSelect | null;
  };

  /**
   * Count Type SaleStatusCountOutputType
   */

  export type SaleStatusCountOutputType = {
    sales: number;
  };

  export type SaleStatusCountOutputTypeSelect = {
    sales?: boolean;
  };

  export type SaleStatusCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SaleStatusCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? SaleStatusCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & SaleStatusCountOutputTypeArgs
    ? SaleStatusCountOutputType
    : S extends { select: any } & SaleStatusCountOutputTypeArgs
    ? {
        [P in TruthyKeys<
          S["select"]
        >]: P extends keyof SaleStatusCountOutputType
          ? SaleStatusCountOutputType[P]
          : never;
      }
    : SaleStatusCountOutputType;

  // Custom InputTypes

  /**
   * SaleStatusCountOutputType without action
   */
  export type SaleStatusCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SaleStatusCountOutputType
     *
     **/
    select?: SaleStatusCountOutputTypeSelect | null;
  };

  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tasks: number;
    sales: number;
  };

  export type UserCountOutputTypeSelect = {
    tasks?: boolean;
    sales?: boolean;
  };

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends { include: any } & UserCountOutputTypeArgs
    ? UserCountOutputType
    : S extends { select: any } & UserCountOutputTypeArgs
    ? {
        [P in TruthyKeys<S["select"]>]: P extends keyof UserCountOutputType
          ? UserCountOutputType[P]
          : never;
      }
    : UserCountOutputType;

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     *
     **/
    select?: UserCountOutputTypeSelect | null;
  };

  /**
   * Models
   */

  /**
   * Model Distributor
   */

  export type AggregateDistributor = {
    _count: DistributorCountAggregateOutputType | null;
    _avg: DistributorAvgAggregateOutputType | null;
    _sum: DistributorSumAggregateOutputType | null;
    _min: DistributorMinAggregateOutputType | null;
    _max: DistributorMaxAggregateOutputType | null;
  };

  export type DistributorAvgAggregateOutputType = {
    id: number | null;
    discount: number | null;
  };

  export type DistributorSumAggregateOutputType = {
    id: number | null;
    discount: number | null;
  };

  export type DistributorMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    fullName: string | null;
    legalAddress: string | null;
    actualAddress: string | null;
    inn: string | null;
    kpp: string | null;
    ogrn: string | null;
    manager: string | null;
    website: string | null;
    phone: string | null;
    email: string | null;
    info: string | null;
    discount: number | null;
  };

  export type DistributorMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    fullName: string | null;
    legalAddress: string | null;
    actualAddress: string | null;
    inn: string | null;
    kpp: string | null;
    ogrn: string | null;
    manager: string | null;
    website: string | null;
    phone: string | null;
    email: string | null;
    info: string | null;
    discount: number | null;
  };

  export type DistributorCountAggregateOutputType = {
    id: number;
    name: number;
    fullName: number;
    legalAddress: number;
    actualAddress: number;
    inn: number;
    kpp: number;
    ogrn: number;
    manager: number;
    website: number;
    phone: number;
    email: number;
    info: number;
    discount: number;
    _all: number;
  };

  export type DistributorAvgAggregateInputType = {
    id?: true;
    discount?: true;
  };

  export type DistributorSumAggregateInputType = {
    id?: true;
    discount?: true;
  };

  export type DistributorMinAggregateInputType = {
    id?: true;
    name?: true;
    fullName?: true;
    legalAddress?: true;
    actualAddress?: true;
    inn?: true;
    kpp?: true;
    ogrn?: true;
    manager?: true;
    website?: true;
    phone?: true;
    email?: true;
    info?: true;
    discount?: true;
  };

  export type DistributorMaxAggregateInputType = {
    id?: true;
    name?: true;
    fullName?: true;
    legalAddress?: true;
    actualAddress?: true;
    inn?: true;
    kpp?: true;
    ogrn?: true;
    manager?: true;
    website?: true;
    phone?: true;
    email?: true;
    info?: true;
    discount?: true;
  };

  export type DistributorCountAggregateInputType = {
    id?: true;
    name?: true;
    fullName?: true;
    legalAddress?: true;
    actualAddress?: true;
    inn?: true;
    kpp?: true;
    ogrn?: true;
    manager?: true;
    website?: true;
    phone?: true;
    email?: true;
    info?: true;
    discount?: true;
    _all?: true;
  };

  export type DistributorAggregateArgs = {
    /**
     * Filter which Distributor to aggregate.
     *
     **/
    where?: DistributorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Distributors to fetch.
     *
     **/
    orderBy?: Enumerable<DistributorOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: DistributorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Distributors from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Distributors.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Distributors
     **/
    _count?: true | DistributorCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: DistributorAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: DistributorSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: DistributorMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: DistributorMaxAggregateInputType;
  };

  export type GetDistributorAggregateType<T extends DistributorAggregateArgs> =
    {
      [P in keyof T & keyof AggregateDistributor]: P extends "_count" | "count"
        ? T[P] extends true
          ? number
          : GetScalarType<T[P], AggregateDistributor[P]>
        : GetScalarType<T[P], AggregateDistributor[P]>;
    };

  export type DistributorGroupByArgs = {
    where?: DistributorWhereInput;
    orderBy?: Enumerable<DistributorOrderByWithAggregationInput>;
    by: Array<DistributorScalarFieldEnum>;
    having?: DistributorScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: DistributorCountAggregateInputType | true;
    _avg?: DistributorAvgAggregateInputType;
    _sum?: DistributorSumAggregateInputType;
    _min?: DistributorMinAggregateInputType;
    _max?: DistributorMaxAggregateInputType;
  };

  export type DistributorGroupByOutputType = {
    id: number;
    name: string;
    fullName: string;
    legalAddress: string | null;
    actualAddress: string | null;
    inn: string;
    kpp: string | null;
    ogrn: string | null;
    manager: string | null;
    website: string | null;
    phone: string | null;
    email: string | null;
    info: string | null;
    discount: number;
    _count: DistributorCountAggregateOutputType | null;
    _avg: DistributorAvgAggregateOutputType | null;
    _sum: DistributorSumAggregateOutputType | null;
    _min: DistributorMinAggregateOutputType | null;
    _max: DistributorMaxAggregateOutputType | null;
  };

  type GetDistributorGroupByPayload<T extends DistributorGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<DistributorGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof DistributorGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributorGroupByOutputType[P]>
            : GetScalarType<T[P], DistributorGroupByOutputType[P]>;
        }
      >
    >;

  export type DistributorSelect = {
    id?: boolean;
    name?: boolean;
    fullName?: boolean;
    legalAddress?: boolean;
    actualAddress?: boolean;
    inn?: boolean;
    kpp?: boolean;
    ogrn?: boolean;
    manager?: boolean;
    website?: boolean;
    phone?: boolean;
    email?: boolean;
    info?: boolean;
    discount?: boolean;
    clients?: boolean | Distributor$clientsArgs;
    projects?: boolean | Distributor$projectsArgs;
    sales?: boolean | Distributor$salesArgs;
    tasks?: boolean | Distributor$tasksArgs;
    contacts?: boolean | Distributor$contactsArgs;
    users?: boolean | Distributor$usersArgs;
    groups?: boolean | Distributor$groupsArgs;
    _count?: boolean | DistributorCountOutputTypeArgs;
  };

  export type DistributorInclude = {
    clients?: boolean | Distributor$clientsArgs;
    projects?: boolean | Distributor$projectsArgs;
    sales?: boolean | Distributor$salesArgs;
    tasks?: boolean | Distributor$tasksArgs;
    contacts?: boolean | Distributor$contactsArgs;
    users?: boolean | Distributor$usersArgs;
    groups?: boolean | Distributor$groupsArgs;
    _count?: boolean | DistributorCountOutputTypeArgs;
  };

  export type DistributorGetPayload<
    S extends boolean | null | undefined | DistributorArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Distributor
    : S extends undefined
    ? never
    : S extends { include: any } & (DistributorArgs | DistributorFindManyArgs)
    ? Distributor & {
        [P in TruthyKeys<S["include"]>]: P extends "clients"
          ? Array<ClientGetPayload<S["include"][P]>>
          : P extends "projects"
          ? Array<ProjectGetPayload<S["include"][P]>>
          : P extends "sales"
          ? Array<SaleGetPayload<S["include"][P]>>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["include"][P]>>
          : P extends "contacts"
          ? Array<ContactGetPayload<S["include"][P]>>
          : P extends "users"
          ? Array<UserGetPayload<S["include"][P]>>
          : P extends "groups"
          ? Array<GroupGetPayload<S["include"][P]>>
          : P extends "_count"
          ? DistributorCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (DistributorArgs | DistributorFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "clients"
          ? Array<ClientGetPayload<S["select"][P]>>
          : P extends "projects"
          ? Array<ProjectGetPayload<S["select"][P]>>
          : P extends "sales"
          ? Array<SaleGetPayload<S["select"][P]>>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["select"][P]>>
          : P extends "contacts"
          ? Array<ContactGetPayload<S["select"][P]>>
          : P extends "users"
          ? Array<UserGetPayload<S["select"][P]>>
          : P extends "groups"
          ? Array<GroupGetPayload<S["select"][P]>>
          : P extends "_count"
          ? DistributorCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Distributor
          ? Distributor[P]
          : never;
      }
    : Distributor;

  type DistributorCountArgs = Merge<
    Omit<DistributorFindManyArgs, "select" | "include"> & {
      select?: DistributorCountAggregateInputType | true;
    }
  >;

  export interface DistributorDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Distributor that matches the filter.
     * @param {DistributorFindUniqueArgs} args - Arguments to find a Distributor
     * @example
     * // Get one Distributor
     * const distributor = await prisma.distributor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends DistributorFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, DistributorFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Distributor"
    > extends True
      ? Prisma__DistributorClient<DistributorGetPayload<T>>
      : Prisma__DistributorClient<DistributorGetPayload<T> | null, null>;

    /**
     * Find one Distributor that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {DistributorFindUniqueOrThrowArgs} args - Arguments to find a Distributor
     * @example
     * // Get one Distributor
     * const distributor = await prisma.distributor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends DistributorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DistributorFindUniqueOrThrowArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T>>;

    /**
     * Find the first Distributor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorFindFirstArgs} args - Arguments to find a Distributor
     * @example
     * // Get one Distributor
     * const distributor = await prisma.distributor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends DistributorFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, DistributorFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Distributor"
    > extends True
      ? Prisma__DistributorClient<DistributorGetPayload<T>>
      : Prisma__DistributorClient<DistributorGetPayload<T> | null, null>;

    /**
     * Find the first Distributor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorFindFirstOrThrowArgs} args - Arguments to find a Distributor
     * @example
     * // Get one Distributor
     * const distributor = await prisma.distributor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends DistributorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DistributorFindFirstOrThrowArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T>>;

    /**
     * Find zero or more Distributors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Distributors
     * const distributors = await prisma.distributor.findMany()
     *
     * // Get first 10 Distributors
     * const distributors = await prisma.distributor.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const distributorWithIdOnly = await prisma.distributor.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends DistributorFindManyArgs>(
      args?: SelectSubset<T, DistributorFindManyArgs>
    ): PrismaPromise<Array<DistributorGetPayload<T>>>;

    /**
     * Create a Distributor.
     * @param {DistributorCreateArgs} args - Arguments to create a Distributor.
     * @example
     * // Create one Distributor
     * const Distributor = await prisma.distributor.create({
     *   data: {
     *     // ... data to create a Distributor
     *   }
     * })
     *
     **/
    create<T extends DistributorCreateArgs>(
      args: SelectSubset<T, DistributorCreateArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T>>;

    /**
     * Create many Distributors.
     *     @param {DistributorCreateManyArgs} args - Arguments to create many Distributors.
     *     @example
     *     // Create many Distributors
     *     const distributor = await prisma.distributor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends DistributorCreateManyArgs>(
      args?: SelectSubset<T, DistributorCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Distributor.
     * @param {DistributorDeleteArgs} args - Arguments to delete one Distributor.
     * @example
     * // Delete one Distributor
     * const Distributor = await prisma.distributor.delete({
     *   where: {
     *     // ... filter to delete one Distributor
     *   }
     * })
     *
     **/
    delete<T extends DistributorDeleteArgs>(
      args: SelectSubset<T, DistributorDeleteArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T>>;

    /**
     * Update one Distributor.
     * @param {DistributorUpdateArgs} args - Arguments to update one Distributor.
     * @example
     * // Update one Distributor
     * const distributor = await prisma.distributor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends DistributorUpdateArgs>(
      args: SelectSubset<T, DistributorUpdateArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T>>;

    /**
     * Delete zero or more Distributors.
     * @param {DistributorDeleteManyArgs} args - Arguments to filter Distributors to delete.
     * @example
     * // Delete a few Distributors
     * const { count } = await prisma.distributor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends DistributorDeleteManyArgs>(
      args?: SelectSubset<T, DistributorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Distributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Distributors
     * const distributor = await prisma.distributor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends DistributorUpdateManyArgs>(
      args: SelectSubset<T, DistributorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Distributor.
     * @param {DistributorUpsertArgs} args - Arguments to update or create a Distributor.
     * @example
     * // Update or create a Distributor
     * const distributor = await prisma.distributor.upsert({
     *   create: {
     *     // ... data to create a Distributor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Distributor we want to update
     *   }
     * })
     **/
    upsert<T extends DistributorUpsertArgs>(
      args: SelectSubset<T, DistributorUpsertArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T>>;

    /**
     * Count the number of Distributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorCountArgs} args - Arguments to filter Distributors to count.
     * @example
     * // Count the number of Distributors
     * const count = await prisma.distributor.count({
     *   where: {
     *     // ... the filter for the Distributors we want to count
     *   }
     * })
     **/
    count<T extends DistributorCountArgs>(
      args?: Subset<T, DistributorCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], DistributorCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Distributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends DistributorAggregateArgs>(
      args: Subset<T, DistributorAggregateArgs>
    ): PrismaPromise<GetDistributorAggregateType<T>>;

    /**
     * Group by Distributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends DistributorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributorGroupByArgs["orderBy"] }
        : { orderBy?: DistributorGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, DistributorGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetDistributorGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Distributor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DistributorClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    clients<T extends Distributor$clientsArgs = {}>(
      args?: Subset<T, Distributor$clientsArgs>
    ): PrismaPromise<Array<ClientGetPayload<T>> | Null>;

    projects<T extends Distributor$projectsArgs = {}>(
      args?: Subset<T, Distributor$projectsArgs>
    ): PrismaPromise<Array<ProjectGetPayload<T>> | Null>;

    sales<T extends Distributor$salesArgs = {}>(
      args?: Subset<T, Distributor$salesArgs>
    ): PrismaPromise<Array<SaleGetPayload<T>> | Null>;

    tasks<T extends Distributor$tasksArgs = {}>(
      args?: Subset<T, Distributor$tasksArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>> | Null>;

    contacts<T extends Distributor$contactsArgs = {}>(
      args?: Subset<T, Distributor$contactsArgs>
    ): PrismaPromise<Array<ContactGetPayload<T>> | Null>;

    users<T extends Distributor$usersArgs = {}>(
      args?: Subset<T, Distributor$usersArgs>
    ): PrismaPromise<Array<UserGetPayload<T>> | Null>;

    groups<T extends Distributor$groupsArgs = {}>(
      args?: Subset<T, Distributor$groupsArgs>
    ): PrismaPromise<Array<GroupGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Distributor base type for findUnique actions
   */
  export type DistributorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * Filter, which Distributor to fetch.
     *
     **/
    where: DistributorWhereUniqueInput;
  };

  /**
   * Distributor findUnique
   */
  export interface DistributorFindUniqueArgs
    extends DistributorFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Distributor findUniqueOrThrow
   */
  export type DistributorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * Filter, which Distributor to fetch.
     *
     **/
    where: DistributorWhereUniqueInput;
  };

  /**
   * Distributor base type for findFirst actions
   */
  export type DistributorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * Filter, which Distributor to fetch.
     *
     **/
    where?: DistributorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Distributors to fetch.
     *
     **/
    orderBy?: Enumerable<DistributorOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Distributors.
     *
     **/
    cursor?: DistributorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Distributors from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Distributors.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Distributors.
     *
     **/
    distinct?: Enumerable<DistributorScalarFieldEnum>;
  };

  /**
   * Distributor findFirst
   */
  export interface DistributorFindFirstArgs
    extends DistributorFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Distributor findFirstOrThrow
   */
  export type DistributorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * Filter, which Distributor to fetch.
     *
     **/
    where?: DistributorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Distributors to fetch.
     *
     **/
    orderBy?: Enumerable<DistributorOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Distributors.
     *
     **/
    cursor?: DistributorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Distributors from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Distributors.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Distributors.
     *
     **/
    distinct?: Enumerable<DistributorScalarFieldEnum>;
  };

  /**
   * Distributor findMany
   */
  export type DistributorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * Filter, which Distributors to fetch.
     *
     **/
    where?: DistributorWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Distributors to fetch.
     *
     **/
    orderBy?: Enumerable<DistributorOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Distributors.
     *
     **/
    cursor?: DistributorWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Distributors from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Distributors.
     *
     **/
    skip?: number;
    distinct?: Enumerable<DistributorScalarFieldEnum>;
  };

  /**
   * Distributor create
   */
  export type DistributorCreateArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * The data needed to create a Distributor.
     *
     **/
    data: XOR<DistributorCreateInput, DistributorUncheckedCreateInput>;
  };

  /**
   * Distributor createMany
   */
  export type DistributorCreateManyArgs = {
    /**
     * The data used to create many Distributors.
     *
     **/
    data: Enumerable<DistributorCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Distributor update
   */
  export type DistributorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * The data needed to update a Distributor.
     *
     **/
    data: XOR<DistributorUpdateInput, DistributorUncheckedUpdateInput>;
    /**
     * Choose, which Distributor to update.
     *
     **/
    where: DistributorWhereUniqueInput;
  };

  /**
   * Distributor updateMany
   */
  export type DistributorUpdateManyArgs = {
    /**
     * The data used to update Distributors.
     *
     **/
    data: XOR<
      DistributorUpdateManyMutationInput,
      DistributorUncheckedUpdateManyInput
    >;
    /**
     * Filter which Distributors to update
     *
     **/
    where?: DistributorWhereInput;
  };

  /**
   * Distributor upsert
   */
  export type DistributorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * The filter to search for the Distributor to update in case it exists.
     *
     **/
    where: DistributorWhereUniqueInput;
    /**
     * In case the Distributor found by the `where` argument doesn't exist, create a new Distributor with this data.
     *
     **/
    create: XOR<DistributorCreateInput, DistributorUncheckedCreateInput>;
    /**
     * In case the Distributor was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<DistributorUpdateInput, DistributorUncheckedUpdateInput>;
  };

  /**
   * Distributor delete
   */
  export type DistributorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
    /**
     * Filter which Distributor to delete.
     *
     **/
    where: DistributorWhereUniqueInput;
  };

  /**
   * Distributor deleteMany
   */
  export type DistributorDeleteManyArgs = {
    /**
     * Filter which Distributors to delete
     *
     **/
    where?: DistributorWhereInput;
  };

  /**
   * Distributor.clients
   */
  export type Distributor$clientsArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    where?: ClientWhereInput;
    orderBy?: Enumerable<ClientOrderByWithRelationInput>;
    cursor?: ClientWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ClientScalarFieldEnum>;
  };

  /**
   * Distributor.projects
   */
  export type Distributor$projectsArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    where?: ProjectWhereInput;
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    cursor?: ProjectWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * Distributor.sales
   */
  export type Distributor$salesArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    where?: SaleWhereInput;
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    cursor?: SaleWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * Distributor.tasks
   */
  export type Distributor$tasksArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Distributor.contacts
   */
  export type Distributor$contactsArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    where?: ContactWhereInput;
    orderBy?: Enumerable<ContactOrderByWithRelationInput>;
    cursor?: ContactWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ContactScalarFieldEnum>;
  };

  /**
   * Distributor.users
   */
  export type Distributor$usersArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    where?: UserWhereInput;
    orderBy?: Enumerable<UserOrderByWithRelationInput>;
    cursor?: UserWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<UserScalarFieldEnum>;
  };

  /**
   * Distributor.groups
   */
  export type Distributor$groupsArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    where?: GroupWhereInput;
    orderBy?: Enumerable<GroupOrderByWithRelationInput>;
    cursor?: GroupWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<GroupScalarFieldEnum>;
  };

  /**
   * Distributor without action
   */
  export type DistributorArgs = {
    /**
     * Select specific fields to fetch from the Distributor
     *
     **/
    select?: DistributorSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: DistributorInclude | null;
  };

  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null;
    _avg: GroupAvgAggregateOutputType | null;
    _sum: GroupSumAggregateOutputType | null;
    _min: GroupMinAggregateOutputType | null;
    _max: GroupMaxAggregateOutputType | null;
  };

  export type GroupAvgAggregateOutputType = {
    id: number | null;
    distributorId: number | null;
  };

  export type GroupSumAggregateOutputType = {
    id: number | null;
    distributorId: number | null;
  };

  export type GroupMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    distributorId: number | null;
  };

  export type GroupMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    distributorId: number | null;
  };

  export type GroupCountAggregateOutputType = {
    id: number;
    name: number;
    distributorId: number;
    _all: number;
  };

  export type GroupAvgAggregateInputType = {
    id?: true;
    distributorId?: true;
  };

  export type GroupSumAggregateInputType = {
    id?: true;
    distributorId?: true;
  };

  export type GroupMinAggregateInputType = {
    id?: true;
    name?: true;
    distributorId?: true;
  };

  export type GroupMaxAggregateInputType = {
    id?: true;
    name?: true;
    distributorId?: true;
  };

  export type GroupCountAggregateInputType = {
    id?: true;
    name?: true;
    distributorId?: true;
    _all?: true;
  };

  export type GroupAggregateArgs = {
    /**
     * Filter which Group to aggregate.
     *
     **/
    where?: GroupWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Groups to fetch.
     *
     **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: GroupWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Groups from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Groups.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Groups
     **/
    _count?: true | GroupCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: GroupAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: GroupSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: GroupMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: GroupMaxAggregateInputType;
  };

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
    [P in keyof T & keyof AggregateGroup]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>;
  };

  export type GroupGroupByArgs = {
    where?: GroupWhereInput;
    orderBy?: Enumerable<GroupOrderByWithAggregationInput>;
    by: Array<GroupScalarFieldEnum>;
    having?: GroupScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: GroupCountAggregateInputType | true;
    _avg?: GroupAvgAggregateInputType;
    _sum?: GroupSumAggregateInputType;
    _min?: GroupMinAggregateInputType;
    _max?: GroupMaxAggregateInputType;
  };

  export type GroupGroupByOutputType = {
    id: number;
    name: string;
    distributorId: number | null;
    _count: GroupCountAggregateOutputType | null;
    _avg: GroupAvgAggregateOutputType | null;
    _sum: GroupSumAggregateOutputType | null;
    _min: GroupMinAggregateOutputType | null;
    _max: GroupMaxAggregateOutputType | null;
  };

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof GroupGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
          : GetScalarType<T[P], GroupGroupByOutputType[P]>;
      }
    >
  >;

  export type GroupSelect = {
    id?: boolean;
    name?: boolean;
    clients?: boolean | Group$clientsArgs;
    projects?: boolean | Group$projectsArgs;
    distributor?: boolean | DistributorArgs;
    distributorId?: boolean;
    _count?: boolean | GroupCountOutputTypeArgs;
  };

  export type GroupInclude = {
    clients?: boolean | Group$clientsArgs;
    projects?: boolean | Group$projectsArgs;
    distributor?: boolean | DistributorArgs;
    _count?: boolean | GroupCountOutputTypeArgs;
  };

  export type GroupGetPayload<
    S extends boolean | null | undefined | GroupArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Group
    : S extends undefined
    ? never
    : S extends { include: any } & (GroupArgs | GroupFindManyArgs)
    ? Group & {
        [P in TruthyKeys<S["include"]>]: P extends "clients"
          ? Array<ClientGetPayload<S["include"][P]>>
          : P extends "projects"
          ? Array<ProjectGetPayload<S["include"][P]>>
          : P extends "distributor"
          ? DistributorGetPayload<S["include"][P]> | null
          : P extends "_count"
          ? GroupCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (GroupArgs | GroupFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "clients"
          ? Array<ClientGetPayload<S["select"][P]>>
          : P extends "projects"
          ? Array<ProjectGetPayload<S["select"][P]>>
          : P extends "distributor"
          ? DistributorGetPayload<S["select"][P]> | null
          : P extends "_count"
          ? GroupCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Group
          ? Group[P]
          : never;
      }
    : Group;

  type GroupCountArgs = Merge<
    Omit<GroupFindManyArgs, "select" | "include"> & {
      select?: GroupCountAggregateInputType | true;
    }
  >;

  export interface GroupDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends GroupFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, GroupFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Group"
    > extends True
      ? Prisma__GroupClient<GroupGetPayload<T>>
      : Prisma__GroupClient<GroupGetPayload<T> | null, null>;

    /**
     * Find one Group that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>;

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends GroupFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, GroupFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Group"
    > extends True
      ? Prisma__GroupClient<GroupGetPayload<T>>
      : Prisma__GroupClient<GroupGetPayload<T> | null, null>;

    /**
     * Find the first Group that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>;

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     *
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends GroupFindManyArgs>(
      args?: SelectSubset<T, GroupFindManyArgs>
    ): PrismaPromise<Array<GroupGetPayload<T>>>;

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     *
     **/
    create<T extends GroupCreateArgs>(
      args: SelectSubset<T, GroupCreateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>;

    /**
     * Create many Groups.
     *     @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const group = await prisma.group.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends GroupCreateManyArgs>(
      args?: SelectSubset<T, GroupCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     *
     **/
    delete<T extends GroupDeleteArgs>(
      args: SelectSubset<T, GroupDeleteArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>;

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends GroupUpdateArgs>(
      args: SelectSubset<T, GroupUpdateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>;

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends GroupDeleteManyArgs>(
      args?: SelectSubset<T, GroupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends GroupUpdateManyArgs>(
      args: SelectSubset<T, GroupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     **/
    upsert<T extends GroupUpsertArgs>(
      args: SelectSubset<T, GroupUpsertArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>;

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
     **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], GroupCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends GroupAggregateArgs>(
      args: Subset<T, GroupAggregateArgs>
    ): PrismaPromise<GetGroupAggregateType<T>>;

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs["orderBy"] }
        : { orderBy?: GroupGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetGroupGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    clients<T extends Group$clientsArgs = {}>(
      args?: Subset<T, Group$clientsArgs>
    ): PrismaPromise<Array<ClientGetPayload<T>> | Null>;

    projects<T extends Group$projectsArgs = {}>(
      args?: Subset<T, Group$projectsArgs>
    ): PrismaPromise<Array<ProjectGetPayload<T>> | Null>;

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Group base type for findUnique actions
   */
  export type GroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * Filter, which Group to fetch.
     *
     **/
    where: GroupWhereUniqueInput;
  };

  /**
   * Group findUnique
   */
  export interface GroupFindUniqueArgs extends GroupFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * Filter, which Group to fetch.
     *
     **/
    where: GroupWhereUniqueInput;
  };

  /**
   * Group base type for findFirst actions
   */
  export type GroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * Filter, which Group to fetch.
     *
     **/
    where?: GroupWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Groups to fetch.
     *
     **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Groups.
     *
     **/
    cursor?: GroupWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Groups from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Groups.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Groups.
     *
     **/
    distinct?: Enumerable<GroupScalarFieldEnum>;
  };

  /**
   * Group findFirst
   */
  export interface GroupFindFirstArgs extends GroupFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * Filter, which Group to fetch.
     *
     **/
    where?: GroupWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Groups to fetch.
     *
     **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Groups.
     *
     **/
    cursor?: GroupWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Groups from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Groups.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Groups.
     *
     **/
    distinct?: Enumerable<GroupScalarFieldEnum>;
  };

  /**
   * Group findMany
   */
  export type GroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * Filter, which Groups to fetch.
     *
     **/
    where?: GroupWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Groups to fetch.
     *
     **/
    orderBy?: Enumerable<GroupOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Groups.
     *
     **/
    cursor?: GroupWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Groups from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Groups.
     *
     **/
    skip?: number;
    distinct?: Enumerable<GroupScalarFieldEnum>;
  };

  /**
   * Group create
   */
  export type GroupCreateArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * The data needed to create a Group.
     *
     **/
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>;
  };

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs = {
    /**
     * The data used to create many Groups.
     *
     **/
    data: Enumerable<GroupCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Group update
   */
  export type GroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * The data needed to update a Group.
     *
     **/
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>;
    /**
     * Choose, which Group to update.
     *
     **/
    where: GroupWhereUniqueInput;
  };

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs = {
    /**
     * The data used to update Groups.
     *
     **/
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>;
    /**
     * Filter which Groups to update
     *
     **/
    where?: GroupWhereInput;
  };

  /**
   * Group upsert
   */
  export type GroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * The filter to search for the Group to update in case it exists.
     *
     **/
    where: GroupWhereUniqueInput;
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     *
     **/
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>;
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>;
  };

  /**
   * Group delete
   */
  export type GroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
    /**
     * Filter which Group to delete.
     *
     **/
    where: GroupWhereUniqueInput;
  };

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     *
     **/
    where?: GroupWhereInput;
  };

  /**
   * Group.clients
   */
  export type Group$clientsArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    where?: ClientWhereInput;
    orderBy?: Enumerable<ClientOrderByWithRelationInput>;
    cursor?: ClientWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ClientScalarFieldEnum>;
  };

  /**
   * Group.projects
   */
  export type Group$projectsArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    where?: ProjectWhereInput;
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    cursor?: ProjectWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * Group without action
   */
  export type GroupArgs = {
    /**
     * Select specific fields to fetch from the Group
     *
     **/
    select?: GroupSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: GroupInclude | null;
  };

  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null;
    _avg: ClientAvgAggregateOutputType | null;
    _sum: ClientSumAggregateOutputType | null;
    _min: ClientMinAggregateOutputType | null;
    _max: ClientMaxAggregateOutputType | null;
  };

  export type ClientAvgAggregateOutputType = {
    id: number | null;
    distributorId: number | null;
    groupId: number | null;
  };

  export type ClientSumAggregateOutputType = {
    id: number | null;
    distributorId: number | null;
    groupId: number | null;
  };

  export type ClientMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    fullName: string | null;
    legalAddress: string | null;
    actualAddress: string | null;
    inn: string | null;
    kpp: string | null;
    ogrn: string | null;
    manager: string | null;
    website: string | null;
    phone: string | null;
    email: string | null;
    info: string | null;
    distributorId: number | null;
    groupId: number | null;
  };

  export type ClientMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    fullName: string | null;
    legalAddress: string | null;
    actualAddress: string | null;
    inn: string | null;
    kpp: string | null;
    ogrn: string | null;
    manager: string | null;
    website: string | null;
    phone: string | null;
    email: string | null;
    info: string | null;
    distributorId: number | null;
    groupId: number | null;
  };

  export type ClientCountAggregateOutputType = {
    id: number;
    name: number;
    fullName: number;
    legalAddress: number;
    actualAddress: number;
    inn: number;
    kpp: number;
    ogrn: number;
    manager: number;
    website: number;
    phone: number;
    email: number;
    info: number;
    distributorId: number;
    groupId: number;
    _all: number;
  };

  export type ClientAvgAggregateInputType = {
    id?: true;
    distributorId?: true;
    groupId?: true;
  };

  export type ClientSumAggregateInputType = {
    id?: true;
    distributorId?: true;
    groupId?: true;
  };

  export type ClientMinAggregateInputType = {
    id?: true;
    name?: true;
    fullName?: true;
    legalAddress?: true;
    actualAddress?: true;
    inn?: true;
    kpp?: true;
    ogrn?: true;
    manager?: true;
    website?: true;
    phone?: true;
    email?: true;
    info?: true;
    distributorId?: true;
    groupId?: true;
  };

  export type ClientMaxAggregateInputType = {
    id?: true;
    name?: true;
    fullName?: true;
    legalAddress?: true;
    actualAddress?: true;
    inn?: true;
    kpp?: true;
    ogrn?: true;
    manager?: true;
    website?: true;
    phone?: true;
    email?: true;
    info?: true;
    distributorId?: true;
    groupId?: true;
  };

  export type ClientCountAggregateInputType = {
    id?: true;
    name?: true;
    fullName?: true;
    legalAddress?: true;
    actualAddress?: true;
    inn?: true;
    kpp?: true;
    ogrn?: true;
    manager?: true;
    website?: true;
    phone?: true;
    email?: true;
    info?: true;
    distributorId?: true;
    groupId?: true;
    _all?: true;
  };

  export type ClientAggregateArgs = {
    /**
     * Filter which Client to aggregate.
     *
     **/
    where?: ClientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Clients to fetch.
     *
     **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: ClientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Clients from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Clients.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Clients
     **/
    _count?: true | ClientCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ClientAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ClientSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ClientMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ClientMaxAggregateInputType;
  };

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
    [P in keyof T & keyof AggregateClient]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>;
  };

  export type ClientGroupByArgs = {
    where?: ClientWhereInput;
    orderBy?: Enumerable<ClientOrderByWithAggregationInput>;
    by: Array<ClientScalarFieldEnum>;
    having?: ClientScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ClientCountAggregateInputType | true;
    _avg?: ClientAvgAggregateInputType;
    _sum?: ClientSumAggregateInputType;
    _min?: ClientMinAggregateInputType;
    _max?: ClientMaxAggregateInputType;
  };

  export type ClientGroupByOutputType = {
    id: number;
    name: string;
    fullName: string;
    legalAddress: string | null;
    actualAddress: string | null;
    inn: string;
    kpp: string | null;
    ogrn: string | null;
    manager: string | null;
    website: string | null;
    phone: string | null;
    email: string | null;
    info: string | null;
    distributorId: number | null;
    groupId: number;
    _count: ClientCountAggregateOutputType | null;
    _avg: ClientAvgAggregateOutputType | null;
    _sum: ClientSumAggregateOutputType | null;
    _min: ClientMinAggregateOutputType | null;
    _max: ClientMaxAggregateOutputType | null;
  };

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ClientGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
          : GetScalarType<T[P], ClientGroupByOutputType[P]>;
      }
    >
  >;

  export type ClientSelect = {
    id?: boolean;
    name?: boolean;
    fullName?: boolean;
    legalAddress?: boolean;
    actualAddress?: boolean;
    inn?: boolean;
    kpp?: boolean;
    ogrn?: boolean;
    manager?: boolean;
    website?: boolean;
    phone?: boolean;
    email?: boolean;
    info?: boolean;
    distributor?: boolean | DistributorArgs;
    distributorId?: boolean;
    group?: boolean | GroupArgs;
    groupId?: boolean;
    projects?: boolean | Client$projectsArgs;
    tasks?: boolean | Client$tasksArgs;
    contacts?: boolean | Client$contactsArgs;
    sales?: boolean | Client$salesArgs;
    _count?: boolean | ClientCountOutputTypeArgs;
  };

  export type ClientInclude = {
    distributor?: boolean | DistributorArgs;
    group?: boolean | GroupArgs;
    projects?: boolean | Client$projectsArgs;
    tasks?: boolean | Client$tasksArgs;
    contacts?: boolean | Client$contactsArgs;
    sales?: boolean | Client$salesArgs;
    _count?: boolean | ClientCountOutputTypeArgs;
  };

  export type ClientGetPayload<
    S extends boolean | null | undefined | ClientArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Client
    : S extends undefined
    ? never
    : S extends { include: any } & (ClientArgs | ClientFindManyArgs)
    ? Client & {
        [P in TruthyKeys<S["include"]>]: P extends "distributor"
          ? DistributorGetPayload<S["include"][P]> | null
          : P extends "group"
          ? GroupGetPayload<S["include"][P]>
          : P extends "projects"
          ? Array<ProjectGetPayload<S["include"][P]>>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["include"][P]>>
          : P extends "contacts"
          ? Array<ContactGetPayload<S["include"][P]>>
          : P extends "sales"
          ? Array<SaleGetPayload<S["include"][P]>>
          : P extends "_count"
          ? ClientCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (ClientArgs | ClientFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "distributor"
          ? DistributorGetPayload<S["select"][P]> | null
          : P extends "group"
          ? GroupGetPayload<S["select"][P]>
          : P extends "projects"
          ? Array<ProjectGetPayload<S["select"][P]>>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["select"][P]>>
          : P extends "contacts"
          ? Array<ContactGetPayload<S["select"][P]>>
          : P extends "sales"
          ? Array<SaleGetPayload<S["select"][P]>>
          : P extends "_count"
          ? ClientCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Client
          ? Client[P]
          : never;
      }
    : Client;

  type ClientCountArgs = Merge<
    Omit<ClientFindManyArgs, "select" | "include"> & {
      select?: ClientCountAggregateInputType | true;
    }
  >;

  export interface ClientDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends ClientFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, ClientFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Client"
    > extends True
      ? Prisma__ClientClient<ClientGetPayload<T>>
      : Prisma__ClientClient<ClientGetPayload<T> | null, null>;

    /**
     * Find one Client that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>;

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends ClientFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, ClientFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Client"
    > extends True
      ? Prisma__ClientClient<ClientGetPayload<T>>
      : Prisma__ClientClient<ClientGetPayload<T> | null, null>;

    /**
     * Find the first Client that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>;

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     *
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends ClientFindManyArgs>(
      args?: SelectSubset<T, ClientFindManyArgs>
    ): PrismaPromise<Array<ClientGetPayload<T>>>;

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     *
     **/
    create<T extends ClientCreateArgs>(
      args: SelectSubset<T, ClientCreateArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>;

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends ClientCreateManyArgs>(
      args?: SelectSubset<T, ClientCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     *
     **/
    delete<T extends ClientDeleteArgs>(
      args: SelectSubset<T, ClientDeleteArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>;

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends ClientUpdateArgs>(
      args: SelectSubset<T, ClientUpdateArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>;

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends ClientDeleteManyArgs>(
      args?: SelectSubset<T, ClientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends ClientUpdateManyArgs>(
      args: SelectSubset<T, ClientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     **/
    upsert<T extends ClientUpsertArgs>(
      args: SelectSubset<T, ClientUpsertArgs>
    ): Prisma__ClientClient<ClientGetPayload<T>>;

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
     **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ClientCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ClientAggregateArgs>(
      args: Subset<T, ClientAggregateArgs>
    ): PrismaPromise<GetClientAggregateType<T>>;

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs["orderBy"] }
        : { orderBy?: ClientGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetClientGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    group<T extends GroupArgs = {}>(
      args?: Subset<T, GroupArgs>
    ): Prisma__GroupClient<GroupGetPayload<T> | Null>;

    projects<T extends Client$projectsArgs = {}>(
      args?: Subset<T, Client$projectsArgs>
    ): PrismaPromise<Array<ProjectGetPayload<T>> | Null>;

    tasks<T extends Client$tasksArgs = {}>(
      args?: Subset<T, Client$tasksArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>> | Null>;

    contacts<T extends Client$contactsArgs = {}>(
      args?: Subset<T, Client$contactsArgs>
    ): PrismaPromise<Array<ContactGetPayload<T>> | Null>;

    sales<T extends Client$salesArgs = {}>(
      args?: Subset<T, Client$salesArgs>
    ): PrismaPromise<Array<SaleGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Client base type for findUnique actions
   */
  export type ClientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * Filter, which Client to fetch.
     *
     **/
    where: ClientWhereUniqueInput;
  };

  /**
   * Client findUnique
   */
  export interface ClientFindUniqueArgs extends ClientFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * Filter, which Client to fetch.
     *
     **/
    where: ClientWhereUniqueInput;
  };

  /**
   * Client base type for findFirst actions
   */
  export type ClientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * Filter, which Client to fetch.
     *
     **/
    where?: ClientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Clients to fetch.
     *
     **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Clients.
     *
     **/
    cursor?: ClientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Clients from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Clients.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Clients.
     *
     **/
    distinct?: Enumerable<ClientScalarFieldEnum>;
  };

  /**
   * Client findFirst
   */
  export interface ClientFindFirstArgs extends ClientFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * Filter, which Client to fetch.
     *
     **/
    where?: ClientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Clients to fetch.
     *
     **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Clients.
     *
     **/
    cursor?: ClientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Clients from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Clients.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Clients.
     *
     **/
    distinct?: Enumerable<ClientScalarFieldEnum>;
  };

  /**
   * Client findMany
   */
  export type ClientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * Filter, which Clients to fetch.
     *
     **/
    where?: ClientWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Clients to fetch.
     *
     **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Clients.
     *
     **/
    cursor?: ClientWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Clients from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Clients.
     *
     **/
    skip?: number;
    distinct?: Enumerable<ClientScalarFieldEnum>;
  };

  /**
   * Client create
   */
  export type ClientCreateArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * The data needed to create a Client.
     *
     **/
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>;
  };

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs = {
    /**
     * The data used to create many Clients.
     *
     **/
    data: Enumerable<ClientCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Client update
   */
  export type ClientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * The data needed to update a Client.
     *
     **/
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>;
    /**
     * Choose, which Client to update.
     *
     **/
    where: ClientWhereUniqueInput;
  };

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs = {
    /**
     * The data used to update Clients.
     *
     **/
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>;
    /**
     * Filter which Clients to update
     *
     **/
    where?: ClientWhereInput;
  };

  /**
   * Client upsert
   */
  export type ClientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * The filter to search for the Client to update in case it exists.
     *
     **/
    where: ClientWhereUniqueInput;
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     *
     **/
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>;
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>;
  };

  /**
   * Client delete
   */
  export type ClientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
    /**
     * Filter which Client to delete.
     *
     **/
    where: ClientWhereUniqueInput;
  };

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs = {
    /**
     * Filter which Clients to delete
     *
     **/
    where?: ClientWhereInput;
  };

  /**
   * Client.projects
   */
  export type Client$projectsArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    where?: ProjectWhereInput;
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    cursor?: ProjectWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * Client.tasks
   */
  export type Client$tasksArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Client.contacts
   */
  export type Client$contactsArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    where?: ContactWhereInput;
    orderBy?: Enumerable<ContactOrderByWithRelationInput>;
    cursor?: ContactWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ContactScalarFieldEnum>;
  };

  /**
   * Client.sales
   */
  export type Client$salesArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    where?: SaleWhereInput;
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    cursor?: SaleWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * Client without action
   */
  export type ClientArgs = {
    /**
     * Select specific fields to fetch from the Client
     *
     **/
    select?: ClientSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ClientInclude | null;
  };

  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null;
    _avg: ContactAvgAggregateOutputType | null;
    _sum: ContactSumAggregateOutputType | null;
    _min: ContactMinAggregateOutputType | null;
    _max: ContactMaxAggregateOutputType | null;
  };

  export type ContactAvgAggregateOutputType = {
    id: number | null;
    clientId: number | null;
    distributorId: number | null;
  };

  export type ContactSumAggregateOutputType = {
    id: number | null;
    clientId: number | null;
    distributorId: number | null;
  };

  export type ContactMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    email: string | null;
    phone: string | null;
    description: string | null;
    clientId: number | null;
    distributorId: number | null;
  };

  export type ContactMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    email: string | null;
    phone: string | null;
    description: string | null;
    clientId: number | null;
    distributorId: number | null;
  };

  export type ContactCountAggregateOutputType = {
    id: number;
    name: number;
    email: number;
    phone: number;
    description: number;
    clientId: number;
    distributorId: number;
    _all: number;
  };

  export type ContactAvgAggregateInputType = {
    id?: true;
    clientId?: true;
    distributorId?: true;
  };

  export type ContactSumAggregateInputType = {
    id?: true;
    clientId?: true;
    distributorId?: true;
  };

  export type ContactMinAggregateInputType = {
    id?: true;
    name?: true;
    email?: true;
    phone?: true;
    description?: true;
    clientId?: true;
    distributorId?: true;
  };

  export type ContactMaxAggregateInputType = {
    id?: true;
    name?: true;
    email?: true;
    phone?: true;
    description?: true;
    clientId?: true;
    distributorId?: true;
  };

  export type ContactCountAggregateInputType = {
    id?: true;
    name?: true;
    email?: true;
    phone?: true;
    description?: true;
    clientId?: true;
    distributorId?: true;
    _all?: true;
  };

  export type ContactAggregateArgs = {
    /**
     * Filter which Contact to aggregate.
     *
     **/
    where?: ContactWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Contacts to fetch.
     *
     **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: ContactWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Contacts from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Contacts.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Contacts
     **/
    _count?: true | ContactCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ContactAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ContactSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ContactMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ContactMaxAggregateInputType;
  };

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
    [P in keyof T & keyof AggregateContact]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>;
  };

  export type ContactGroupByArgs = {
    where?: ContactWhereInput;
    orderBy?: Enumerable<ContactOrderByWithAggregationInput>;
    by: Array<ContactScalarFieldEnum>;
    having?: ContactScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ContactCountAggregateInputType | true;
    _avg?: ContactAvgAggregateInputType;
    _sum?: ContactSumAggregateInputType;
    _min?: ContactMinAggregateInputType;
    _max?: ContactMaxAggregateInputType;
  };

  export type ContactGroupByOutputType = {
    id: number;
    name: string;
    email: string;
    phone: string | null;
    description: string | null;
    clientId: number;
    distributorId: number;
    _count: ContactCountAggregateOutputType | null;
    _avg: ContactAvgAggregateOutputType | null;
    _sum: ContactSumAggregateOutputType | null;
    _min: ContactMinAggregateOutputType | null;
    _max: ContactMaxAggregateOutputType | null;
  };

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContactGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ContactGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
          : GetScalarType<T[P], ContactGroupByOutputType[P]>;
      }
    >
  >;

  export type ContactSelect = {
    id?: boolean;
    name?: boolean;
    email?: boolean;
    phone?: boolean;
    description?: boolean;
    clientId?: boolean;
    client?: boolean | ClientArgs;
    distributorId?: boolean;
    distributor?: boolean | DistributorArgs;
    tasks?: boolean | Contact$tasksArgs;
    _count?: boolean | ContactCountOutputTypeArgs;
  };

  export type ContactInclude = {
    client?: boolean | ClientArgs;
    distributor?: boolean | DistributorArgs;
    tasks?: boolean | Contact$tasksArgs;
    _count?: boolean | ContactCountOutputTypeArgs;
  };

  export type ContactGetPayload<
    S extends boolean | null | undefined | ContactArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Contact
    : S extends undefined
    ? never
    : S extends { include: any } & (ContactArgs | ContactFindManyArgs)
    ? Contact & {
        [P in TruthyKeys<S["include"]>]: P extends "client"
          ? ClientGetPayload<S["include"][P]>
          : P extends "distributor"
          ? DistributorGetPayload<S["include"][P]>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["include"][P]>>
          : P extends "_count"
          ? ContactCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (ContactArgs | ContactFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "client"
          ? ClientGetPayload<S["select"][P]>
          : P extends "distributor"
          ? DistributorGetPayload<S["select"][P]>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["select"][P]>>
          : P extends "_count"
          ? ContactCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Contact
          ? Contact[P]
          : never;
      }
    : Contact;

  type ContactCountArgs = Merge<
    Omit<ContactFindManyArgs, "select" | "include"> & {
      select?: ContactCountAggregateInputType | true;
    }
  >;

  export interface ContactDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends ContactFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, ContactFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Contact"
    > extends True
      ? Prisma__ContactClient<ContactGetPayload<T>>
      : Prisma__ContactClient<ContactGetPayload<T> | null, null>;

    /**
     * Find one Contact that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ContactFindUniqueOrThrowArgs>
    ): Prisma__ContactClient<ContactGetPayload<T>>;

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends ContactFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, ContactFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Contact"
    > extends True
      ? Prisma__ContactClient<ContactGetPayload<T>>
      : Prisma__ContactClient<ContactGetPayload<T> | null, null>;

    /**
     * Find the first Contact that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ContactFindFirstOrThrowArgs>
    ): Prisma__ContactClient<ContactGetPayload<T>>;

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     *
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends ContactFindManyArgs>(
      args?: SelectSubset<T, ContactFindManyArgs>
    ): PrismaPromise<Array<ContactGetPayload<T>>>;

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     *
     **/
    create<T extends ContactCreateArgs>(
      args: SelectSubset<T, ContactCreateArgs>
    ): Prisma__ContactClient<ContactGetPayload<T>>;

    /**
     * Create many Contacts.
     *     @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contact = await prisma.contact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends ContactCreateManyArgs>(
      args?: SelectSubset<T, ContactCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     *
     **/
    delete<T extends ContactDeleteArgs>(
      args: SelectSubset<T, ContactDeleteArgs>
    ): Prisma__ContactClient<ContactGetPayload<T>>;

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends ContactUpdateArgs>(
      args: SelectSubset<T, ContactUpdateArgs>
    ): Prisma__ContactClient<ContactGetPayload<T>>;

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends ContactDeleteManyArgs>(
      args?: SelectSubset<T, ContactDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends ContactUpdateManyArgs>(
      args: SelectSubset<T, ContactUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     **/
    upsert<T extends ContactUpsertArgs>(
      args: SelectSubset<T, ContactUpsertArgs>
    ): Prisma__ContactClient<ContactGetPayload<T>>;

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
     **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ContactCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ContactAggregateArgs>(
      args: Subset<T, ContactAggregateArgs>
    ): PrismaPromise<GetContactAggregateType<T>>;

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs["orderBy"] }
        : { orderBy?: ContactGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetContactGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    client<T extends ClientArgs = {}>(
      args?: Subset<T, ClientArgs>
    ): Prisma__ClientClient<ClientGetPayload<T> | Null>;

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    tasks<T extends Contact$tasksArgs = {}>(
      args?: Subset<T, Contact$tasksArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Contact base type for findUnique actions
   */
  export type ContactFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * Filter, which Contact to fetch.
     *
     **/
    where: ContactWhereUniqueInput;
  };

  /**
   * Contact findUnique
   */
  export interface ContactFindUniqueArgs extends ContactFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * Filter, which Contact to fetch.
     *
     **/
    where: ContactWhereUniqueInput;
  };

  /**
   * Contact base type for findFirst actions
   */
  export type ContactFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * Filter, which Contact to fetch.
     *
     **/
    where?: ContactWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Contacts to fetch.
     *
     **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Contacts.
     *
     **/
    cursor?: ContactWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Contacts from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Contacts.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Contacts.
     *
     **/
    distinct?: Enumerable<ContactScalarFieldEnum>;
  };

  /**
   * Contact findFirst
   */
  export interface ContactFindFirstArgs extends ContactFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * Filter, which Contact to fetch.
     *
     **/
    where?: ContactWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Contacts to fetch.
     *
     **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Contacts.
     *
     **/
    cursor?: ContactWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Contacts from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Contacts.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Contacts.
     *
     **/
    distinct?: Enumerable<ContactScalarFieldEnum>;
  };

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * Filter, which Contacts to fetch.
     *
     **/
    where?: ContactWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Contacts to fetch.
     *
     **/
    orderBy?: Enumerable<ContactOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Contacts.
     *
     **/
    cursor?: ContactWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Contacts from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Contacts.
     *
     **/
    skip?: number;
    distinct?: Enumerable<ContactScalarFieldEnum>;
  };

  /**
   * Contact create
   */
  export type ContactCreateArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * The data needed to create a Contact.
     *
     **/
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>;
  };

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs = {
    /**
     * The data used to create many Contacts.
     *
     **/
    data: Enumerable<ContactCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Contact update
   */
  export type ContactUpdateArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * The data needed to update a Contact.
     *
     **/
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>;
    /**
     * Choose, which Contact to update.
     *
     **/
    where: ContactWhereUniqueInput;
  };

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs = {
    /**
     * The data used to update Contacts.
     *
     **/
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>;
    /**
     * Filter which Contacts to update
     *
     **/
    where?: ContactWhereInput;
  };

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * The filter to search for the Contact to update in case it exists.
     *
     **/
    where: ContactWhereUniqueInput;
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     *
     **/
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>;
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>;
  };

  /**
   * Contact delete
   */
  export type ContactDeleteArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
    /**
     * Filter which Contact to delete.
     *
     **/
    where: ContactWhereUniqueInput;
  };

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs = {
    /**
     * Filter which Contacts to delete
     *
     **/
    where?: ContactWhereInput;
  };

  /**
   * Contact.tasks
   */
  export type Contact$tasksArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Contact without action
   */
  export type ContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
     *
     **/
    select?: ContactSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ContactInclude | null;
  };

  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null;
    _avg: ProjectAvgAggregateOutputType | null;
    _sum: ProjectSumAggregateOutputType | null;
    _min: ProjectMinAggregateOutputType | null;
    _max: ProjectMaxAggregateOutputType | null;
  };

  export type ProjectAvgAggregateOutputType = {
    id: number | null;
    discount: number | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    groupId: number | null;
  };

  export type ProjectSumAggregateOutputType = {
    id: number | null;
    discount: number | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    groupId: number | null;
  };

  export type ProjectMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    description: string | null;
    discount: number | null;
    startDate: Date | null;
    finishDate: Date | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    groupId: number | null;
  };

  export type ProjectMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    description: string | null;
    discount: number | null;
    startDate: Date | null;
    finishDate: Date | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    groupId: number | null;
  };

  export type ProjectCountAggregateOutputType = {
    id: number;
    name: number;
    description: number;
    discount: number;
    startDate: number;
    finishDate: number;
    statusId: number;
    distributorId: number;
    clientId: number;
    groupId: number;
    _all: number;
  };

  export type ProjectAvgAggregateInputType = {
    id?: true;
    discount?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    groupId?: true;
  };

  export type ProjectSumAggregateInputType = {
    id?: true;
    discount?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    groupId?: true;
  };

  export type ProjectMinAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    discount?: true;
    startDate?: true;
    finishDate?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    groupId?: true;
  };

  export type ProjectMaxAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    discount?: true;
    startDate?: true;
    finishDate?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    groupId?: true;
  };

  export type ProjectCountAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    discount?: true;
    startDate?: true;
    finishDate?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    groupId?: true;
    _all?: true;
  };

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     *
     **/
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Projects
     **/
    _count?: true | ProjectCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ProjectAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ProjectSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ProjectMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ProjectMaxAggregateInputType;
  };

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
    [P in keyof T & keyof AggregateProject]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>;
  };

  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput;
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>;
    by: Array<ProjectScalarFieldEnum>;
    having?: ProjectScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ProjectCountAggregateInputType | true;
    _avg?: ProjectAvgAggregateInputType;
    _sum?: ProjectSumAggregateInputType;
    _min?: ProjectMinAggregateInputType;
    _max?: ProjectMaxAggregateInputType;
  };

  export type ProjectGroupByOutputType = {
    id: number;
    name: string;
    description: string | null;
    discount: number | null;
    startDate: Date;
    finishDate: Date | null;
    statusId: number;
    distributorId: number;
    clientId: number;
    groupId: number;
    _count: ProjectCountAggregateOutputType | null;
    _avg: ProjectAvgAggregateOutputType | null;
    _sum: ProjectSumAggregateOutputType | null;
    _min: ProjectMinAggregateOutputType | null;
    _max: ProjectMaxAggregateOutputType | null;
  };

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ProjectGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
          : GetScalarType<T[P], ProjectGroupByOutputType[P]>;
      }
    >
  >;

  export type ProjectSelect = {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    discount?: boolean;
    startDate?: boolean;
    finishDate?: boolean;
    status?: boolean | ProjectStatusArgs;
    statusId?: boolean;
    distributorId?: boolean;
    distributor?: boolean | DistributorArgs;
    clientId?: boolean;
    client?: boolean | ClientArgs;
    groupId?: boolean;
    group?: boolean | GroupArgs;
    tasks?: boolean | Project$tasksArgs;
    sales?: boolean | Project$salesArgs;
    _count?: boolean | ProjectCountOutputTypeArgs;
  };

  export type ProjectInclude = {
    status?: boolean | ProjectStatusArgs;
    distributor?: boolean | DistributorArgs;
    client?: boolean | ClientArgs;
    group?: boolean | GroupArgs;
    tasks?: boolean | Project$tasksArgs;
    sales?: boolean | Project$salesArgs;
    _count?: boolean | ProjectCountOutputTypeArgs;
  };

  export type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Project
    : S extends undefined
    ? never
    : S extends { include: any } & (ProjectArgs | ProjectFindManyArgs)
    ? Project & {
        [P in TruthyKeys<S["include"]>]: P extends "status"
          ? ProjectStatusGetPayload<S["include"][P]>
          : P extends "distributor"
          ? DistributorGetPayload<S["include"][P]>
          : P extends "client"
          ? ClientGetPayload<S["include"][P]>
          : P extends "group"
          ? GroupGetPayload<S["include"][P]>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["include"][P]>>
          : P extends "sales"
          ? Array<SaleGetPayload<S["include"][P]>>
          : P extends "_count"
          ? ProjectCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (ProjectArgs | ProjectFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "status"
          ? ProjectStatusGetPayload<S["select"][P]>
          : P extends "distributor"
          ? DistributorGetPayload<S["select"][P]>
          : P extends "client"
          ? ClientGetPayload<S["select"][P]>
          : P extends "group"
          ? GroupGetPayload<S["select"][P]>
          : P extends "tasks"
          ? Array<TaskGetPayload<S["select"][P]>>
          : P extends "sales"
          ? Array<SaleGetPayload<S["select"][P]>>
          : P extends "_count"
          ? ProjectCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Project
          ? Project[P]
          : never;
      }
    : Project;

  type ProjectCountArgs = Merge<
    Omit<ProjectFindManyArgs, "select" | "include"> & {
      select?: ProjectCountAggregateInputType | true;
    }
  >;

  export interface ProjectDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends ProjectFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Project"
    > extends True
      ? Prisma__ProjectClient<ProjectGetPayload<T>>
      : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>;

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>;

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends ProjectFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Project"
    > extends True
      ? Prisma__ProjectClient<ProjectGetPayload<T>>
      : Prisma__ProjectClient<ProjectGetPayload<T> | null, null>;

    /**
     * Find the first Project that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>;

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     *
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): PrismaPromise<Array<ProjectGetPayload<T>>>;

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     *
     **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>;

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     *
     **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>;

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>;

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T>>;

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
     **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ProjectCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ProjectAggregateArgs>(
      args: Subset<T, ProjectAggregateArgs>
    ): PrismaPromise<GetProjectAggregateType<T>>;

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs["orderBy"] }
        : { orderBy?: ProjectGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetProjectGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    status<T extends ProjectStatusArgs = {}>(
      args?: Subset<T, ProjectStatusArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T> | Null>;

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    client<T extends ClientArgs = {}>(
      args?: Subset<T, ClientArgs>
    ): Prisma__ClientClient<ClientGetPayload<T> | Null>;

    group<T extends GroupArgs = {}>(
      args?: Subset<T, GroupArgs>
    ): Prisma__GroupClient<GroupGetPayload<T> | Null>;

    tasks<T extends Project$tasksArgs = {}>(
      args?: Subset<T, Project$tasksArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>> | Null>;

    sales<T extends Project$salesArgs = {}>(
      args?: Subset<T, Project$salesArgs>
    ): PrismaPromise<Array<SaleGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Project base type for findUnique actions
   */
  export type ProjectFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * Filter, which Project to fetch.
     *
     **/
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project findUnique
   */
  export interface ProjectFindUniqueArgs extends ProjectFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * Filter, which Project to fetch.
     *
     **/
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project base type for findFirst actions
   */
  export type ProjectFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * Filter, which Project to fetch.
     *
     **/
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Projects.
     *
     **/
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Projects.
     *
     **/
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * Project findFirst
   */
  export interface ProjectFindFirstArgs extends ProjectFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * Filter, which Project to fetch.
     *
     **/
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Projects.
     *
     **/
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Projects.
     *
     **/
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * Filter, which Projects to fetch.
     *
     **/
    where?: ProjectWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Projects to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Projects.
     *
     **/
    cursor?: ProjectWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Projects from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Projects.
     *
     **/
    skip?: number;
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * The data needed to create a Project.
     *
     **/
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>;
  };

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs = {
    /**
     * The data used to create many Projects.
     *
     **/
    data: Enumerable<ProjectCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * The data needed to update a Project.
     *
     **/
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>;
    /**
     * Choose, which Project to update.
     *
     **/
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     *
     **/
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>;
    /**
     * Filter which Projects to update
     *
     **/
    where?: ProjectWhereInput;
  };

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * The filter to search for the Project to update in case it exists.
     *
     **/
    where: ProjectWhereUniqueInput;
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     *
     **/
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>;
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>;
  };

  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    /**
     * Filter which Project to delete.
     *
     **/
    where: ProjectWhereUniqueInput;
  };

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     *
     **/
    where?: ProjectWhereInput;
  };

  /**
   * Project.tasks
   */
  export type Project$tasksArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Project.sales
   */
  export type Project$salesArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    where?: SaleWhereInput;
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    cursor?: SaleWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
  };

  /**
   * Model ProjectStatus
   */

  export type AggregateProjectStatus = {
    _count: ProjectStatusCountAggregateOutputType | null;
    _avg: ProjectStatusAvgAggregateOutputType | null;
    _sum: ProjectStatusSumAggregateOutputType | null;
    _min: ProjectStatusMinAggregateOutputType | null;
    _max: ProjectStatusMaxAggregateOutputType | null;
  };

  export type ProjectStatusAvgAggregateOutputType = {
    id: number | null;
  };

  export type ProjectStatusSumAggregateOutputType = {
    id: number | null;
  };

  export type ProjectStatusMinAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type ProjectStatusMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type ProjectStatusCountAggregateOutputType = {
    id: number;
    name: number;
    _all: number;
  };

  export type ProjectStatusAvgAggregateInputType = {
    id?: true;
  };

  export type ProjectStatusSumAggregateInputType = {
    id?: true;
  };

  export type ProjectStatusMinAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type ProjectStatusMaxAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type ProjectStatusCountAggregateInputType = {
    id?: true;
    name?: true;
    _all?: true;
  };

  export type ProjectStatusAggregateArgs = {
    /**
     * Filter which ProjectStatus to aggregate.
     *
     **/
    where?: ProjectStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ProjectStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: ProjectStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ProjectStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ProjectStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned ProjectStatuses
     **/
    _count?: true | ProjectStatusCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ProjectStatusAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ProjectStatusSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ProjectStatusMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ProjectStatusMaxAggregateInputType;
  };

  export type GetProjectStatusAggregateType<
    T extends ProjectStatusAggregateArgs
  > = {
    [P in keyof T & keyof AggregateProjectStatus]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectStatus[P]>
      : GetScalarType<T[P], AggregateProjectStatus[P]>;
  };

  export type ProjectStatusGroupByArgs = {
    where?: ProjectStatusWhereInput;
    orderBy?: Enumerable<ProjectStatusOrderByWithAggregationInput>;
    by: Array<ProjectStatusScalarFieldEnum>;
    having?: ProjectStatusScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ProjectStatusCountAggregateInputType | true;
    _avg?: ProjectStatusAvgAggregateInputType;
    _sum?: ProjectStatusSumAggregateInputType;
    _min?: ProjectStatusMinAggregateInputType;
    _max?: ProjectStatusMaxAggregateInputType;
  };

  export type ProjectStatusGroupByOutputType = {
    id: number;
    name: string;
    _count: ProjectStatusCountAggregateOutputType | null;
    _avg: ProjectStatusAvgAggregateOutputType | null;
    _sum: ProjectStatusSumAggregateOutputType | null;
    _min: ProjectStatusMinAggregateOutputType | null;
    _max: ProjectStatusMaxAggregateOutputType | null;
  };

  type GetProjectStatusGroupByPayload<T extends ProjectStatusGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<ProjectStatusGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof ProjectStatusGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectStatusGroupByOutputType[P]>;
        }
      >
    >;

  export type ProjectStatusSelect = {
    id?: boolean;
    name?: boolean;
    projects?: boolean | ProjectStatus$projectsArgs;
    _count?: boolean | ProjectStatusCountOutputTypeArgs;
  };

  export type ProjectStatusInclude = {
    projects?: boolean | ProjectStatus$projectsArgs;
    _count?: boolean | ProjectStatusCountOutputTypeArgs;
  };

  export type ProjectStatusGetPayload<
    S extends boolean | null | undefined | ProjectStatusArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? ProjectStatus
    : S extends undefined
    ? never
    : S extends { include: any } & (
        | ProjectStatusArgs
        | ProjectStatusFindManyArgs
      )
    ? ProjectStatus & {
        [P in TruthyKeys<S["include"]>]: P extends "projects"
          ? Array<ProjectGetPayload<S["include"][P]>>
          : P extends "_count"
          ? ProjectStatusCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (
        | ProjectStatusArgs
        | ProjectStatusFindManyArgs
      )
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "projects"
          ? Array<ProjectGetPayload<S["select"][P]>>
          : P extends "_count"
          ? ProjectStatusCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof ProjectStatus
          ? ProjectStatus[P]
          : never;
      }
    : ProjectStatus;

  type ProjectStatusCountArgs = Merge<
    Omit<ProjectStatusFindManyArgs, "select" | "include"> & {
      select?: ProjectStatusCountAggregateInputType | true;
    }
  >;

  export interface ProjectStatusDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one ProjectStatus that matches the filter.
     * @param {ProjectStatusFindUniqueArgs} args - Arguments to find a ProjectStatus
     * @example
     * // Get one ProjectStatus
     * const projectStatus = await prisma.projectStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends ProjectStatusFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, ProjectStatusFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "ProjectStatus"
    > extends True
      ? Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>
      : Prisma__ProjectStatusClient<ProjectStatusGetPayload<T> | null, null>;

    /**
     * Find one ProjectStatus that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {ProjectStatusFindUniqueOrThrowArgs} args - Arguments to find a ProjectStatus
     * @example
     * // Get one ProjectStatus
     * const projectStatus = await prisma.projectStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends ProjectStatusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProjectStatusFindUniqueOrThrowArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>;

    /**
     * Find the first ProjectStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusFindFirstArgs} args - Arguments to find a ProjectStatus
     * @example
     * // Get one ProjectStatus
     * const projectStatus = await prisma.projectStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends ProjectStatusFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, ProjectStatusFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "ProjectStatus"
    > extends True
      ? Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>
      : Prisma__ProjectStatusClient<ProjectStatusGetPayload<T> | null, null>;

    /**
     * Find the first ProjectStatus that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusFindFirstOrThrowArgs} args - Arguments to find a ProjectStatus
     * @example
     * // Get one ProjectStatus
     * const projectStatus = await prisma.projectStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends ProjectStatusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProjectStatusFindFirstOrThrowArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>;

    /**
     * Find zero or more ProjectStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectStatuses
     * const projectStatuses = await prisma.projectStatus.findMany()
     *
     * // Get first 10 ProjectStatuses
     * const projectStatuses = await prisma.projectStatus.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const projectStatusWithIdOnly = await prisma.projectStatus.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends ProjectStatusFindManyArgs>(
      args?: SelectSubset<T, ProjectStatusFindManyArgs>
    ): PrismaPromise<Array<ProjectStatusGetPayload<T>>>;

    /**
     * Create a ProjectStatus.
     * @param {ProjectStatusCreateArgs} args - Arguments to create a ProjectStatus.
     * @example
     * // Create one ProjectStatus
     * const ProjectStatus = await prisma.projectStatus.create({
     *   data: {
     *     // ... data to create a ProjectStatus
     *   }
     * })
     *
     **/
    create<T extends ProjectStatusCreateArgs>(
      args: SelectSubset<T, ProjectStatusCreateArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>;

    /**
     * Create many ProjectStatuses.
     *     @param {ProjectStatusCreateManyArgs} args - Arguments to create many ProjectStatuses.
     *     @example
     *     // Create many ProjectStatuses
     *     const projectStatus = await prisma.projectStatus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends ProjectStatusCreateManyArgs>(
      args?: SelectSubset<T, ProjectStatusCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a ProjectStatus.
     * @param {ProjectStatusDeleteArgs} args - Arguments to delete one ProjectStatus.
     * @example
     * // Delete one ProjectStatus
     * const ProjectStatus = await prisma.projectStatus.delete({
     *   where: {
     *     // ... filter to delete one ProjectStatus
     *   }
     * })
     *
     **/
    delete<T extends ProjectStatusDeleteArgs>(
      args: SelectSubset<T, ProjectStatusDeleteArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>;

    /**
     * Update one ProjectStatus.
     * @param {ProjectStatusUpdateArgs} args - Arguments to update one ProjectStatus.
     * @example
     * // Update one ProjectStatus
     * const projectStatus = await prisma.projectStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends ProjectStatusUpdateArgs>(
      args: SelectSubset<T, ProjectStatusUpdateArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>;

    /**
     * Delete zero or more ProjectStatuses.
     * @param {ProjectStatusDeleteManyArgs} args - Arguments to filter ProjectStatuses to delete.
     * @example
     * // Delete a few ProjectStatuses
     * const { count } = await prisma.projectStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends ProjectStatusDeleteManyArgs>(
      args?: SelectSubset<T, ProjectStatusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more ProjectStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectStatuses
     * const projectStatus = await prisma.projectStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends ProjectStatusUpdateManyArgs>(
      args: SelectSubset<T, ProjectStatusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one ProjectStatus.
     * @param {ProjectStatusUpsertArgs} args - Arguments to update or create a ProjectStatus.
     * @example
     * // Update or create a ProjectStatus
     * const projectStatus = await prisma.projectStatus.upsert({
     *   create: {
     *     // ... data to create a ProjectStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectStatus we want to update
     *   }
     * })
     **/
    upsert<T extends ProjectStatusUpsertArgs>(
      args: SelectSubset<T, ProjectStatusUpsertArgs>
    ): Prisma__ProjectStatusClient<ProjectStatusGetPayload<T>>;

    /**
     * Count the number of ProjectStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusCountArgs} args - Arguments to filter ProjectStatuses to count.
     * @example
     * // Count the number of ProjectStatuses
     * const count = await prisma.projectStatus.count({
     *   where: {
     *     // ... the filter for the ProjectStatuses we want to count
     *   }
     * })
     **/
    count<T extends ProjectStatusCountArgs>(
      args?: Subset<T, ProjectStatusCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ProjectStatusCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a ProjectStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ProjectStatusAggregateArgs>(
      args: Subset<T, ProjectStatusAggregateArgs>
    ): PrismaPromise<GetProjectStatusAggregateType<T>>;

    /**
     * Group by ProjectStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ProjectStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectStatusGroupByArgs["orderBy"] }
        : { orderBy?: ProjectStatusGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, ProjectStatusGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetProjectStatusGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectStatusClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    projects<T extends ProjectStatus$projectsArgs = {}>(
      args?: Subset<T, ProjectStatus$projectsArgs>
    ): PrismaPromise<Array<ProjectGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ProjectStatus base type for findUnique actions
   */
  export type ProjectStatusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * Filter, which ProjectStatus to fetch.
     *
     **/
    where: ProjectStatusWhereUniqueInput;
  };

  /**
   * ProjectStatus findUnique
   */
  export interface ProjectStatusFindUniqueArgs
    extends ProjectStatusFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * ProjectStatus findUniqueOrThrow
   */
  export type ProjectStatusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * Filter, which ProjectStatus to fetch.
     *
     **/
    where: ProjectStatusWhereUniqueInput;
  };

  /**
   * ProjectStatus base type for findFirst actions
   */
  export type ProjectStatusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * Filter, which ProjectStatus to fetch.
     *
     **/
    where?: ProjectStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ProjectStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for ProjectStatuses.
     *
     **/
    cursor?: ProjectStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ProjectStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ProjectStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of ProjectStatuses.
     *
     **/
    distinct?: Enumerable<ProjectStatusScalarFieldEnum>;
  };

  /**
   * ProjectStatus findFirst
   */
  export interface ProjectStatusFindFirstArgs
    extends ProjectStatusFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * ProjectStatus findFirstOrThrow
   */
  export type ProjectStatusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * Filter, which ProjectStatus to fetch.
     *
     **/
    where?: ProjectStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ProjectStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for ProjectStatuses.
     *
     **/
    cursor?: ProjectStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ProjectStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ProjectStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of ProjectStatuses.
     *
     **/
    distinct?: Enumerable<ProjectStatusScalarFieldEnum>;
  };

  /**
   * ProjectStatus findMany
   */
  export type ProjectStatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * Filter, which ProjectStatuses to fetch.
     *
     **/
    where?: ProjectStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of ProjectStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<ProjectStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing ProjectStatuses.
     *
     **/
    cursor?: ProjectStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` ProjectStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` ProjectStatuses.
     *
     **/
    skip?: number;
    distinct?: Enumerable<ProjectStatusScalarFieldEnum>;
  };

  /**
   * ProjectStatus create
   */
  export type ProjectStatusCreateArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * The data needed to create a ProjectStatus.
     *
     **/
    data: XOR<ProjectStatusCreateInput, ProjectStatusUncheckedCreateInput>;
  };

  /**
   * ProjectStatus createMany
   */
  export type ProjectStatusCreateManyArgs = {
    /**
     * The data used to create many ProjectStatuses.
     *
     **/
    data: Enumerable<ProjectStatusCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * ProjectStatus update
   */
  export type ProjectStatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * The data needed to update a ProjectStatus.
     *
     **/
    data: XOR<ProjectStatusUpdateInput, ProjectStatusUncheckedUpdateInput>;
    /**
     * Choose, which ProjectStatus to update.
     *
     **/
    where: ProjectStatusWhereUniqueInput;
  };

  /**
   * ProjectStatus updateMany
   */
  export type ProjectStatusUpdateManyArgs = {
    /**
     * The data used to update ProjectStatuses.
     *
     **/
    data: XOR<
      ProjectStatusUpdateManyMutationInput,
      ProjectStatusUncheckedUpdateManyInput
    >;
    /**
     * Filter which ProjectStatuses to update
     *
     **/
    where?: ProjectStatusWhereInput;
  };

  /**
   * ProjectStatus upsert
   */
  export type ProjectStatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * The filter to search for the ProjectStatus to update in case it exists.
     *
     **/
    where: ProjectStatusWhereUniqueInput;
    /**
     * In case the ProjectStatus found by the `where` argument doesn't exist, create a new ProjectStatus with this data.
     *
     **/
    create: XOR<ProjectStatusCreateInput, ProjectStatusUncheckedCreateInput>;
    /**
     * In case the ProjectStatus was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<ProjectStatusUpdateInput, ProjectStatusUncheckedUpdateInput>;
  };

  /**
   * ProjectStatus delete
   */
  export type ProjectStatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
    /**
     * Filter which ProjectStatus to delete.
     *
     **/
    where: ProjectStatusWhereUniqueInput;
  };

  /**
   * ProjectStatus deleteMany
   */
  export type ProjectStatusDeleteManyArgs = {
    /**
     * Filter which ProjectStatuses to delete
     *
     **/
    where?: ProjectStatusWhereInput;
  };

  /**
   * ProjectStatus.projects
   */
  export type ProjectStatus$projectsArgs = {
    /**
     * Select specific fields to fetch from the Project
     *
     **/
    select?: ProjectSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectInclude | null;
    where?: ProjectWhereInput;
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>;
    cursor?: ProjectWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ProjectScalarFieldEnum>;
  };

  /**
   * ProjectStatus without action
   */
  export type ProjectStatusArgs = {
    /**
     * Select specific fields to fetch from the ProjectStatus
     *
     **/
    select?: ProjectStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProjectStatusInclude | null;
  };

  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null;
    _avg: TaskAvgAggregateOutputType | null;
    _sum: TaskSumAggregateOutputType | null;
    _min: TaskMinAggregateOutputType | null;
    _max: TaskMaxAggregateOutputType | null;
  };

  export type TaskAvgAggregateOutputType = {
    id: number | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    contactId: number | null;
  };

  export type TaskSumAggregateOutputType = {
    id: number | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    contactId: number | null;
  };

  export type TaskMinAggregateOutputType = {
    id: number | null;
    title: string | null;
    dateStarted: Date | null;
    dateEnded: Date | null;
    content: string | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    contactId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type TaskMaxAggregateOutputType = {
    id: number | null;
    title: string | null;
    dateStarted: Date | null;
    dateEnded: Date | null;
    content: string | null;
    statusId: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    contactId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type TaskCountAggregateOutputType = {
    id: number;
    title: number;
    dateStarted: number;
    dateEnded: number;
    content: number;
    statusId: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    contactId: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type TaskAvgAggregateInputType = {
    id?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    contactId?: true;
  };

  export type TaskSumAggregateInputType = {
    id?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    contactId?: true;
  };

  export type TaskMinAggregateInputType = {
    id?: true;
    title?: true;
    dateStarted?: true;
    dateEnded?: true;
    content?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    contactId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type TaskMaxAggregateInputType = {
    id?: true;
    title?: true;
    dateStarted?: true;
    dateEnded?: true;
    content?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    contactId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type TaskCountAggregateInputType = {
    id?: true;
    title?: true;
    dateStarted?: true;
    dateEnded?: true;
    content?: true;
    statusId?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    contactId?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type TaskAggregateArgs = {
    /**
     * Filter which Task to aggregate.
     *
     **/
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     *
     **/
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Tasks
     **/
    _count?: true | TaskCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: TaskAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: TaskSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TaskMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TaskMaxAggregateInputType;
  };

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
    [P in keyof T & keyof AggregateTask]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>;
  };

  export type TaskGroupByArgs = {
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithAggregationInput>;
    by: Array<TaskScalarFieldEnum>;
    having?: TaskScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TaskCountAggregateInputType | true;
    _avg?: TaskAvgAggregateInputType;
    _sum?: TaskSumAggregateInputType;
    _min?: TaskMinAggregateInputType;
    _max?: TaskMaxAggregateInputType;
  };

  export type TaskGroupByOutputType = {
    id: number;
    title: string;
    dateStarted: Date;
    dateEnded: Date | null;
    content: string;
    statusId: number;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number;
    contactId: number | null;
    createdAt: Date;
    updatedAt: Date;
    _count: TaskCountAggregateOutputType | null;
    _avg: TaskAvgAggregateOutputType | null;
    _sum: TaskSumAggregateOutputType | null;
    _min: TaskMinAggregateOutputType | null;
    _max: TaskMaxAggregateOutputType | null;
  };

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TaskGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof TaskGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
          : GetScalarType<T[P], TaskGroupByOutputType[P]>;
      }
    >
  >;

  export type TaskSelect = {
    id?: boolean;
    title?: boolean;
    dateStarted?: boolean;
    dateEnded?: boolean;
    content?: boolean;
    status?: boolean | TaskStatusArgs;
    statusId?: boolean;
    distributorId?: boolean;
    distributor?: boolean | DistributorArgs;
    clientId?: boolean;
    client?: boolean | ClientArgs;
    projectId?: boolean;
    project?: boolean | ProjectArgs;
    userId?: boolean;
    user?: boolean | UserArgs;
    contactId?: boolean;
    contact?: boolean | ContactArgs;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type TaskInclude = {
    status?: boolean | TaskStatusArgs;
    distributor?: boolean | DistributorArgs;
    client?: boolean | ClientArgs;
    project?: boolean | ProjectArgs;
    user?: boolean | UserArgs;
    contact?: boolean | ContactArgs;
  };

  export type TaskGetPayload<S extends boolean | null | undefined | TaskArgs> =
    S extends { select: any; include: any }
      ? "Please either choose `select` or `include`"
      : S extends true
      ? Task
      : S extends undefined
      ? never
      : S extends { include: any } & (TaskArgs | TaskFindManyArgs)
      ? Task & {
          [P in TruthyKeys<S["include"]>]: P extends "status"
            ? TaskStatusGetPayload<S["include"][P]>
            : P extends "distributor"
            ? DistributorGetPayload<S["include"][P]> | null
            : P extends "client"
            ? ClientGetPayload<S["include"][P]> | null
            : P extends "project"
            ? ProjectGetPayload<S["include"][P]> | null
            : P extends "user"
            ? UserGetPayload<S["include"][P]>
            : P extends "contact"
            ? ContactGetPayload<S["include"][P]> | null
            : never;
        }
      : S extends { select: any } & (TaskArgs | TaskFindManyArgs)
      ? {
          [P in TruthyKeys<S["select"]>]: P extends "status"
            ? TaskStatusGetPayload<S["select"][P]>
            : P extends "distributor"
            ? DistributorGetPayload<S["select"][P]> | null
            : P extends "client"
            ? ClientGetPayload<S["select"][P]> | null
            : P extends "project"
            ? ProjectGetPayload<S["select"][P]> | null
            : P extends "user"
            ? UserGetPayload<S["select"][P]>
            : P extends "contact"
            ? ContactGetPayload<S["select"][P]> | null
            : P extends keyof Task
            ? Task[P]
            : never;
        }
      : Task;

  type TaskCountArgs = Merge<
    Omit<TaskFindManyArgs, "select" | "include"> & {
      select?: TaskCountAggregateInputType | true;
    }
  >;

  export interface TaskDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends TaskFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, TaskFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Task"
    > extends True
      ? Prisma__TaskClient<TaskGetPayload<T>>
      : Prisma__TaskClient<TaskGetPayload<T> | null, null>;

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TaskFindUniqueOrThrowArgs>
    ): Prisma__TaskClient<TaskGetPayload<T>>;

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends TaskFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, TaskFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Task"
    > extends True
      ? Prisma__TaskClient<TaskGetPayload<T>>
      : Prisma__TaskClient<TaskGetPayload<T> | null, null>;

    /**
     * Find the first Task that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs>
    ): Prisma__TaskClient<TaskGetPayload<T>>;

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     *
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends TaskFindManyArgs>(
      args?: SelectSubset<T, TaskFindManyArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>>>;

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     *
     **/
    create<T extends TaskCreateArgs>(
      args: SelectSubset<T, TaskCreateArgs>
    ): Prisma__TaskClient<TaskGetPayload<T>>;

    /**
     * Create many Tasks.
     *     @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends TaskCreateManyArgs>(
      args?: SelectSubset<T, TaskCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     *
     **/
    delete<T extends TaskDeleteArgs>(
      args: SelectSubset<T, TaskDeleteArgs>
    ): Prisma__TaskClient<TaskGetPayload<T>>;

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends TaskUpdateArgs>(
      args: SelectSubset<T, TaskUpdateArgs>
    ): Prisma__TaskClient<TaskGetPayload<T>>;

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends TaskDeleteManyArgs>(
      args?: SelectSubset<T, TaskDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends TaskUpdateManyArgs>(
      args: SelectSubset<T, TaskUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     **/
    upsert<T extends TaskUpsertArgs>(
      args: SelectSubset<T, TaskUpsertArgs>
    ): Prisma__TaskClient<TaskGetPayload<T>>;

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
     **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], TaskCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TaskAggregateArgs>(
      args: Subset<T, TaskAggregateArgs>
    ): PrismaPromise<GetTaskAggregateType<T>>;

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs["orderBy"] }
        : { orderBy?: TaskGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetTaskGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    status<T extends TaskStatusArgs = {}>(
      args?: Subset<T, TaskStatusArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T> | Null>;

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    client<T extends ClientArgs = {}>(
      args?: Subset<T, ClientArgs>
    ): Prisma__ClientClient<ClientGetPayload<T> | Null>;

    project<T extends ProjectArgs = {}>(
      args?: Subset<T, ProjectArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    user<T extends UserArgs = {}>(
      args?: Subset<T, UserArgs>
    ): Prisma__UserClient<UserGetPayload<T> | Null>;

    contact<T extends ContactArgs = {}>(
      args?: Subset<T, ContactArgs>
    ): Prisma__ContactClient<ContactGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Task base type for findUnique actions
   */
  export type TaskFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * Filter, which Task to fetch.
     *
     **/
    where: TaskWhereUniqueInput;
  };

  /**
   * Task findUnique
   */
  export interface TaskFindUniqueArgs extends TaskFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * Filter, which Task to fetch.
     *
     **/
    where: TaskWhereUniqueInput;
  };

  /**
   * Task base type for findFirst actions
   */
  export type TaskFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * Filter, which Task to fetch.
     *
     **/
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     *
     **/
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tasks.
     *
     **/
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tasks.
     *
     **/
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Task findFirst
   */
  export interface TaskFindFirstArgs extends TaskFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * Filter, which Task to fetch.
     *
     **/
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     *
     **/
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tasks.
     *
     **/
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tasks.
     *
     **/
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Task findMany
   */
  export type TaskFindManyArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * Filter, which Tasks to fetch.
     *
     **/
    where?: TaskWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tasks to fetch.
     *
     **/
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Tasks.
     *
     **/
    cursor?: TaskWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tasks from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tasks.
     *
     **/
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * Task create
   */
  export type TaskCreateArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * The data needed to create a Task.
     *
     **/
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>;
  };

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs = {
    /**
     * The data used to create many Tasks.
     *
     **/
    data: Enumerable<TaskCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Task update
   */
  export type TaskUpdateArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * The data needed to update a Task.
     *
     **/
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>;
    /**
     * Choose, which Task to update.
     *
     **/
    where: TaskWhereUniqueInput;
  };

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs = {
    /**
     * The data used to update Tasks.
     *
     **/
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>;
    /**
     * Filter which Tasks to update
     *
     **/
    where?: TaskWhereInput;
  };

  /**
   * Task upsert
   */
  export type TaskUpsertArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * The filter to search for the Task to update in case it exists.
     *
     **/
    where: TaskWhereUniqueInput;
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     *
     **/
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>;
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>;
  };

  /**
   * Task delete
   */
  export type TaskDeleteArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    /**
     * Filter which Task to delete.
     *
     **/
    where: TaskWhereUniqueInput;
  };

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs = {
    /**
     * Filter which Tasks to delete
     *
     **/
    where?: TaskWhereInput;
  };

  /**
   * Task without action
   */
  export type TaskArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
  };

  /**
   * Model TaskStatus
   */

  export type AggregateTaskStatus = {
    _count: TaskStatusCountAggregateOutputType | null;
    _avg: TaskStatusAvgAggregateOutputType | null;
    _sum: TaskStatusSumAggregateOutputType | null;
    _min: TaskStatusMinAggregateOutputType | null;
    _max: TaskStatusMaxAggregateOutputType | null;
  };

  export type TaskStatusAvgAggregateOutputType = {
    id: number | null;
  };

  export type TaskStatusSumAggregateOutputType = {
    id: number | null;
  };

  export type TaskStatusMinAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type TaskStatusMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type TaskStatusCountAggregateOutputType = {
    id: number;
    name: number;
    _all: number;
  };

  export type TaskStatusAvgAggregateInputType = {
    id?: true;
  };

  export type TaskStatusSumAggregateInputType = {
    id?: true;
  };

  export type TaskStatusMinAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type TaskStatusMaxAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type TaskStatusCountAggregateInputType = {
    id?: true;
    name?: true;
    _all?: true;
  };

  export type TaskStatusAggregateArgs = {
    /**
     * Filter which TaskStatus to aggregate.
     *
     **/
    where?: TaskStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<TaskStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: TaskStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned TaskStatuses
     **/
    _count?: true | TaskStatusCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: TaskStatusAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: TaskStatusSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TaskStatusMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TaskStatusMaxAggregateInputType;
  };

  export type GetTaskStatusAggregateType<T extends TaskStatusAggregateArgs> = {
    [P in keyof T & keyof AggregateTaskStatus]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaskStatus[P]>
      : GetScalarType<T[P], AggregateTaskStatus[P]>;
  };

  export type TaskStatusGroupByArgs = {
    where?: TaskStatusWhereInput;
    orderBy?: Enumerable<TaskStatusOrderByWithAggregationInput>;
    by: Array<TaskStatusScalarFieldEnum>;
    having?: TaskStatusScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TaskStatusCountAggregateInputType | true;
    _avg?: TaskStatusAvgAggregateInputType;
    _sum?: TaskStatusSumAggregateInputType;
    _min?: TaskStatusMinAggregateInputType;
    _max?: TaskStatusMaxAggregateInputType;
  };

  export type TaskStatusGroupByOutputType = {
    id: number;
    name: string;
    _count: TaskStatusCountAggregateOutputType | null;
    _avg: TaskStatusAvgAggregateOutputType | null;
    _sum: TaskStatusSumAggregateOutputType | null;
    _min: TaskStatusMinAggregateOutputType | null;
    _max: TaskStatusMaxAggregateOutputType | null;
  };

  type GetTaskStatusGroupByPayload<T extends TaskStatusGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<TaskStatusGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof TaskStatusGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskStatusGroupByOutputType[P]>
            : GetScalarType<T[P], TaskStatusGroupByOutputType[P]>;
        }
      >
    >;

  export type TaskStatusSelect = {
    id?: boolean;
    name?: boolean;
    tasks?: boolean | TaskStatus$tasksArgs;
    _count?: boolean | TaskStatusCountOutputTypeArgs;
  };

  export type TaskStatusInclude = {
    tasks?: boolean | TaskStatus$tasksArgs;
    _count?: boolean | TaskStatusCountOutputTypeArgs;
  };

  export type TaskStatusGetPayload<
    S extends boolean | null | undefined | TaskStatusArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? TaskStatus
    : S extends undefined
    ? never
    : S extends { include: any } & (TaskStatusArgs | TaskStatusFindManyArgs)
    ? TaskStatus & {
        [P in TruthyKeys<S["include"]>]: P extends "tasks"
          ? Array<TaskGetPayload<S["include"][P]>>
          : P extends "_count"
          ? TaskStatusCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (TaskStatusArgs | TaskStatusFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "tasks"
          ? Array<TaskGetPayload<S["select"][P]>>
          : P extends "_count"
          ? TaskStatusCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof TaskStatus
          ? TaskStatus[P]
          : never;
      }
    : TaskStatus;

  type TaskStatusCountArgs = Merge<
    Omit<TaskStatusFindManyArgs, "select" | "include"> & {
      select?: TaskStatusCountAggregateInputType | true;
    }
  >;

  export interface TaskStatusDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one TaskStatus that matches the filter.
     * @param {TaskStatusFindUniqueArgs} args - Arguments to find a TaskStatus
     * @example
     * // Get one TaskStatus
     * const taskStatus = await prisma.taskStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends TaskStatusFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, TaskStatusFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "TaskStatus"
    > extends True
      ? Prisma__TaskStatusClient<TaskStatusGetPayload<T>>
      : Prisma__TaskStatusClient<TaskStatusGetPayload<T> | null, null>;

    /**
     * Find one TaskStatus that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {TaskStatusFindUniqueOrThrowArgs} args - Arguments to find a TaskStatus
     * @example
     * // Get one TaskStatus
     * const taskStatus = await prisma.taskStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends TaskStatusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TaskStatusFindUniqueOrThrowArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T>>;

    /**
     * Find the first TaskStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusFindFirstArgs} args - Arguments to find a TaskStatus
     * @example
     * // Get one TaskStatus
     * const taskStatus = await prisma.taskStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends TaskStatusFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, TaskStatusFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "TaskStatus"
    > extends True
      ? Prisma__TaskStatusClient<TaskStatusGetPayload<T>>
      : Prisma__TaskStatusClient<TaskStatusGetPayload<T> | null, null>;

    /**
     * Find the first TaskStatus that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusFindFirstOrThrowArgs} args - Arguments to find a TaskStatus
     * @example
     * // Get one TaskStatus
     * const taskStatus = await prisma.taskStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends TaskStatusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TaskStatusFindFirstOrThrowArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T>>;

    /**
     * Find zero or more TaskStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TaskStatuses
     * const taskStatuses = await prisma.taskStatus.findMany()
     *
     * // Get first 10 TaskStatuses
     * const taskStatuses = await prisma.taskStatus.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const taskStatusWithIdOnly = await prisma.taskStatus.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends TaskStatusFindManyArgs>(
      args?: SelectSubset<T, TaskStatusFindManyArgs>
    ): PrismaPromise<Array<TaskStatusGetPayload<T>>>;

    /**
     * Create a TaskStatus.
     * @param {TaskStatusCreateArgs} args - Arguments to create a TaskStatus.
     * @example
     * // Create one TaskStatus
     * const TaskStatus = await prisma.taskStatus.create({
     *   data: {
     *     // ... data to create a TaskStatus
     *   }
     * })
     *
     **/
    create<T extends TaskStatusCreateArgs>(
      args: SelectSubset<T, TaskStatusCreateArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T>>;

    /**
     * Create many TaskStatuses.
     *     @param {TaskStatusCreateManyArgs} args - Arguments to create many TaskStatuses.
     *     @example
     *     // Create many TaskStatuses
     *     const taskStatus = await prisma.taskStatus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends TaskStatusCreateManyArgs>(
      args?: SelectSubset<T, TaskStatusCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a TaskStatus.
     * @param {TaskStatusDeleteArgs} args - Arguments to delete one TaskStatus.
     * @example
     * // Delete one TaskStatus
     * const TaskStatus = await prisma.taskStatus.delete({
     *   where: {
     *     // ... filter to delete one TaskStatus
     *   }
     * })
     *
     **/
    delete<T extends TaskStatusDeleteArgs>(
      args: SelectSubset<T, TaskStatusDeleteArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T>>;

    /**
     * Update one TaskStatus.
     * @param {TaskStatusUpdateArgs} args - Arguments to update one TaskStatus.
     * @example
     * // Update one TaskStatus
     * const taskStatus = await prisma.taskStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends TaskStatusUpdateArgs>(
      args: SelectSubset<T, TaskStatusUpdateArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T>>;

    /**
     * Delete zero or more TaskStatuses.
     * @param {TaskStatusDeleteManyArgs} args - Arguments to filter TaskStatuses to delete.
     * @example
     * // Delete a few TaskStatuses
     * const { count } = await prisma.taskStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends TaskStatusDeleteManyArgs>(
      args?: SelectSubset<T, TaskStatusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more TaskStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TaskStatuses
     * const taskStatus = await prisma.taskStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends TaskStatusUpdateManyArgs>(
      args: SelectSubset<T, TaskStatusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one TaskStatus.
     * @param {TaskStatusUpsertArgs} args - Arguments to update or create a TaskStatus.
     * @example
     * // Update or create a TaskStatus
     * const taskStatus = await prisma.taskStatus.upsert({
     *   create: {
     *     // ... data to create a TaskStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TaskStatus we want to update
     *   }
     * })
     **/
    upsert<T extends TaskStatusUpsertArgs>(
      args: SelectSubset<T, TaskStatusUpsertArgs>
    ): Prisma__TaskStatusClient<TaskStatusGetPayload<T>>;

    /**
     * Count the number of TaskStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusCountArgs} args - Arguments to filter TaskStatuses to count.
     * @example
     * // Count the number of TaskStatuses
     * const count = await prisma.taskStatus.count({
     *   where: {
     *     // ... the filter for the TaskStatuses we want to count
     *   }
     * })
     **/
    count<T extends TaskStatusCountArgs>(
      args?: Subset<T, TaskStatusCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], TaskStatusCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a TaskStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TaskStatusAggregateArgs>(
      args: Subset<T, TaskStatusAggregateArgs>
    ): PrismaPromise<GetTaskStatusAggregateType<T>>;

    /**
     * Group by TaskStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TaskStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskStatusGroupByArgs["orderBy"] }
        : { orderBy?: TaskStatusGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, TaskStatusGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetTaskStatusGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TaskStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskStatusClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    tasks<T extends TaskStatus$tasksArgs = {}>(
      args?: Subset<T, TaskStatus$tasksArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TaskStatus base type for findUnique actions
   */
  export type TaskStatusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * Filter, which TaskStatus to fetch.
     *
     **/
    where: TaskStatusWhereUniqueInput;
  };

  /**
   * TaskStatus findUnique
   */
  export interface TaskStatusFindUniqueArgs
    extends TaskStatusFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * TaskStatus findUniqueOrThrow
   */
  export type TaskStatusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * Filter, which TaskStatus to fetch.
     *
     **/
    where: TaskStatusWhereUniqueInput;
  };

  /**
   * TaskStatus base type for findFirst actions
   */
  export type TaskStatusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * Filter, which TaskStatus to fetch.
     *
     **/
    where?: TaskStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<TaskStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TaskStatuses.
     *
     **/
    cursor?: TaskStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TaskStatuses.
     *
     **/
    distinct?: Enumerable<TaskStatusScalarFieldEnum>;
  };

  /**
   * TaskStatus findFirst
   */
  export interface TaskStatusFindFirstArgs extends TaskStatusFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * TaskStatus findFirstOrThrow
   */
  export type TaskStatusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * Filter, which TaskStatus to fetch.
     *
     **/
    where?: TaskStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<TaskStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for TaskStatuses.
     *
     **/
    cursor?: TaskStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of TaskStatuses.
     *
     **/
    distinct?: Enumerable<TaskStatusScalarFieldEnum>;
  };

  /**
   * TaskStatus findMany
   */
  export type TaskStatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * Filter, which TaskStatuses to fetch.
     *
     **/
    where?: TaskStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of TaskStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<TaskStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing TaskStatuses.
     *
     **/
    cursor?: TaskStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` TaskStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` TaskStatuses.
     *
     **/
    skip?: number;
    distinct?: Enumerable<TaskStatusScalarFieldEnum>;
  };

  /**
   * TaskStatus create
   */
  export type TaskStatusCreateArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * The data needed to create a TaskStatus.
     *
     **/
    data: XOR<TaskStatusCreateInput, TaskStatusUncheckedCreateInput>;
  };

  /**
   * TaskStatus createMany
   */
  export type TaskStatusCreateManyArgs = {
    /**
     * The data used to create many TaskStatuses.
     *
     **/
    data: Enumerable<TaskStatusCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * TaskStatus update
   */
  export type TaskStatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * The data needed to update a TaskStatus.
     *
     **/
    data: XOR<TaskStatusUpdateInput, TaskStatusUncheckedUpdateInput>;
    /**
     * Choose, which TaskStatus to update.
     *
     **/
    where: TaskStatusWhereUniqueInput;
  };

  /**
   * TaskStatus updateMany
   */
  export type TaskStatusUpdateManyArgs = {
    /**
     * The data used to update TaskStatuses.
     *
     **/
    data: XOR<
      TaskStatusUpdateManyMutationInput,
      TaskStatusUncheckedUpdateManyInput
    >;
    /**
     * Filter which TaskStatuses to update
     *
     **/
    where?: TaskStatusWhereInput;
  };

  /**
   * TaskStatus upsert
   */
  export type TaskStatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * The filter to search for the TaskStatus to update in case it exists.
     *
     **/
    where: TaskStatusWhereUniqueInput;
    /**
     * In case the TaskStatus found by the `where` argument doesn't exist, create a new TaskStatus with this data.
     *
     **/
    create: XOR<TaskStatusCreateInput, TaskStatusUncheckedCreateInput>;
    /**
     * In case the TaskStatus was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<TaskStatusUpdateInput, TaskStatusUncheckedUpdateInput>;
  };

  /**
   * TaskStatus delete
   */
  export type TaskStatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
    /**
     * Filter which TaskStatus to delete.
     *
     **/
    where: TaskStatusWhereUniqueInput;
  };

  /**
   * TaskStatus deleteMany
   */
  export type TaskStatusDeleteManyArgs = {
    /**
     * Filter which TaskStatuses to delete
     *
     **/
    where?: TaskStatusWhereInput;
  };

  /**
   * TaskStatus.tasks
   */
  export type TaskStatus$tasksArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * TaskStatus without action
   */
  export type TaskStatusArgs = {
    /**
     * Select specific fields to fetch from the TaskStatus
     *
     **/
    select?: TaskStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskStatusInclude | null;
  };

  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null;
    _avg: CategoryAvgAggregateOutputType | null;
    _sum: CategorySumAggregateOutputType | null;
    _min: CategoryMinAggregateOutputType | null;
    _max: CategoryMaxAggregateOutputType | null;
  };

  export type CategoryAvgAggregateOutputType = {
    id: number | null;
  };

  export type CategorySumAggregateOutputType = {
    id: number | null;
  };

  export type CategoryMinAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type CategoryMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type CategoryCountAggregateOutputType = {
    id: number;
    name: number;
    _all: number;
  };

  export type CategoryAvgAggregateInputType = {
    id?: true;
  };

  export type CategorySumAggregateInputType = {
    id?: true;
  };

  export type CategoryMinAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type CategoryMaxAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type CategoryCountAggregateInputType = {
    id?: true;
    name?: true;
    _all?: true;
  };

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     *
     **/
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     *
     **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Categories
     **/
    _count?: true | CategoryCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: CategoryAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: CategorySumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: CategoryMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: CategoryMaxAggregateInputType;
  };

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
    [P in keyof T & keyof AggregateCategory]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>;
  };

  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput;
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>;
    by: Array<CategoryScalarFieldEnum>;
    having?: CategoryScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: CategoryCountAggregateInputType | true;
    _avg?: CategoryAvgAggregateInputType;
    _sum?: CategorySumAggregateInputType;
    _min?: CategoryMinAggregateInputType;
    _max?: CategoryMaxAggregateInputType;
  };

  export type CategoryGroupByOutputType = {
    id: number;
    name: string;
    _count: CategoryCountAggregateOutputType | null;
    _avg: CategoryAvgAggregateOutputType | null;
    _sum: CategorySumAggregateOutputType | null;
    _min: CategoryMinAggregateOutputType | null;
    _max: CategoryMaxAggregateOutputType | null;
  };

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof CategoryGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
          : GetScalarType<T[P], CategoryGroupByOutputType[P]>;
      }
    >
  >;

  export type CategorySelect = {
    id?: boolean;
    name?: boolean;
    subcategories?: boolean | Category$subcategoriesArgs;
    products?: boolean | Category$productsArgs;
    _count?: boolean | CategoryCountOutputTypeArgs;
  };

  export type CategoryInclude = {
    subcategories?: boolean | Category$subcategoriesArgs;
    products?: boolean | Category$productsArgs;
    _count?: boolean | CategoryCountOutputTypeArgs;
  };

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Category
    : S extends undefined
    ? never
    : S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category & {
        [P in TruthyKeys<S["include"]>]: P extends "subcategories"
          ? Array<SubcategoryGetPayload<S["include"][P]>>
          : P extends "products"
          ? Array<ProductGetPayload<S["include"][P]>>
          : P extends "_count"
          ? CategoryCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "subcategories"
          ? Array<SubcategoryGetPayload<S["select"][P]>>
          : P extends "products"
          ? Array<ProductGetPayload<S["select"][P]>>
          : P extends "_count"
          ? CategoryCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Category
          ? Category[P]
          : never;
      }
    : Category;

  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, "select" | "include"> & {
      select?: CategoryCountAggregateInputType | true;
    }
  >;

  export interface CategoryDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends CategoryFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Category"
    > extends True
      ? Prisma__CategoryClient<CategoryGetPayload<T>>
      : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>;

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>;

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends CategoryFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Category"
    > extends True
      ? Prisma__CategoryClient<CategoryGetPayload<T>>
      : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>;

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>;

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     *
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): PrismaPromise<Array<CategoryGetPayload<T>>>;

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     *
     **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>;

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     *
     **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>;

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>;

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>;

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
     **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], CategoryCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends CategoryAggregateArgs>(
      args: Subset<T, CategoryAggregateArgs>
    ): PrismaPromise<GetCategoryAggregateType<T>>;

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs["orderBy"] }
        : { orderBy?: CategoryGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetCategoryGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    subcategories<T extends Category$subcategoriesArgs = {}>(
      args?: Subset<T, Category$subcategoriesArgs>
    ): PrismaPromise<Array<SubcategoryGetPayload<T>> | Null>;

    products<T extends Category$productsArgs = {}>(
      args?: Subset<T, Category$productsArgs>
    ): PrismaPromise<Array<ProductGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * Filter, which Category to fetch.
     *
     **/
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * Filter, which Category to fetch.
     *
     **/
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * Filter, which Category to fetch.
     *
     **/
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     *
     **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Categories.
     *
     **/
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Categories.
     *
     **/
    distinct?: Enumerable<CategoryScalarFieldEnum>;
  };

  /**
   * Category findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * Filter, which Category to fetch.
     *
     **/
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     *
     **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Categories.
     *
     **/
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Categories.
     *
     **/
    distinct?: Enumerable<CategoryScalarFieldEnum>;
  };

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * Filter, which Categories to fetch.
     *
     **/
    where?: CategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Categories to fetch.
     *
     **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Categories.
     *
     **/
    cursor?: CategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Categories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Categories.
     *
     **/
    skip?: number;
    distinct?: Enumerable<CategoryScalarFieldEnum>;
  };

  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * The data needed to create a Category.
     *
     **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>;
  };

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     *
     **/
    data: Enumerable<CategoryCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * The data needed to update a Category.
     *
     **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>;
    /**
     * Choose, which Category to update.
     *
     **/
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     *
     **/
    data: XOR<
      CategoryUpdateManyMutationInput,
      CategoryUncheckedUpdateManyInput
    >;
    /**
     * Filter which Categories to update
     *
     **/
    where?: CategoryWhereInput;
  };

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * The filter to search for the Category to update in case it exists.
     *
     **/
    where: CategoryWhereUniqueInput;
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     *
     **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>;
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>;
  };

  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
    /**
     * Filter which Category to delete.
     *
     **/
    where: CategoryWhereUniqueInput;
  };

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     *
     **/
    where?: CategoryWhereInput;
  };

  /**
   * Category.subcategories
   */
  export type Category$subcategoriesArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    where?: SubcategoryWhereInput;
    orderBy?: Enumerable<SubcategoryOrderByWithRelationInput>;
    cursor?: SubcategoryWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SubcategoryScalarFieldEnum>;
  };

  /**
   * Category.products
   */
  export type Category$productsArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    where?: ProductWhereInput;
    orderBy?: Enumerable<ProductOrderByWithRelationInput>;
    cursor?: ProductWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ProductScalarFieldEnum>;
  };

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     *
     **/
    select?: CategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CategoryInclude | null;
  };

  /**
   * Model Subcategory
   */

  export type AggregateSubcategory = {
    _count: SubcategoryCountAggregateOutputType | null;
    _avg: SubcategoryAvgAggregateOutputType | null;
    _sum: SubcategorySumAggregateOutputType | null;
    _min: SubcategoryMinAggregateOutputType | null;
    _max: SubcategoryMaxAggregateOutputType | null;
  };

  export type SubcategoryAvgAggregateOutputType = {
    id: number | null;
    categoryId: number | null;
  };

  export type SubcategorySumAggregateOutputType = {
    id: number | null;
    categoryId: number | null;
  };

  export type SubcategoryMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    categoryId: number | null;
  };

  export type SubcategoryMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    categoryId: number | null;
  };

  export type SubcategoryCountAggregateOutputType = {
    id: number;
    name: number;
    categoryId: number;
    _all: number;
  };

  export type SubcategoryAvgAggregateInputType = {
    id?: true;
    categoryId?: true;
  };

  export type SubcategorySumAggregateInputType = {
    id?: true;
    categoryId?: true;
  };

  export type SubcategoryMinAggregateInputType = {
    id?: true;
    name?: true;
    categoryId?: true;
  };

  export type SubcategoryMaxAggregateInputType = {
    id?: true;
    name?: true;
    categoryId?: true;
  };

  export type SubcategoryCountAggregateInputType = {
    id?: true;
    name?: true;
    categoryId?: true;
    _all?: true;
  };

  export type SubcategoryAggregateArgs = {
    /**
     * Filter which Subcategory to aggregate.
     *
     **/
    where?: SubcategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Subcategories to fetch.
     *
     **/
    orderBy?: Enumerable<SubcategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: SubcategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Subcategories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Subcategories.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Subcategories
     **/
    _count?: true | SubcategoryCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: SubcategoryAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: SubcategorySumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: SubcategoryMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: SubcategoryMaxAggregateInputType;
  };

  export type GetSubcategoryAggregateType<T extends SubcategoryAggregateArgs> =
    {
      [P in keyof T & keyof AggregateSubcategory]: P extends "_count" | "count"
        ? T[P] extends true
          ? number
          : GetScalarType<T[P], AggregateSubcategory[P]>
        : GetScalarType<T[P], AggregateSubcategory[P]>;
    };

  export type SubcategoryGroupByArgs = {
    where?: SubcategoryWhereInput;
    orderBy?: Enumerable<SubcategoryOrderByWithAggregationInput>;
    by: Array<SubcategoryScalarFieldEnum>;
    having?: SubcategoryScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: SubcategoryCountAggregateInputType | true;
    _avg?: SubcategoryAvgAggregateInputType;
    _sum?: SubcategorySumAggregateInputType;
    _min?: SubcategoryMinAggregateInputType;
    _max?: SubcategoryMaxAggregateInputType;
  };

  export type SubcategoryGroupByOutputType = {
    id: number;
    name: string;
    categoryId: number;
    _count: SubcategoryCountAggregateOutputType | null;
    _avg: SubcategoryAvgAggregateOutputType | null;
    _sum: SubcategorySumAggregateOutputType | null;
    _min: SubcategoryMinAggregateOutputType | null;
    _max: SubcategoryMaxAggregateOutputType | null;
  };

  type GetSubcategoryGroupByPayload<T extends SubcategoryGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<SubcategoryGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof SubcategoryGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubcategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SubcategoryGroupByOutputType[P]>;
        }
      >
    >;

  export type SubcategorySelect = {
    id?: boolean;
    name?: boolean;
    categoryId?: boolean;
    category?: boolean | CategoryArgs;
    products?: boolean | Subcategory$productsArgs;
    _count?: boolean | SubcategoryCountOutputTypeArgs;
  };

  export type SubcategoryInclude = {
    category?: boolean | CategoryArgs;
    products?: boolean | Subcategory$productsArgs;
    _count?: boolean | SubcategoryCountOutputTypeArgs;
  };

  export type SubcategoryGetPayload<
    S extends boolean | null | undefined | SubcategoryArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Subcategory
    : S extends undefined
    ? never
    : S extends { include: any } & (SubcategoryArgs | SubcategoryFindManyArgs)
    ? Subcategory & {
        [P in TruthyKeys<S["include"]>]: P extends "category"
          ? CategoryGetPayload<S["include"][P]>
          : P extends "products"
          ? Array<ProductGetPayload<S["include"][P]>>
          : P extends "_count"
          ? SubcategoryCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (SubcategoryArgs | SubcategoryFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "category"
          ? CategoryGetPayload<S["select"][P]>
          : P extends "products"
          ? Array<ProductGetPayload<S["select"][P]>>
          : P extends "_count"
          ? SubcategoryCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Subcategory
          ? Subcategory[P]
          : never;
      }
    : Subcategory;

  type SubcategoryCountArgs = Merge<
    Omit<SubcategoryFindManyArgs, "select" | "include"> & {
      select?: SubcategoryCountAggregateInputType | true;
    }
  >;

  export interface SubcategoryDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Subcategory that matches the filter.
     * @param {SubcategoryFindUniqueArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends SubcategoryFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, SubcategoryFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Subcategory"
    > extends True
      ? Prisma__SubcategoryClient<SubcategoryGetPayload<T>>
      : Prisma__SubcategoryClient<SubcategoryGetPayload<T> | null, null>;

    /**
     * Find one Subcategory that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {SubcategoryFindUniqueOrThrowArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends SubcategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SubcategoryFindUniqueOrThrowArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T>>;

    /**
     * Find the first Subcategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryFindFirstArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends SubcategoryFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, SubcategoryFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Subcategory"
    > extends True
      ? Prisma__SubcategoryClient<SubcategoryGetPayload<T>>
      : Prisma__SubcategoryClient<SubcategoryGetPayload<T> | null, null>;

    /**
     * Find the first Subcategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryFindFirstOrThrowArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends SubcategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SubcategoryFindFirstOrThrowArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T>>;

    /**
     * Find zero or more Subcategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subcategories
     * const subcategories = await prisma.subcategory.findMany()
     *
     * // Get first 10 Subcategories
     * const subcategories = await prisma.subcategory.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const subcategoryWithIdOnly = await prisma.subcategory.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends SubcategoryFindManyArgs>(
      args?: SelectSubset<T, SubcategoryFindManyArgs>
    ): PrismaPromise<Array<SubcategoryGetPayload<T>>>;

    /**
     * Create a Subcategory.
     * @param {SubcategoryCreateArgs} args - Arguments to create a Subcategory.
     * @example
     * // Create one Subcategory
     * const Subcategory = await prisma.subcategory.create({
     *   data: {
     *     // ... data to create a Subcategory
     *   }
     * })
     *
     **/
    create<T extends SubcategoryCreateArgs>(
      args: SelectSubset<T, SubcategoryCreateArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T>>;

    /**
     * Create many Subcategories.
     *     @param {SubcategoryCreateManyArgs} args - Arguments to create many Subcategories.
     *     @example
     *     // Create many Subcategories
     *     const subcategory = await prisma.subcategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends SubcategoryCreateManyArgs>(
      args?: SelectSubset<T, SubcategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Subcategory.
     * @param {SubcategoryDeleteArgs} args - Arguments to delete one Subcategory.
     * @example
     * // Delete one Subcategory
     * const Subcategory = await prisma.subcategory.delete({
     *   where: {
     *     // ... filter to delete one Subcategory
     *   }
     * })
     *
     **/
    delete<T extends SubcategoryDeleteArgs>(
      args: SelectSubset<T, SubcategoryDeleteArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T>>;

    /**
     * Update one Subcategory.
     * @param {SubcategoryUpdateArgs} args - Arguments to update one Subcategory.
     * @example
     * // Update one Subcategory
     * const subcategory = await prisma.subcategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends SubcategoryUpdateArgs>(
      args: SelectSubset<T, SubcategoryUpdateArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T>>;

    /**
     * Delete zero or more Subcategories.
     * @param {SubcategoryDeleteManyArgs} args - Arguments to filter Subcategories to delete.
     * @example
     * // Delete a few Subcategories
     * const { count } = await prisma.subcategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends SubcategoryDeleteManyArgs>(
      args?: SelectSubset<T, SubcategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Subcategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subcategories
     * const subcategory = await prisma.subcategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends SubcategoryUpdateManyArgs>(
      args: SelectSubset<T, SubcategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Subcategory.
     * @param {SubcategoryUpsertArgs} args - Arguments to update or create a Subcategory.
     * @example
     * // Update or create a Subcategory
     * const subcategory = await prisma.subcategory.upsert({
     *   create: {
     *     // ... data to create a Subcategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subcategory we want to update
     *   }
     * })
     **/
    upsert<T extends SubcategoryUpsertArgs>(
      args: SelectSubset<T, SubcategoryUpsertArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T>>;

    /**
     * Count the number of Subcategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryCountArgs} args - Arguments to filter Subcategories to count.
     * @example
     * // Count the number of Subcategories
     * const count = await prisma.subcategory.count({
     *   where: {
     *     // ... the filter for the Subcategories we want to count
     *   }
     * })
     **/
    count<T extends SubcategoryCountArgs>(
      args?: Subset<T, SubcategoryCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], SubcategoryCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Subcategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends SubcategoryAggregateArgs>(
      args: Subset<T, SubcategoryAggregateArgs>
    ): PrismaPromise<GetSubcategoryAggregateType<T>>;

    /**
     * Group by Subcategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends SubcategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubcategoryGroupByArgs["orderBy"] }
        : { orderBy?: SubcategoryGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, SubcategoryGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetSubcategoryGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subcategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubcategoryClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    category<T extends CategoryArgs = {}>(
      args?: Subset<T, CategoryArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    products<T extends Subcategory$productsArgs = {}>(
      args?: Subset<T, Subcategory$productsArgs>
    ): PrismaPromise<Array<ProductGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Subcategory base type for findUnique actions
   */
  export type SubcategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * Filter, which Subcategory to fetch.
     *
     **/
    where: SubcategoryWhereUniqueInput;
  };

  /**
   * Subcategory findUnique
   */
  export interface SubcategoryFindUniqueArgs
    extends SubcategoryFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Subcategory findUniqueOrThrow
   */
  export type SubcategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * Filter, which Subcategory to fetch.
     *
     **/
    where: SubcategoryWhereUniqueInput;
  };

  /**
   * Subcategory base type for findFirst actions
   */
  export type SubcategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * Filter, which Subcategory to fetch.
     *
     **/
    where?: SubcategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Subcategories to fetch.
     *
     **/
    orderBy?: Enumerable<SubcategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Subcategories.
     *
     **/
    cursor?: SubcategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Subcategories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Subcategories.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Subcategories.
     *
     **/
    distinct?: Enumerable<SubcategoryScalarFieldEnum>;
  };

  /**
   * Subcategory findFirst
   */
  export interface SubcategoryFindFirstArgs
    extends SubcategoryFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Subcategory findFirstOrThrow
   */
  export type SubcategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * Filter, which Subcategory to fetch.
     *
     **/
    where?: SubcategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Subcategories to fetch.
     *
     **/
    orderBy?: Enumerable<SubcategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Subcategories.
     *
     **/
    cursor?: SubcategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Subcategories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Subcategories.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Subcategories.
     *
     **/
    distinct?: Enumerable<SubcategoryScalarFieldEnum>;
  };

  /**
   * Subcategory findMany
   */
  export type SubcategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * Filter, which Subcategories to fetch.
     *
     **/
    where?: SubcategoryWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Subcategories to fetch.
     *
     **/
    orderBy?: Enumerable<SubcategoryOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Subcategories.
     *
     **/
    cursor?: SubcategoryWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Subcategories from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Subcategories.
     *
     **/
    skip?: number;
    distinct?: Enumerable<SubcategoryScalarFieldEnum>;
  };

  /**
   * Subcategory create
   */
  export type SubcategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * The data needed to create a Subcategory.
     *
     **/
    data: XOR<SubcategoryCreateInput, SubcategoryUncheckedCreateInput>;
  };

  /**
   * Subcategory createMany
   */
  export type SubcategoryCreateManyArgs = {
    /**
     * The data used to create many Subcategories.
     *
     **/
    data: Enumerable<SubcategoryCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Subcategory update
   */
  export type SubcategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * The data needed to update a Subcategory.
     *
     **/
    data: XOR<SubcategoryUpdateInput, SubcategoryUncheckedUpdateInput>;
    /**
     * Choose, which Subcategory to update.
     *
     **/
    where: SubcategoryWhereUniqueInput;
  };

  /**
   * Subcategory updateMany
   */
  export type SubcategoryUpdateManyArgs = {
    /**
     * The data used to update Subcategories.
     *
     **/
    data: XOR<
      SubcategoryUpdateManyMutationInput,
      SubcategoryUncheckedUpdateManyInput
    >;
    /**
     * Filter which Subcategories to update
     *
     **/
    where?: SubcategoryWhereInput;
  };

  /**
   * Subcategory upsert
   */
  export type SubcategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * The filter to search for the Subcategory to update in case it exists.
     *
     **/
    where: SubcategoryWhereUniqueInput;
    /**
     * In case the Subcategory found by the `where` argument doesn't exist, create a new Subcategory with this data.
     *
     **/
    create: XOR<SubcategoryCreateInput, SubcategoryUncheckedCreateInput>;
    /**
     * In case the Subcategory was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<SubcategoryUpdateInput, SubcategoryUncheckedUpdateInput>;
  };

  /**
   * Subcategory delete
   */
  export type SubcategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
    /**
     * Filter which Subcategory to delete.
     *
     **/
    where: SubcategoryWhereUniqueInput;
  };

  /**
   * Subcategory deleteMany
   */
  export type SubcategoryDeleteManyArgs = {
    /**
     * Filter which Subcategories to delete
     *
     **/
    where?: SubcategoryWhereInput;
  };

  /**
   * Subcategory.products
   */
  export type Subcategory$productsArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    where?: ProductWhereInput;
    orderBy?: Enumerable<ProductOrderByWithRelationInput>;
    cursor?: ProductWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<ProductScalarFieldEnum>;
  };

  /**
   * Subcategory without action
   */
  export type SubcategoryArgs = {
    /**
     * Select specific fields to fetch from the Subcategory
     *
     **/
    select?: SubcategorySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SubcategoryInclude | null;
  };

  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null;
    _avg: ProductAvgAggregateOutputType | null;
    _sum: ProductSumAggregateOutputType | null;
    _min: ProductMinAggregateOutputType | null;
    _max: ProductMaxAggregateOutputType | null;
  };

  export type ProductAvgAggregateOutputType = {
    id: number | null;
    price: number | null;
    categoryId: number | null;
    subcategoryId: number | null;
  };

  export type ProductSumAggregateOutputType = {
    id: number | null;
    price: number | null;
    categoryId: number | null;
    subcategoryId: number | null;
  };

  export type ProductMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    description: string | null;
    price: number | null;
    video: string | null;
    instruction: string | null;
    categoryId: number | null;
    subcategoryId: number | null;
  };

  export type ProductMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    description: string | null;
    price: number | null;
    video: string | null;
    instruction: string | null;
    categoryId: number | null;
    subcategoryId: number | null;
  };

  export type ProductCountAggregateOutputType = {
    id: number;
    name: number;
    description: number;
    price: number;
    images: number;
    video: number;
    instruction: number;
    categoryId: number;
    subcategoryId: number;
    _all: number;
  };

  export type ProductAvgAggregateInputType = {
    id?: true;
    price?: true;
    categoryId?: true;
    subcategoryId?: true;
  };

  export type ProductSumAggregateInputType = {
    id?: true;
    price?: true;
    categoryId?: true;
    subcategoryId?: true;
  };

  export type ProductMinAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    price?: true;
    video?: true;
    instruction?: true;
    categoryId?: true;
    subcategoryId?: true;
  };

  export type ProductMaxAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    price?: true;
    video?: true;
    instruction?: true;
    categoryId?: true;
    subcategoryId?: true;
  };

  export type ProductCountAggregateInputType = {
    id?: true;
    name?: true;
    description?: true;
    price?: true;
    images?: true;
    video?: true;
    instruction?: true;
    categoryId?: true;
    subcategoryId?: true;
    _all?: true;
  };

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     *
     **/
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     *
     **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Products
     **/
    _count?: true | ProductCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: ProductAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: ProductSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: ProductMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: ProductMaxAggregateInputType;
  };

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
    [P in keyof T & keyof AggregateProduct]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>;
  };

  export type ProductGroupByArgs = {
    where?: ProductWhereInput;
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>;
    by: Array<ProductScalarFieldEnum>;
    having?: ProductScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: ProductCountAggregateInputType | true;
    _avg?: ProductAvgAggregateInputType;
    _sum?: ProductSumAggregateInputType;
    _min?: ProductMinAggregateInputType;
    _max?: ProductMaxAggregateInputType;
  };

  export type ProductGroupByOutputType = {
    id: number;
    name: string;
    description: string | null;
    price: number;
    images: string[];
    video: string | null;
    instruction: string | null;
    categoryId: number;
    subcategoryId: number | null;
    _count: ProductCountAggregateOutputType | null;
    _avg: ProductAvgAggregateOutputType | null;
    _sum: ProductSumAggregateOutputType | null;
    _min: ProductMinAggregateOutputType | null;
    _max: ProductMaxAggregateOutputType | null;
  };

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof ProductGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
          : GetScalarType<T[P], ProductGroupByOutputType[P]>;
      }
    >
  >;

  export type ProductSelect = {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    price?: boolean;
    images?: boolean;
    video?: boolean;
    instruction?: boolean;
    properties?: boolean | Product$propertiesArgs;
    saleContents?: boolean | Product$saleContentsArgs;
    characteristics?: boolean | Product$characteristicsArgs;
    categoryId?: boolean;
    category?: boolean | CategoryArgs;
    subcategoryId?: boolean;
    subcategory?: boolean | SubcategoryArgs;
    _count?: boolean | ProductCountOutputTypeArgs;
  };

  export type ProductInclude = {
    properties?: boolean | Product$propertiesArgs;
    saleContents?: boolean | Product$saleContentsArgs;
    characteristics?: boolean | Product$characteristicsArgs;
    category?: boolean | CategoryArgs;
    subcategory?: boolean | SubcategoryArgs;
    _count?: boolean | ProductCountOutputTypeArgs;
  };

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Product
    : S extends undefined
    ? never
    : S extends { include: any } & (ProductArgs | ProductFindManyArgs)
    ? Product & {
        [P in TruthyKeys<S["include"]>]: P extends "properties"
          ? Array<PropertyGetPayload<S["include"][P]>>
          : P extends "saleContents"
          ? Array<SaleContentGetPayload<S["include"][P]>>
          : P extends "characteristics"
          ? Array<CharacteristicGetPayload<S["include"][P]>>
          : P extends "category"
          ? CategoryGetPayload<S["include"][P]>
          : P extends "subcategory"
          ? SubcategoryGetPayload<S["include"][P]> | null
          : P extends "_count"
          ? ProductCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (ProductArgs | ProductFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "properties"
          ? Array<PropertyGetPayload<S["select"][P]>>
          : P extends "saleContents"
          ? Array<SaleContentGetPayload<S["select"][P]>>
          : P extends "characteristics"
          ? Array<CharacteristicGetPayload<S["select"][P]>>
          : P extends "category"
          ? CategoryGetPayload<S["select"][P]>
          : P extends "subcategory"
          ? SubcategoryGetPayload<S["select"][P]> | null
          : P extends "_count"
          ? ProductCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof Product
          ? Product[P]
          : never;
      }
    : Product;

  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, "select" | "include"> & {
      select?: ProductCountAggregateInputType | true;
    }
  >;

  export interface ProductDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends ProductFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Product"
    > extends True
      ? Prisma__ProductClient<ProductGetPayload<T>>
      : Prisma__ProductClient<ProductGetPayload<T> | null, null>;

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>;

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends ProductFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Product"
    > extends True
      ? Prisma__ProductClient<ProductGetPayload<T>>
      : Prisma__ProductClient<ProductGetPayload<T> | null, null>;

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>;

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     *
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): PrismaPromise<Array<ProductGetPayload<T>>>;

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     *
     **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>;

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     *
     **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>;

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>;

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): Prisma__ProductClient<ProductGetPayload<T>>;

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
     **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], ProductCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends ProductAggregateArgs>(
      args: Subset<T, ProductAggregateArgs>
    ): PrismaPromise<GetProductAggregateType<T>>;

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs["orderBy"] }
        : { orderBy?: ProductGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetProductGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    properties<T extends Product$propertiesArgs = {}>(
      args?: Subset<T, Product$propertiesArgs>
    ): PrismaPromise<Array<PropertyGetPayload<T>> | Null>;

    saleContents<T extends Product$saleContentsArgs = {}>(
      args?: Subset<T, Product$saleContentsArgs>
    ): PrismaPromise<Array<SaleContentGetPayload<T>> | Null>;

    characteristics<T extends Product$characteristicsArgs = {}>(
      args?: Subset<T, Product$characteristicsArgs>
    ): PrismaPromise<Array<CharacteristicGetPayload<T>> | Null>;

    category<T extends CategoryArgs = {}>(
      args?: Subset<T, CategoryArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    subcategory<T extends SubcategoryArgs = {}>(
      args?: Subset<T, SubcategoryArgs>
    ): Prisma__SubcategoryClient<SubcategoryGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * Filter, which Product to fetch.
     *
     **/
    where: ProductWhereUniqueInput;
  };

  /**
   * Product findUnique
   */
  export interface ProductFindUniqueArgs extends ProductFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * Filter, which Product to fetch.
     *
     **/
    where: ProductWhereUniqueInput;
  };

  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * Filter, which Product to fetch.
     *
     **/
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     *
     **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Products.
     *
     **/
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Products.
     *
     **/
    distinct?: Enumerable<ProductScalarFieldEnum>;
  };

  /**
   * Product findFirst
   */
  export interface ProductFindFirstArgs extends ProductFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * Filter, which Product to fetch.
     *
     **/
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     *
     **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Products.
     *
     **/
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Products.
     *
     **/
    distinct?: Enumerable<ProductScalarFieldEnum>;
  };

  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * Filter, which Products to fetch.
     *
     **/
    where?: ProductWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Products to fetch.
     *
     **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Products.
     *
     **/
    cursor?: ProductWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Products from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Products.
     *
     **/
    skip?: number;
    distinct?: Enumerable<ProductScalarFieldEnum>;
  };

  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * The data needed to create a Product.
     *
     **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>;
  };

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     *
     **/
    data: Enumerable<ProductCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * The data needed to update a Product.
     *
     **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>;
    /**
     * Choose, which Product to update.
     *
     **/
    where: ProductWhereUniqueInput;
  };

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     *
     **/
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>;
    /**
     * Filter which Products to update
     *
     **/
    where?: ProductWhereInput;
  };

  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * The filter to search for the Product to update in case it exists.
     *
     **/
    where: ProductWhereUniqueInput;
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     *
     **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>;
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>;
  };

  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
    /**
     * Filter which Product to delete.
     *
     **/
    where: ProductWhereUniqueInput;
  };

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     *
     **/
    where?: ProductWhereInput;
  };

  /**
   * Product.properties
   */
  export type Product$propertiesArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    where?: PropertyWhereInput;
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>;
    cursor?: PropertyWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<PropertyScalarFieldEnum>;
  };

  /**
   * Product.saleContents
   */
  export type Product$saleContentsArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    where?: SaleContentWhereInput;
    orderBy?: Enumerable<SaleContentOrderByWithRelationInput>;
    cursor?: SaleContentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleContentScalarFieldEnum>;
  };

  /**
   * Product.characteristics
   */
  export type Product$characteristicsArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    where?: CharacteristicWhereInput;
    orderBy?: Enumerable<CharacteristicOrderByWithRelationInput>;
    cursor?: CharacteristicWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<CharacteristicScalarFieldEnum>;
  };

  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     *
     **/
    select?: ProductSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: ProductInclude | null;
  };

  /**
   * Model Property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null;
    _avg: PropertyAvgAggregateOutputType | null;
    _sum: PropertySumAggregateOutputType | null;
    _min: PropertyMinAggregateOutputType | null;
    _max: PropertyMaxAggregateOutputType | null;
  };

  export type PropertyAvgAggregateOutputType = {
    id: number | null;
    productId: number | null;
  };

  export type PropertySumAggregateOutputType = {
    id: number | null;
    productId: number | null;
  };

  export type PropertyMinAggregateOutputType = {
    id: number | null;
    img: string | null;
    content: string | null;
    productId: number | null;
  };

  export type PropertyMaxAggregateOutputType = {
    id: number | null;
    img: string | null;
    content: string | null;
    productId: number | null;
  };

  export type PropertyCountAggregateOutputType = {
    id: number;
    img: number;
    content: number;
    productId: number;
    _all: number;
  };

  export type PropertyAvgAggregateInputType = {
    id?: true;
    productId?: true;
  };

  export type PropertySumAggregateInputType = {
    id?: true;
    productId?: true;
  };

  export type PropertyMinAggregateInputType = {
    id?: true;
    img?: true;
    content?: true;
    productId?: true;
  };

  export type PropertyMaxAggregateInputType = {
    id?: true;
    img?: true;
    content?: true;
    productId?: true;
  };

  export type PropertyCountAggregateInputType = {
    id?: true;
    img?: true;
    content?: true;
    productId?: true;
    _all?: true;
  };

  export type PropertyAggregateArgs = {
    /**
     * Filter which Property to aggregate.
     *
     **/
    where?: PropertyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Properties to fetch.
     *
     **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: PropertyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Properties from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Properties.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Properties
     **/
    _count?: true | PropertyCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: PropertyAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: PropertySumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: PropertyMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: PropertyMaxAggregateInputType;
  };

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
    [P in keyof T & keyof AggregateProperty]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>;
  };

  export type PropertyGroupByArgs = {
    where?: PropertyWhereInput;
    orderBy?: Enumerable<PropertyOrderByWithAggregationInput>;
    by: Array<PropertyScalarFieldEnum>;
    having?: PropertyScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: PropertyCountAggregateInputType | true;
    _avg?: PropertyAvgAggregateInputType;
    _sum?: PropertySumAggregateInputType;
    _min?: PropertyMinAggregateInputType;
    _max?: PropertyMaxAggregateInputType;
  };

  export type PropertyGroupByOutputType = {
    id: number;
    img: string | null;
    content: string;
    productId: number;
    _count: PropertyCountAggregateOutputType | null;
    _avg: PropertyAvgAggregateOutputType | null;
    _sum: PropertySumAggregateOutputType | null;
    _min: PropertyMinAggregateOutputType | null;
    _max: PropertyMaxAggregateOutputType | null;
  };

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PropertyGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof PropertyGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
          : GetScalarType<T[P], PropertyGroupByOutputType[P]>;
      }
    >
  >;

  export type PropertySelect = {
    id?: boolean;
    img?: boolean;
    content?: boolean;
    productId?: boolean;
    product?: boolean | ProductArgs;
  };

  export type PropertyInclude = {
    product?: boolean | ProductArgs;
  };

  export type PropertyGetPayload<
    S extends boolean | null | undefined | PropertyArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Property
    : S extends undefined
    ? never
    : S extends { include: any } & (PropertyArgs | PropertyFindManyArgs)
    ? Property & {
        [P in TruthyKeys<S["include"]>]: P extends "product"
          ? ProductGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (PropertyArgs | PropertyFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "product"
          ? ProductGetPayload<S["select"][P]>
          : P extends keyof Property
          ? Property[P]
          : never;
      }
    : Property;

  type PropertyCountArgs = Merge<
    Omit<PropertyFindManyArgs, "select" | "include"> & {
      select?: PropertyCountAggregateInputType | true;
    }
  >;

  export interface PropertyDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends PropertyFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, PropertyFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Property"
    > extends True
      ? Prisma__PropertyClient<PropertyGetPayload<T>>
      : Prisma__PropertyClient<PropertyGetPayload<T> | null, null>;

    /**
     * Find one Property that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PropertyFindUniqueOrThrowArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>;

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends PropertyFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, PropertyFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Property"
    > extends True
      ? Prisma__PropertyClient<PropertyGetPayload<T>>
      : Prisma__PropertyClient<PropertyGetPayload<T> | null, null>;

    /**
     * Find the first Property that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PropertyFindFirstOrThrowArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>;

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     *
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends PropertyFindManyArgs>(
      args?: SelectSubset<T, PropertyFindManyArgs>
    ): PrismaPromise<Array<PropertyGetPayload<T>>>;

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     *
     **/
    create<T extends PropertyCreateArgs>(
      args: SelectSubset<T, PropertyCreateArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>;

    /**
     * Create many Properties.
     *     @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     *     @example
     *     // Create many Properties
     *     const property = await prisma.property.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends PropertyCreateManyArgs>(
      args?: SelectSubset<T, PropertyCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     *
     **/
    delete<T extends PropertyDeleteArgs>(
      args: SelectSubset<T, PropertyDeleteArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>;

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends PropertyUpdateArgs>(
      args: SelectSubset<T, PropertyUpdateArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>;

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends PropertyDeleteManyArgs>(
      args?: SelectSubset<T, PropertyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends PropertyUpdateManyArgs>(
      args: SelectSubset<T, PropertyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
     **/
    upsert<T extends PropertyUpsertArgs>(
      args: SelectSubset<T, PropertyUpsertArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>;

    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
     **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], PropertyCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends PropertyAggregateArgs>(
      args: Subset<T, PropertyAggregateArgs>
    ): PrismaPromise<GetPropertyAggregateType<T>>;

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs["orderBy"] }
        : { orderBy?: PropertyGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetPropertyGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PropertyClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    product<T extends ProductArgs = {}>(
      args?: Subset<T, ProductArgs>
    ): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Property base type for findUnique actions
   */
  export type PropertyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * Filter, which Property to fetch.
     *
     **/
    where: PropertyWhereUniqueInput;
  };

  /**
   * Property findUnique
   */
  export interface PropertyFindUniqueArgs extends PropertyFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * Filter, which Property to fetch.
     *
     **/
    where: PropertyWhereUniqueInput;
  };

  /**
   * Property base type for findFirst actions
   */
  export type PropertyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * Filter, which Property to fetch.
     *
     **/
    where?: PropertyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Properties to fetch.
     *
     **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Properties.
     *
     **/
    cursor?: PropertyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Properties from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Properties.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Properties.
     *
     **/
    distinct?: Enumerable<PropertyScalarFieldEnum>;
  };

  /**
   * Property findFirst
   */
  export interface PropertyFindFirstArgs extends PropertyFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * Filter, which Property to fetch.
     *
     **/
    where?: PropertyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Properties to fetch.
     *
     **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Properties.
     *
     **/
    cursor?: PropertyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Properties from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Properties.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Properties.
     *
     **/
    distinct?: Enumerable<PropertyScalarFieldEnum>;
  };

  /**
   * Property findMany
   */
  export type PropertyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * Filter, which Properties to fetch.
     *
     **/
    where?: PropertyWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Properties to fetch.
     *
     **/
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Properties.
     *
     **/
    cursor?: PropertyWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Properties from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Properties.
     *
     **/
    skip?: number;
    distinct?: Enumerable<PropertyScalarFieldEnum>;
  };

  /**
   * Property create
   */
  export type PropertyCreateArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * The data needed to create a Property.
     *
     **/
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>;
  };

  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs = {
    /**
     * The data used to create many Properties.
     *
     **/
    data: Enumerable<PropertyCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Property update
   */
  export type PropertyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * The data needed to update a Property.
     *
     **/
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>;
    /**
     * Choose, which Property to update.
     *
     **/
    where: PropertyWhereUniqueInput;
  };

  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs = {
    /**
     * The data used to update Properties.
     *
     **/
    data: XOR<
      PropertyUpdateManyMutationInput,
      PropertyUncheckedUpdateManyInput
    >;
    /**
     * Filter which Properties to update
     *
     **/
    where?: PropertyWhereInput;
  };

  /**
   * Property upsert
   */
  export type PropertyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * The filter to search for the Property to update in case it exists.
     *
     **/
    where: PropertyWhereUniqueInput;
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     *
     **/
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>;
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>;
  };

  /**
   * Property delete
   */
  export type PropertyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
    /**
     * Filter which Property to delete.
     *
     **/
    where: PropertyWhereUniqueInput;
  };

  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs = {
    /**
     * Filter which Properties to delete
     *
     **/
    where?: PropertyWhereInput;
  };

  /**
   * Property without action
   */
  export type PropertyArgs = {
    /**
     * Select specific fields to fetch from the Property
     *
     **/
    select?: PropertySelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: PropertyInclude | null;
  };

  /**
   * Model Characteristic
   */

  export type AggregateCharacteristic = {
    _count: CharacteristicCountAggregateOutputType | null;
    _avg: CharacteristicAvgAggregateOutputType | null;
    _sum: CharacteristicSumAggregateOutputType | null;
    _min: CharacteristicMinAggregateOutputType | null;
    _max: CharacteristicMaxAggregateOutputType | null;
  };

  export type CharacteristicAvgAggregateOutputType = {
    id: number | null;
    productId: number | null;
  };

  export type CharacteristicSumAggregateOutputType = {
    id: number | null;
    productId: number | null;
  };

  export type CharacteristicMinAggregateOutputType = {
    id: number | null;
    name: string | null;
    unit: string | null;
    value: string | null;
    productId: number | null;
  };

  export type CharacteristicMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
    unit: string | null;
    value: string | null;
    productId: number | null;
  };

  export type CharacteristicCountAggregateOutputType = {
    id: number;
    name: number;
    unit: number;
    value: number;
    productId: number;
    _all: number;
  };

  export type CharacteristicAvgAggregateInputType = {
    id?: true;
    productId?: true;
  };

  export type CharacteristicSumAggregateInputType = {
    id?: true;
    productId?: true;
  };

  export type CharacteristicMinAggregateInputType = {
    id?: true;
    name?: true;
    unit?: true;
    value?: true;
    productId?: true;
  };

  export type CharacteristicMaxAggregateInputType = {
    id?: true;
    name?: true;
    unit?: true;
    value?: true;
    productId?: true;
  };

  export type CharacteristicCountAggregateInputType = {
    id?: true;
    name?: true;
    unit?: true;
    value?: true;
    productId?: true;
    _all?: true;
  };

  export type CharacteristicAggregateArgs = {
    /**
     * Filter which Characteristic to aggregate.
     *
     **/
    where?: CharacteristicWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Characteristics to fetch.
     *
     **/
    orderBy?: Enumerable<CharacteristicOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: CharacteristicWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Characteristics from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Characteristics.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Characteristics
     **/
    _count?: true | CharacteristicCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: CharacteristicAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: CharacteristicSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: CharacteristicMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: CharacteristicMaxAggregateInputType;
  };

  export type GetCharacteristicAggregateType<
    T extends CharacteristicAggregateArgs
  > = {
    [P in keyof T & keyof AggregateCharacteristic]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacteristic[P]>
      : GetScalarType<T[P], AggregateCharacteristic[P]>;
  };

  export type CharacteristicGroupByArgs = {
    where?: CharacteristicWhereInput;
    orderBy?: Enumerable<CharacteristicOrderByWithAggregationInput>;
    by: Array<CharacteristicScalarFieldEnum>;
    having?: CharacteristicScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: CharacteristicCountAggregateInputType | true;
    _avg?: CharacteristicAvgAggregateInputType;
    _sum?: CharacteristicSumAggregateInputType;
    _min?: CharacteristicMinAggregateInputType;
    _max?: CharacteristicMaxAggregateInputType;
  };

  export type CharacteristicGroupByOutputType = {
    id: number;
    name: string;
    unit: string | null;
    value: string;
    productId: number;
    _count: CharacteristicCountAggregateOutputType | null;
    _avg: CharacteristicAvgAggregateOutputType | null;
    _sum: CharacteristicSumAggregateOutputType | null;
    _min: CharacteristicMinAggregateOutputType | null;
    _max: CharacteristicMaxAggregateOutputType | null;
  };

  type GetCharacteristicGroupByPayload<T extends CharacteristicGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<CharacteristicGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof CharacteristicGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacteristicGroupByOutputType[P]>
            : GetScalarType<T[P], CharacteristicGroupByOutputType[P]>;
        }
      >
    >;

  export type CharacteristicSelect = {
    id?: boolean;
    name?: boolean;
    unit?: boolean;
    value?: boolean;
    productId?: boolean;
    product?: boolean | ProductArgs;
  };

  export type CharacteristicInclude = {
    product?: boolean | ProductArgs;
  };

  export type CharacteristicGetPayload<
    S extends boolean | null | undefined | CharacteristicArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Characteristic
    : S extends undefined
    ? never
    : S extends { include: any } & (
        | CharacteristicArgs
        | CharacteristicFindManyArgs
      )
    ? Characteristic & {
        [P in TruthyKeys<S["include"]>]: P extends "product"
          ? ProductGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (
        | CharacteristicArgs
        | CharacteristicFindManyArgs
      )
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "product"
          ? ProductGetPayload<S["select"][P]>
          : P extends keyof Characteristic
          ? Characteristic[P]
          : never;
      }
    : Characteristic;

  type CharacteristicCountArgs = Merge<
    Omit<CharacteristicFindManyArgs, "select" | "include"> & {
      select?: CharacteristicCountAggregateInputType | true;
    }
  >;

  export interface CharacteristicDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Characteristic that matches the filter.
     * @param {CharacteristicFindUniqueArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends CharacteristicFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, CharacteristicFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Characteristic"
    > extends True
      ? Prisma__CharacteristicClient<CharacteristicGetPayload<T>>
      : Prisma__CharacteristicClient<CharacteristicGetPayload<T> | null, null>;

    /**
     * Find one Characteristic that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {CharacteristicFindUniqueOrThrowArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends CharacteristicFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CharacteristicFindUniqueOrThrowArgs>
    ): Prisma__CharacteristicClient<CharacteristicGetPayload<T>>;

    /**
     * Find the first Characteristic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicFindFirstArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends CharacteristicFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, CharacteristicFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Characteristic"
    > extends True
      ? Prisma__CharacteristicClient<CharacteristicGetPayload<T>>
      : Prisma__CharacteristicClient<CharacteristicGetPayload<T> | null, null>;

    /**
     * Find the first Characteristic that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicFindFirstOrThrowArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends CharacteristicFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CharacteristicFindFirstOrThrowArgs>
    ): Prisma__CharacteristicClient<CharacteristicGetPayload<T>>;

    /**
     * Find zero or more Characteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characteristics
     * const characteristics = await prisma.characteristic.findMany()
     *
     * // Get first 10 Characteristics
     * const characteristics = await prisma.characteristic.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const characteristicWithIdOnly = await prisma.characteristic.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends CharacteristicFindManyArgs>(
      args?: SelectSubset<T, CharacteristicFindManyArgs>
    ): PrismaPromise<Array<CharacteristicGetPayload<T>>>;

    /**
     * Create a Characteristic.
     * @param {CharacteristicCreateArgs} args - Arguments to create a Characteristic.
     * @example
     * // Create one Characteristic
     * const Characteristic = await prisma.characteristic.create({
     *   data: {
     *     // ... data to create a Characteristic
     *   }
     * })
     *
     **/
    create<T extends CharacteristicCreateArgs>(
      args: SelectSubset<T, CharacteristicCreateArgs>
    ): Prisma__CharacteristicClient<CharacteristicGetPayload<T>>;

    /**
     * Create many Characteristics.
     *     @param {CharacteristicCreateManyArgs} args - Arguments to create many Characteristics.
     *     @example
     *     // Create many Characteristics
     *     const characteristic = await prisma.characteristic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends CharacteristicCreateManyArgs>(
      args?: SelectSubset<T, CharacteristicCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Characteristic.
     * @param {CharacteristicDeleteArgs} args - Arguments to delete one Characteristic.
     * @example
     * // Delete one Characteristic
     * const Characteristic = await prisma.characteristic.delete({
     *   where: {
     *     // ... filter to delete one Characteristic
     *   }
     * })
     *
     **/
    delete<T extends CharacteristicDeleteArgs>(
      args: SelectSubset<T, CharacteristicDeleteArgs>
    ): Prisma__CharacteristicClient<CharacteristicGetPayload<T>>;

    /**
     * Update one Characteristic.
     * @param {CharacteristicUpdateArgs} args - Arguments to update one Characteristic.
     * @example
     * // Update one Characteristic
     * const characteristic = await prisma.characteristic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends CharacteristicUpdateArgs>(
      args: SelectSubset<T, CharacteristicUpdateArgs>
    ): Prisma__CharacteristicClient<CharacteristicGetPayload<T>>;

    /**
     * Delete zero or more Characteristics.
     * @param {CharacteristicDeleteManyArgs} args - Arguments to filter Characteristics to delete.
     * @example
     * // Delete a few Characteristics
     * const { count } = await prisma.characteristic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends CharacteristicDeleteManyArgs>(
      args?: SelectSubset<T, CharacteristicDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characteristics
     * const characteristic = await prisma.characteristic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends CharacteristicUpdateManyArgs>(
      args: SelectSubset<T, CharacteristicUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Characteristic.
     * @param {CharacteristicUpsertArgs} args - Arguments to update or create a Characteristic.
     * @example
     * // Update or create a Characteristic
     * const characteristic = await prisma.characteristic.upsert({
     *   create: {
     *     // ... data to create a Characteristic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Characteristic we want to update
     *   }
     * })
     **/
    upsert<T extends CharacteristicUpsertArgs>(
      args: SelectSubset<T, CharacteristicUpsertArgs>
    ): Prisma__CharacteristicClient<CharacteristicGetPayload<T>>;

    /**
     * Count the number of Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicCountArgs} args - Arguments to filter Characteristics to count.
     * @example
     * // Count the number of Characteristics
     * const count = await prisma.characteristic.count({
     *   where: {
     *     // ... the filter for the Characteristics we want to count
     *   }
     * })
     **/
    count<T extends CharacteristicCountArgs>(
      args?: Subset<T, CharacteristicCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], CharacteristicCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Characteristic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends CharacteristicAggregateArgs>(
      args: Subset<T, CharacteristicAggregateArgs>
    ): PrismaPromise<GetCharacteristicAggregateType<T>>;

    /**
     * Group by Characteristic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends CharacteristicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacteristicGroupByArgs["orderBy"] }
        : { orderBy?: CharacteristicGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, CharacteristicGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetCharacteristicGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Characteristic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CharacteristicClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    product<T extends ProductArgs = {}>(
      args?: Subset<T, ProductArgs>
    ): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Characteristic base type for findUnique actions
   */
  export type CharacteristicFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * Filter, which Characteristic to fetch.
     *
     **/
    where: CharacteristicWhereUniqueInput;
  };

  /**
   * Characteristic findUnique
   */
  export interface CharacteristicFindUniqueArgs
    extends CharacteristicFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Characteristic findUniqueOrThrow
   */
  export type CharacteristicFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * Filter, which Characteristic to fetch.
     *
     **/
    where: CharacteristicWhereUniqueInput;
  };

  /**
   * Characteristic base type for findFirst actions
   */
  export type CharacteristicFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * Filter, which Characteristic to fetch.
     *
     **/
    where?: CharacteristicWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Characteristics to fetch.
     *
     **/
    orderBy?: Enumerable<CharacteristicOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Characteristics.
     *
     **/
    cursor?: CharacteristicWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Characteristics from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Characteristics.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Characteristics.
     *
     **/
    distinct?: Enumerable<CharacteristicScalarFieldEnum>;
  };

  /**
   * Characteristic findFirst
   */
  export interface CharacteristicFindFirstArgs
    extends CharacteristicFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Characteristic findFirstOrThrow
   */
  export type CharacteristicFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * Filter, which Characteristic to fetch.
     *
     **/
    where?: CharacteristicWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Characteristics to fetch.
     *
     **/
    orderBy?: Enumerable<CharacteristicOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Characteristics.
     *
     **/
    cursor?: CharacteristicWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Characteristics from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Characteristics.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Characteristics.
     *
     **/
    distinct?: Enumerable<CharacteristicScalarFieldEnum>;
  };

  /**
   * Characteristic findMany
   */
  export type CharacteristicFindManyArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * Filter, which Characteristics to fetch.
     *
     **/
    where?: CharacteristicWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Characteristics to fetch.
     *
     **/
    orderBy?: Enumerable<CharacteristicOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Characteristics.
     *
     **/
    cursor?: CharacteristicWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Characteristics from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Characteristics.
     *
     **/
    skip?: number;
    distinct?: Enumerable<CharacteristicScalarFieldEnum>;
  };

  /**
   * Characteristic create
   */
  export type CharacteristicCreateArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * The data needed to create a Characteristic.
     *
     **/
    data: XOR<CharacteristicCreateInput, CharacteristicUncheckedCreateInput>;
  };

  /**
   * Characteristic createMany
   */
  export type CharacteristicCreateManyArgs = {
    /**
     * The data used to create many Characteristics.
     *
     **/
    data: Enumerable<CharacteristicCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Characteristic update
   */
  export type CharacteristicUpdateArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * The data needed to update a Characteristic.
     *
     **/
    data: XOR<CharacteristicUpdateInput, CharacteristicUncheckedUpdateInput>;
    /**
     * Choose, which Characteristic to update.
     *
     **/
    where: CharacteristicWhereUniqueInput;
  };

  /**
   * Characteristic updateMany
   */
  export type CharacteristicUpdateManyArgs = {
    /**
     * The data used to update Characteristics.
     *
     **/
    data: XOR<
      CharacteristicUpdateManyMutationInput,
      CharacteristicUncheckedUpdateManyInput
    >;
    /**
     * Filter which Characteristics to update
     *
     **/
    where?: CharacteristicWhereInput;
  };

  /**
   * Characteristic upsert
   */
  export type CharacteristicUpsertArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * The filter to search for the Characteristic to update in case it exists.
     *
     **/
    where: CharacteristicWhereUniqueInput;
    /**
     * In case the Characteristic found by the `where` argument doesn't exist, create a new Characteristic with this data.
     *
     **/
    create: XOR<CharacteristicCreateInput, CharacteristicUncheckedCreateInput>;
    /**
     * In case the Characteristic was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<CharacteristicUpdateInput, CharacteristicUncheckedUpdateInput>;
  };

  /**
   * Characteristic delete
   */
  export type CharacteristicDeleteArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
    /**
     * Filter which Characteristic to delete.
     *
     **/
    where: CharacteristicWhereUniqueInput;
  };

  /**
   * Characteristic deleteMany
   */
  export type CharacteristicDeleteManyArgs = {
    /**
     * Filter which Characteristics to delete
     *
     **/
    where?: CharacteristicWhereInput;
  };

  /**
   * Characteristic without action
   */
  export type CharacteristicArgs = {
    /**
     * Select specific fields to fetch from the Characteristic
     *
     **/
    select?: CharacteristicSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: CharacteristicInclude | null;
  };

  /**
   * Model Sale
   */

  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null;
    _avg: SaleAvgAggregateOutputType | null;
    _sum: SaleSumAggregateOutputType | null;
    _min: SaleMinAggregateOutputType | null;
    _max: SaleMaxAggregateOutputType | null;
  };

  export type SaleAvgAggregateOutputType = {
    id: number | null;
    sum: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    statusId: number | null;
  };

  export type SaleSumAggregateOutputType = {
    id: number | null;
    sum: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    statusId: number | null;
  };

  export type SaleMinAggregateOutputType = {
    id: number | null;
    date: Date | null;
    sum: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    statusId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type SaleMaxAggregateOutputType = {
    id: number | null;
    date: Date | null;
    sum: number | null;
    distributorId: number | null;
    clientId: number | null;
    projectId: number | null;
    userId: number | null;
    statusId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type SaleCountAggregateOutputType = {
    id: number;
    date: number;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    statusId: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type SaleAvgAggregateInputType = {
    id?: true;
    sum?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    statusId?: true;
  };

  export type SaleSumAggregateInputType = {
    id?: true;
    sum?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    statusId?: true;
  };

  export type SaleMinAggregateInputType = {
    id?: true;
    date?: true;
    sum?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    statusId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type SaleMaxAggregateInputType = {
    id?: true;
    date?: true;
    sum?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    statusId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type SaleCountAggregateInputType = {
    id?: true;
    date?: true;
    sum?: true;
    distributorId?: true;
    clientId?: true;
    projectId?: true;
    userId?: true;
    statusId?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type SaleAggregateArgs = {
    /**
     * Filter which Sale to aggregate.
     *
     **/
    where?: SaleWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sales to fetch.
     *
     **/
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: SaleWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sales from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sales.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Sales
     **/
    _count?: true | SaleCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: SaleAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: SaleSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: SaleMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: SaleMaxAggregateInputType;
  };

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
    [P in keyof T & keyof AggregateSale]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>;
  };

  export type SaleGroupByArgs = {
    where?: SaleWhereInput;
    orderBy?: Enumerable<SaleOrderByWithAggregationInput>;
    by: Array<SaleScalarFieldEnum>;
    having?: SaleScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: SaleCountAggregateInputType | true;
    _avg?: SaleAvgAggregateInputType;
    _sum?: SaleSumAggregateInputType;
    _min?: SaleMinAggregateInputType;
    _max?: SaleMaxAggregateInputType;
  };

  export type SaleGroupByOutputType = {
    id: number;
    date: Date;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    statusId: number;
    createdAt: Date;
    updatedAt: Date;
    _count: SaleCountAggregateOutputType | null;
    _avg: SaleAvgAggregateOutputType | null;
    _sum: SaleSumAggregateOutputType | null;
    _min: SaleMinAggregateOutputType | null;
    _max: SaleMaxAggregateOutputType | null;
  };

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SaleGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof SaleGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
          : GetScalarType<T[P], SaleGroupByOutputType[P]>;
      }
    >
  >;

  export type SaleSelect = {
    id?: boolean;
    date?: boolean;
    sum?: boolean;
    distributorId?: boolean;
    distributor?: boolean | DistributorArgs;
    clientId?: boolean;
    client?: boolean | ClientArgs;
    projectId?: boolean;
    project?: boolean | ProjectArgs;
    userId?: boolean;
    user?: boolean | UserArgs;
    saleContent?: boolean | Sale$saleContentArgs;
    statusId?: boolean;
    status?: boolean | SaleStatusArgs;
    createdAt?: boolean;
    updatedAt?: boolean;
    _count?: boolean | SaleCountOutputTypeArgs;
  };

  export type SaleInclude = {
    distributor?: boolean | DistributorArgs;
    client?: boolean | ClientArgs;
    project?: boolean | ProjectArgs;
    user?: boolean | UserArgs;
    saleContent?: boolean | Sale$saleContentArgs;
    status?: boolean | SaleStatusArgs;
    _count?: boolean | SaleCountOutputTypeArgs;
  };

  export type SaleGetPayload<S extends boolean | null | undefined | SaleArgs> =
    S extends { select: any; include: any }
      ? "Please either choose `select` or `include`"
      : S extends true
      ? Sale
      : S extends undefined
      ? never
      : S extends { include: any } & (SaleArgs | SaleFindManyArgs)
      ? Sale & {
          [P in TruthyKeys<S["include"]>]: P extends "distributor"
            ? DistributorGetPayload<S["include"][P]>
            : P extends "client"
            ? ClientGetPayload<S["include"][P]>
            : P extends "project"
            ? ProjectGetPayload<S["include"][P]>
            : P extends "user"
            ? UserGetPayload<S["include"][P]>
            : P extends "saleContent"
            ? Array<SaleContentGetPayload<S["include"][P]>>
            : P extends "status"
            ? SaleStatusGetPayload<S["include"][P]>
            : P extends "_count"
            ? SaleCountOutputTypeGetPayload<S["include"][P]>
            : never;
        }
      : S extends { select: any } & (SaleArgs | SaleFindManyArgs)
      ? {
          [P in TruthyKeys<S["select"]>]: P extends "distributor"
            ? DistributorGetPayload<S["select"][P]>
            : P extends "client"
            ? ClientGetPayload<S["select"][P]>
            : P extends "project"
            ? ProjectGetPayload<S["select"][P]>
            : P extends "user"
            ? UserGetPayload<S["select"][P]>
            : P extends "saleContent"
            ? Array<SaleContentGetPayload<S["select"][P]>>
            : P extends "status"
            ? SaleStatusGetPayload<S["select"][P]>
            : P extends "_count"
            ? SaleCountOutputTypeGetPayload<S["select"][P]>
            : P extends keyof Sale
            ? Sale[P]
            : never;
        }
      : Sale;

  type SaleCountArgs = Merge<
    Omit<SaleFindManyArgs, "select" | "include"> & {
      select?: SaleCountAggregateInputType | true;
    }
  >;

  export interface SaleDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Sale that matches the filter.
     * @param {SaleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends SaleFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, SaleFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Sale"
    > extends True
      ? Prisma__SaleClient<SaleGetPayload<T>>
      : Prisma__SaleClient<SaleGetPayload<T> | null, null>;

    /**
     * Find one Sale that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {SaleFindUniqueOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends SaleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SaleFindUniqueOrThrowArgs>
    ): Prisma__SaleClient<SaleGetPayload<T>>;

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends SaleFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, SaleFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Sale"
    > extends True
      ? Prisma__SaleClient<SaleGetPayload<T>>
      : Prisma__SaleClient<SaleGetPayload<T> | null, null>;

    /**
     * Find the first Sale that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends SaleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SaleFindFirstOrThrowArgs>
    ): Prisma__SaleClient<SaleGetPayload<T>>;

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     *
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends SaleFindManyArgs>(
      args?: SelectSubset<T, SaleFindManyArgs>
    ): PrismaPromise<Array<SaleGetPayload<T>>>;

    /**
     * Create a Sale.
     * @param {SaleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     *
     **/
    create<T extends SaleCreateArgs>(
      args: SelectSubset<T, SaleCreateArgs>
    ): Prisma__SaleClient<SaleGetPayload<T>>;

    /**
     * Create many Sales.
     *     @param {SaleCreateManyArgs} args - Arguments to create many Sales.
     *     @example
     *     // Create many Sales
     *     const sale = await prisma.sale.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends SaleCreateManyArgs>(
      args?: SelectSubset<T, SaleCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Sale.
     * @param {SaleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     *
     **/
    delete<T extends SaleDeleteArgs>(
      args: SelectSubset<T, SaleDeleteArgs>
    ): Prisma__SaleClient<SaleGetPayload<T>>;

    /**
     * Update one Sale.
     * @param {SaleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends SaleUpdateArgs>(
      args: SelectSubset<T, SaleUpdateArgs>
    ): Prisma__SaleClient<SaleGetPayload<T>>;

    /**
     * Delete zero or more Sales.
     * @param {SaleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends SaleDeleteManyArgs>(
      args?: SelectSubset<T, SaleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends SaleUpdateManyArgs>(
      args: SelectSubset<T, SaleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Sale.
     * @param {SaleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
     **/
    upsert<T extends SaleUpsertArgs>(
      args: SelectSubset<T, SaleUpsertArgs>
    ): Prisma__SaleClient<SaleGetPayload<T>>;

    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
     **/
    count<T extends SaleCountArgs>(
      args?: Subset<T, SaleCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], SaleCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends SaleAggregateArgs>(
      args: Subset<T, SaleAggregateArgs>
    ): PrismaPromise<GetSaleAggregateType<T>>;

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs["orderBy"] }
        : { orderBy?: SaleGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetSaleGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SaleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    client<T extends ClientArgs = {}>(
      args?: Subset<T, ClientArgs>
    ): Prisma__ClientClient<ClientGetPayload<T> | Null>;

    project<T extends ProjectArgs = {}>(
      args?: Subset<T, ProjectArgs>
    ): Prisma__ProjectClient<ProjectGetPayload<T> | Null>;

    user<T extends UserArgs = {}>(
      args?: Subset<T, UserArgs>
    ): Prisma__UserClient<UserGetPayload<T> | Null>;

    saleContent<T extends Sale$saleContentArgs = {}>(
      args?: Subset<T, Sale$saleContentArgs>
    ): PrismaPromise<Array<SaleContentGetPayload<T>> | Null>;

    status<T extends SaleStatusArgs = {}>(
      args?: Subset<T, SaleStatusArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Sale base type for findUnique actions
   */
  export type SaleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * Filter, which Sale to fetch.
     *
     **/
    where: SaleWhereUniqueInput;
  };

  /**
   * Sale findUnique
   */
  export interface SaleFindUniqueArgs extends SaleFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Sale findUniqueOrThrow
   */
  export type SaleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * Filter, which Sale to fetch.
     *
     **/
    where: SaleWhereUniqueInput;
  };

  /**
   * Sale base type for findFirst actions
   */
  export type SaleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * Filter, which Sale to fetch.
     *
     **/
    where?: SaleWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sales to fetch.
     *
     **/
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Sales.
     *
     **/
    cursor?: SaleWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sales from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sales.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Sales.
     *
     **/
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * Sale findFirst
   */
  export interface SaleFindFirstArgs extends SaleFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Sale findFirstOrThrow
   */
  export type SaleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * Filter, which Sale to fetch.
     *
     **/
    where?: SaleWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sales to fetch.
     *
     **/
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Sales.
     *
     **/
    cursor?: SaleWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sales from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sales.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Sales.
     *
     **/
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * Sale findMany
   */
  export type SaleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * Filter, which Sales to fetch.
     *
     **/
    where?: SaleWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Sales to fetch.
     *
     **/
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Sales.
     *
     **/
    cursor?: SaleWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Sales from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Sales.
     *
     **/
    skip?: number;
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * Sale create
   */
  export type SaleCreateArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * The data needed to create a Sale.
     *
     **/
    data: XOR<SaleCreateInput, SaleUncheckedCreateInput>;
  };

  /**
   * Sale createMany
   */
  export type SaleCreateManyArgs = {
    /**
     * The data used to create many Sales.
     *
     **/
    data: Enumerable<SaleCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Sale update
   */
  export type SaleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * The data needed to update a Sale.
     *
     **/
    data: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>;
    /**
     * Choose, which Sale to update.
     *
     **/
    where: SaleWhereUniqueInput;
  };

  /**
   * Sale updateMany
   */
  export type SaleUpdateManyArgs = {
    /**
     * The data used to update Sales.
     *
     **/
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>;
    /**
     * Filter which Sales to update
     *
     **/
    where?: SaleWhereInput;
  };

  /**
   * Sale upsert
   */
  export type SaleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * The filter to search for the Sale to update in case it exists.
     *
     **/
    where: SaleWhereUniqueInput;
    /**
     * In case the Sale found by the `where` argument doesn't exist, create a new Sale with this data.
     *
     **/
    create: XOR<SaleCreateInput, SaleUncheckedCreateInput>;
    /**
     * In case the Sale was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>;
  };

  /**
   * Sale delete
   */
  export type SaleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    /**
     * Filter which Sale to delete.
     *
     **/
    where: SaleWhereUniqueInput;
  };

  /**
   * Sale deleteMany
   */
  export type SaleDeleteManyArgs = {
    /**
     * Filter which Sales to delete
     *
     **/
    where?: SaleWhereInput;
  };

  /**
   * Sale.saleContent
   */
  export type Sale$saleContentArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    where?: SaleContentWhereInput;
    orderBy?: Enumerable<SaleContentOrderByWithRelationInput>;
    cursor?: SaleContentWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleContentScalarFieldEnum>;
  };

  /**
   * Sale without action
   */
  export type SaleArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
  };

  /**
   * Model SaleStatus
   */

  export type AggregateSaleStatus = {
    _count: SaleStatusCountAggregateOutputType | null;
    _avg: SaleStatusAvgAggregateOutputType | null;
    _sum: SaleStatusSumAggregateOutputType | null;
    _min: SaleStatusMinAggregateOutputType | null;
    _max: SaleStatusMaxAggregateOutputType | null;
  };

  export type SaleStatusAvgAggregateOutputType = {
    id: number | null;
  };

  export type SaleStatusSumAggregateOutputType = {
    id: number | null;
  };

  export type SaleStatusMinAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type SaleStatusMaxAggregateOutputType = {
    id: number | null;
    name: string | null;
  };

  export type SaleStatusCountAggregateOutputType = {
    id: number;
    name: number;
    _all: number;
  };

  export type SaleStatusAvgAggregateInputType = {
    id?: true;
  };

  export type SaleStatusSumAggregateInputType = {
    id?: true;
  };

  export type SaleStatusMinAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type SaleStatusMaxAggregateInputType = {
    id?: true;
    name?: true;
  };

  export type SaleStatusCountAggregateInputType = {
    id?: true;
    name?: true;
    _all?: true;
  };

  export type SaleStatusAggregateArgs = {
    /**
     * Filter which SaleStatus to aggregate.
     *
     **/
    where?: SaleStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<SaleStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: SaleStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned SaleStatuses
     **/
    _count?: true | SaleStatusCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: SaleStatusAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: SaleStatusSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: SaleStatusMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: SaleStatusMaxAggregateInputType;
  };

  export type GetSaleStatusAggregateType<T extends SaleStatusAggregateArgs> = {
    [P in keyof T & keyof AggregateSaleStatus]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaleStatus[P]>
      : GetScalarType<T[P], AggregateSaleStatus[P]>;
  };

  export type SaleStatusGroupByArgs = {
    where?: SaleStatusWhereInput;
    orderBy?: Enumerable<SaleStatusOrderByWithAggregationInput>;
    by: Array<SaleStatusScalarFieldEnum>;
    having?: SaleStatusScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: SaleStatusCountAggregateInputType | true;
    _avg?: SaleStatusAvgAggregateInputType;
    _sum?: SaleStatusSumAggregateInputType;
    _min?: SaleStatusMinAggregateInputType;
    _max?: SaleStatusMaxAggregateInputType;
  };

  export type SaleStatusGroupByOutputType = {
    id: number;
    name: string;
    _count: SaleStatusCountAggregateOutputType | null;
    _avg: SaleStatusAvgAggregateOutputType | null;
    _sum: SaleStatusSumAggregateOutputType | null;
    _min: SaleStatusMinAggregateOutputType | null;
    _max: SaleStatusMaxAggregateOutputType | null;
  };

  type GetSaleStatusGroupByPayload<T extends SaleStatusGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<SaleStatusGroupByOutputType, T["by"]> & {
          [P in keyof T & keyof SaleStatusGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleStatusGroupByOutputType[P]>
            : GetScalarType<T[P], SaleStatusGroupByOutputType[P]>;
        }
      >
    >;

  export type SaleStatusSelect = {
    id?: boolean;
    name?: boolean;
    sales?: boolean | SaleStatus$salesArgs;
    _count?: boolean | SaleStatusCountOutputTypeArgs;
  };

  export type SaleStatusInclude = {
    sales?: boolean | SaleStatus$salesArgs;
    _count?: boolean | SaleStatusCountOutputTypeArgs;
  };

  export type SaleStatusGetPayload<
    S extends boolean | null | undefined | SaleStatusArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? SaleStatus
    : S extends undefined
    ? never
    : S extends { include: any } & (SaleStatusArgs | SaleStatusFindManyArgs)
    ? SaleStatus & {
        [P in TruthyKeys<S["include"]>]: P extends "sales"
          ? Array<SaleGetPayload<S["include"][P]>>
          : P extends "_count"
          ? SaleStatusCountOutputTypeGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (SaleStatusArgs | SaleStatusFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "sales"
          ? Array<SaleGetPayload<S["select"][P]>>
          : P extends "_count"
          ? SaleStatusCountOutputTypeGetPayload<S["select"][P]>
          : P extends keyof SaleStatus
          ? SaleStatus[P]
          : never;
      }
    : SaleStatus;

  type SaleStatusCountArgs = Merge<
    Omit<SaleStatusFindManyArgs, "select" | "include"> & {
      select?: SaleStatusCountAggregateInputType | true;
    }
  >;

  export interface SaleStatusDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one SaleStatus that matches the filter.
     * @param {SaleStatusFindUniqueArgs} args - Arguments to find a SaleStatus
     * @example
     * // Get one SaleStatus
     * const saleStatus = await prisma.saleStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends SaleStatusFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, SaleStatusFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "SaleStatus"
    > extends True
      ? Prisma__SaleStatusClient<SaleStatusGetPayload<T>>
      : Prisma__SaleStatusClient<SaleStatusGetPayload<T> | null, null>;

    /**
     * Find one SaleStatus that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {SaleStatusFindUniqueOrThrowArgs} args - Arguments to find a SaleStatus
     * @example
     * // Get one SaleStatus
     * const saleStatus = await prisma.saleStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends SaleStatusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SaleStatusFindUniqueOrThrowArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T>>;

    /**
     * Find the first SaleStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusFindFirstArgs} args - Arguments to find a SaleStatus
     * @example
     * // Get one SaleStatus
     * const saleStatus = await prisma.saleStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends SaleStatusFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, SaleStatusFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "SaleStatus"
    > extends True
      ? Prisma__SaleStatusClient<SaleStatusGetPayload<T>>
      : Prisma__SaleStatusClient<SaleStatusGetPayload<T> | null, null>;

    /**
     * Find the first SaleStatus that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusFindFirstOrThrowArgs} args - Arguments to find a SaleStatus
     * @example
     * // Get one SaleStatus
     * const saleStatus = await prisma.saleStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends SaleStatusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SaleStatusFindFirstOrThrowArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T>>;

    /**
     * Find zero or more SaleStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleStatuses
     * const saleStatuses = await prisma.saleStatus.findMany()
     *
     * // Get first 10 SaleStatuses
     * const saleStatuses = await prisma.saleStatus.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const saleStatusWithIdOnly = await prisma.saleStatus.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends SaleStatusFindManyArgs>(
      args?: SelectSubset<T, SaleStatusFindManyArgs>
    ): PrismaPromise<Array<SaleStatusGetPayload<T>>>;

    /**
     * Create a SaleStatus.
     * @param {SaleStatusCreateArgs} args - Arguments to create a SaleStatus.
     * @example
     * // Create one SaleStatus
     * const SaleStatus = await prisma.saleStatus.create({
     *   data: {
     *     // ... data to create a SaleStatus
     *   }
     * })
     *
     **/
    create<T extends SaleStatusCreateArgs>(
      args: SelectSubset<T, SaleStatusCreateArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T>>;

    /**
     * Create many SaleStatuses.
     *     @param {SaleStatusCreateManyArgs} args - Arguments to create many SaleStatuses.
     *     @example
     *     // Create many SaleStatuses
     *     const saleStatus = await prisma.saleStatus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends SaleStatusCreateManyArgs>(
      args?: SelectSubset<T, SaleStatusCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a SaleStatus.
     * @param {SaleStatusDeleteArgs} args - Arguments to delete one SaleStatus.
     * @example
     * // Delete one SaleStatus
     * const SaleStatus = await prisma.saleStatus.delete({
     *   where: {
     *     // ... filter to delete one SaleStatus
     *   }
     * })
     *
     **/
    delete<T extends SaleStatusDeleteArgs>(
      args: SelectSubset<T, SaleStatusDeleteArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T>>;

    /**
     * Update one SaleStatus.
     * @param {SaleStatusUpdateArgs} args - Arguments to update one SaleStatus.
     * @example
     * // Update one SaleStatus
     * const saleStatus = await prisma.saleStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends SaleStatusUpdateArgs>(
      args: SelectSubset<T, SaleStatusUpdateArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T>>;

    /**
     * Delete zero or more SaleStatuses.
     * @param {SaleStatusDeleteManyArgs} args - Arguments to filter SaleStatuses to delete.
     * @example
     * // Delete a few SaleStatuses
     * const { count } = await prisma.saleStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends SaleStatusDeleteManyArgs>(
      args?: SelectSubset<T, SaleStatusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more SaleStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleStatuses
     * const saleStatus = await prisma.saleStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends SaleStatusUpdateManyArgs>(
      args: SelectSubset<T, SaleStatusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one SaleStatus.
     * @param {SaleStatusUpsertArgs} args - Arguments to update or create a SaleStatus.
     * @example
     * // Update or create a SaleStatus
     * const saleStatus = await prisma.saleStatus.upsert({
     *   create: {
     *     // ... data to create a SaleStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleStatus we want to update
     *   }
     * })
     **/
    upsert<T extends SaleStatusUpsertArgs>(
      args: SelectSubset<T, SaleStatusUpsertArgs>
    ): Prisma__SaleStatusClient<SaleStatusGetPayload<T>>;

    /**
     * Count the number of SaleStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusCountArgs} args - Arguments to filter SaleStatuses to count.
     * @example
     * // Count the number of SaleStatuses
     * const count = await prisma.saleStatus.count({
     *   where: {
     *     // ... the filter for the SaleStatuses we want to count
     *   }
     * })
     **/
    count<T extends SaleStatusCountArgs>(
      args?: Subset<T, SaleStatusCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], SaleStatusCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a SaleStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends SaleStatusAggregateArgs>(
      args: Subset<T, SaleStatusAggregateArgs>
    ): PrismaPromise<GetSaleStatusAggregateType<T>>;

    /**
     * Group by SaleStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends SaleStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleStatusGroupByArgs["orderBy"] }
        : { orderBy?: SaleStatusGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, SaleStatusGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetSaleStatusGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SaleStatusClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    sales<T extends SaleStatus$salesArgs = {}>(
      args?: Subset<T, SaleStatus$salesArgs>
    ): PrismaPromise<Array<SaleGetPayload<T>> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SaleStatus base type for findUnique actions
   */
  export type SaleStatusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * Filter, which SaleStatus to fetch.
     *
     **/
    where: SaleStatusWhereUniqueInput;
  };

  /**
   * SaleStatus findUnique
   */
  export interface SaleStatusFindUniqueArgs
    extends SaleStatusFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * SaleStatus findUniqueOrThrow
   */
  export type SaleStatusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * Filter, which SaleStatus to fetch.
     *
     **/
    where: SaleStatusWhereUniqueInput;
  };

  /**
   * SaleStatus base type for findFirst actions
   */
  export type SaleStatusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * Filter, which SaleStatus to fetch.
     *
     **/
    where?: SaleStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<SaleStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for SaleStatuses.
     *
     **/
    cursor?: SaleStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of SaleStatuses.
     *
     **/
    distinct?: Enumerable<SaleStatusScalarFieldEnum>;
  };

  /**
   * SaleStatus findFirst
   */
  export interface SaleStatusFindFirstArgs extends SaleStatusFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * SaleStatus findFirstOrThrow
   */
  export type SaleStatusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * Filter, which SaleStatus to fetch.
     *
     **/
    where?: SaleStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<SaleStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for SaleStatuses.
     *
     **/
    cursor?: SaleStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleStatuses.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of SaleStatuses.
     *
     **/
    distinct?: Enumerable<SaleStatusScalarFieldEnum>;
  };

  /**
   * SaleStatus findMany
   */
  export type SaleStatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * Filter, which SaleStatuses to fetch.
     *
     **/
    where?: SaleStatusWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleStatuses to fetch.
     *
     **/
    orderBy?: Enumerable<SaleStatusOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing SaleStatuses.
     *
     **/
    cursor?: SaleStatusWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleStatuses from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleStatuses.
     *
     **/
    skip?: number;
    distinct?: Enumerable<SaleStatusScalarFieldEnum>;
  };

  /**
   * SaleStatus create
   */
  export type SaleStatusCreateArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * The data needed to create a SaleStatus.
     *
     **/
    data: XOR<SaleStatusCreateInput, SaleStatusUncheckedCreateInput>;
  };

  /**
   * SaleStatus createMany
   */
  export type SaleStatusCreateManyArgs = {
    /**
     * The data used to create many SaleStatuses.
     *
     **/
    data: Enumerable<SaleStatusCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * SaleStatus update
   */
  export type SaleStatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * The data needed to update a SaleStatus.
     *
     **/
    data: XOR<SaleStatusUpdateInput, SaleStatusUncheckedUpdateInput>;
    /**
     * Choose, which SaleStatus to update.
     *
     **/
    where: SaleStatusWhereUniqueInput;
  };

  /**
   * SaleStatus updateMany
   */
  export type SaleStatusUpdateManyArgs = {
    /**
     * The data used to update SaleStatuses.
     *
     **/
    data: XOR<
      SaleStatusUpdateManyMutationInput,
      SaleStatusUncheckedUpdateManyInput
    >;
    /**
     * Filter which SaleStatuses to update
     *
     **/
    where?: SaleStatusWhereInput;
  };

  /**
   * SaleStatus upsert
   */
  export type SaleStatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * The filter to search for the SaleStatus to update in case it exists.
     *
     **/
    where: SaleStatusWhereUniqueInput;
    /**
     * In case the SaleStatus found by the `where` argument doesn't exist, create a new SaleStatus with this data.
     *
     **/
    create: XOR<SaleStatusCreateInput, SaleStatusUncheckedCreateInput>;
    /**
     * In case the SaleStatus was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<SaleStatusUpdateInput, SaleStatusUncheckedUpdateInput>;
  };

  /**
   * SaleStatus delete
   */
  export type SaleStatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
    /**
     * Filter which SaleStatus to delete.
     *
     **/
    where: SaleStatusWhereUniqueInput;
  };

  /**
   * SaleStatus deleteMany
   */
  export type SaleStatusDeleteManyArgs = {
    /**
     * Filter which SaleStatuses to delete
     *
     **/
    where?: SaleStatusWhereInput;
  };

  /**
   * SaleStatus.sales
   */
  export type SaleStatus$salesArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    where?: SaleWhereInput;
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    cursor?: SaleWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * SaleStatus without action
   */
  export type SaleStatusArgs = {
    /**
     * Select specific fields to fetch from the SaleStatus
     *
     **/
    select?: SaleStatusSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleStatusInclude | null;
  };

  /**
   * Model SaleContent
   */

  export type AggregateSaleContent = {
    _count: SaleContentCountAggregateOutputType | null;
    _avg: SaleContentAvgAggregateOutputType | null;
    _sum: SaleContentSumAggregateOutputType | null;
    _min: SaleContentMinAggregateOutputType | null;
    _max: SaleContentMaxAggregateOutputType | null;
  };

  export type SaleContentAvgAggregateOutputType = {
    id: number | null;
    price: number | null;
    amount: number | null;
    saleId: number | null;
    productId: number | null;
  };

  export type SaleContentSumAggregateOutputType = {
    id: number | null;
    price: number | null;
    amount: number | null;
    saleId: number | null;
    productId: number | null;
  };

  export type SaleContentMinAggregateOutputType = {
    id: number | null;
    price: number | null;
    amount: number | null;
    saleId: number | null;
    productId: number | null;
  };

  export type SaleContentMaxAggregateOutputType = {
    id: number | null;
    price: number | null;
    amount: number | null;
    saleId: number | null;
    productId: number | null;
  };

  export type SaleContentCountAggregateOutputType = {
    id: number;
    price: number;
    amount: number;
    saleId: number;
    productId: number;
    _all: number;
  };

  export type SaleContentAvgAggregateInputType = {
    id?: true;
    price?: true;
    amount?: true;
    saleId?: true;
    productId?: true;
  };

  export type SaleContentSumAggregateInputType = {
    id?: true;
    price?: true;
    amount?: true;
    saleId?: true;
    productId?: true;
  };

  export type SaleContentMinAggregateInputType = {
    id?: true;
    price?: true;
    amount?: true;
    saleId?: true;
    productId?: true;
  };

  export type SaleContentMaxAggregateInputType = {
    id?: true;
    price?: true;
    amount?: true;
    saleId?: true;
    productId?: true;
  };

  export type SaleContentCountAggregateInputType = {
    id?: true;
    price?: true;
    amount?: true;
    saleId?: true;
    productId?: true;
    _all?: true;
  };

  export type SaleContentAggregateArgs = {
    /**
     * Filter which SaleContent to aggregate.
     *
     **/
    where?: SaleContentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleContents to fetch.
     *
     **/
    orderBy?: Enumerable<SaleContentOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: SaleContentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleContents from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleContents.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned SaleContents
     **/
    _count?: true | SaleContentCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: SaleContentAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: SaleContentSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: SaleContentMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: SaleContentMaxAggregateInputType;
  };

  export type GetSaleContentAggregateType<T extends SaleContentAggregateArgs> =
    {
      [P in keyof T & keyof AggregateSaleContent]: P extends "_count" | "count"
        ? T[P] extends true
          ? number
          : GetScalarType<T[P], AggregateSaleContent[P]>
        : GetScalarType<T[P], AggregateSaleContent[P]>;
    };

  export type SaleContentGroupByArgs = {
    where?: SaleContentWhereInput;
    orderBy?: Enumerable<SaleContentOrderByWithAggregationInput>;
    by: Array<SaleContentScalarFieldEnum>;
    having?: SaleContentScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: SaleContentCountAggregateInputType | true;
    _avg?: SaleContentAvgAggregateInputType;
    _sum?: SaleContentSumAggregateInputType;
    _min?: SaleContentMinAggregateInputType;
    _max?: SaleContentMaxAggregateInputType;
  };

  export type SaleContentGroupByOutputType = {
    id: number;
    price: number;
    amount: number;
    saleId: number;
    productId: number;
    _count: SaleContentCountAggregateOutputType | null;
    _avg: SaleContentAvgAggregateOutputType | null;
    _sum: SaleContentSumAggregateOutputType | null;
    _min: SaleContentMinAggregateOutputType | null;
    _max: SaleContentMaxAggregateOutputType | null;
  };

  type GetSaleContentGroupByPayload<T extends SaleContentGroupByArgs> =
    PrismaPromise<
      Array<
        PickArray<SaleContentGroupByOutputType, T["by"]> & {
          [P in keyof T &
            keyof SaleContentGroupByOutputType]: P extends "_count"
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleContentGroupByOutputType[P]>
            : GetScalarType<T[P], SaleContentGroupByOutputType[P]>;
        }
      >
    >;

  export type SaleContentSelect = {
    id?: boolean;
    price?: boolean;
    amount?: boolean;
    saleId?: boolean;
    sale?: boolean | SaleArgs;
    productId?: boolean;
    product?: boolean | ProductArgs;
  };

  export type SaleContentInclude = {
    sale?: boolean | SaleArgs;
    product?: boolean | ProductArgs;
  };

  export type SaleContentGetPayload<
    S extends boolean | null | undefined | SaleContentArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? SaleContent
    : S extends undefined
    ? never
    : S extends { include: any } & (SaleContentArgs | SaleContentFindManyArgs)
    ? SaleContent & {
        [P in TruthyKeys<S["include"]>]: P extends "sale"
          ? SaleGetPayload<S["include"][P]>
          : P extends "product"
          ? ProductGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (SaleContentArgs | SaleContentFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "sale"
          ? SaleGetPayload<S["select"][P]>
          : P extends "product"
          ? ProductGetPayload<S["select"][P]>
          : P extends keyof SaleContent
          ? SaleContent[P]
          : never;
      }
    : SaleContent;

  type SaleContentCountArgs = Merge<
    Omit<SaleContentFindManyArgs, "select" | "include"> & {
      select?: SaleContentCountAggregateInputType | true;
    }
  >;

  export interface SaleContentDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one SaleContent that matches the filter.
     * @param {SaleContentFindUniqueArgs} args - Arguments to find a SaleContent
     * @example
     * // Get one SaleContent
     * const saleContent = await prisma.saleContent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends SaleContentFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, SaleContentFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "SaleContent"
    > extends True
      ? Prisma__SaleContentClient<SaleContentGetPayload<T>>
      : Prisma__SaleContentClient<SaleContentGetPayload<T> | null, null>;

    /**
     * Find one SaleContent that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {SaleContentFindUniqueOrThrowArgs} args - Arguments to find a SaleContent
     * @example
     * // Get one SaleContent
     * const saleContent = await prisma.saleContent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends SaleContentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SaleContentFindUniqueOrThrowArgs>
    ): Prisma__SaleContentClient<SaleContentGetPayload<T>>;

    /**
     * Find the first SaleContent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentFindFirstArgs} args - Arguments to find a SaleContent
     * @example
     * // Get one SaleContent
     * const saleContent = await prisma.saleContent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends SaleContentFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, SaleContentFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "SaleContent"
    > extends True
      ? Prisma__SaleContentClient<SaleContentGetPayload<T>>
      : Prisma__SaleContentClient<SaleContentGetPayload<T> | null, null>;

    /**
     * Find the first SaleContent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentFindFirstOrThrowArgs} args - Arguments to find a SaleContent
     * @example
     * // Get one SaleContent
     * const saleContent = await prisma.saleContent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends SaleContentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SaleContentFindFirstOrThrowArgs>
    ): Prisma__SaleContentClient<SaleContentGetPayload<T>>;

    /**
     * Find zero or more SaleContents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleContents
     * const saleContents = await prisma.saleContent.findMany()
     *
     * // Get first 10 SaleContents
     * const saleContents = await prisma.saleContent.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const saleContentWithIdOnly = await prisma.saleContent.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends SaleContentFindManyArgs>(
      args?: SelectSubset<T, SaleContentFindManyArgs>
    ): PrismaPromise<Array<SaleContentGetPayload<T>>>;

    /**
     * Create a SaleContent.
     * @param {SaleContentCreateArgs} args - Arguments to create a SaleContent.
     * @example
     * // Create one SaleContent
     * const SaleContent = await prisma.saleContent.create({
     *   data: {
     *     // ... data to create a SaleContent
     *   }
     * })
     *
     **/
    create<T extends SaleContentCreateArgs>(
      args: SelectSubset<T, SaleContentCreateArgs>
    ): Prisma__SaleContentClient<SaleContentGetPayload<T>>;

    /**
     * Create many SaleContents.
     *     @param {SaleContentCreateManyArgs} args - Arguments to create many SaleContents.
     *     @example
     *     // Create many SaleContents
     *     const saleContent = await prisma.saleContent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends SaleContentCreateManyArgs>(
      args?: SelectSubset<T, SaleContentCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a SaleContent.
     * @param {SaleContentDeleteArgs} args - Arguments to delete one SaleContent.
     * @example
     * // Delete one SaleContent
     * const SaleContent = await prisma.saleContent.delete({
     *   where: {
     *     // ... filter to delete one SaleContent
     *   }
     * })
     *
     **/
    delete<T extends SaleContentDeleteArgs>(
      args: SelectSubset<T, SaleContentDeleteArgs>
    ): Prisma__SaleContentClient<SaleContentGetPayload<T>>;

    /**
     * Update one SaleContent.
     * @param {SaleContentUpdateArgs} args - Arguments to update one SaleContent.
     * @example
     * // Update one SaleContent
     * const saleContent = await prisma.saleContent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends SaleContentUpdateArgs>(
      args: SelectSubset<T, SaleContentUpdateArgs>
    ): Prisma__SaleContentClient<SaleContentGetPayload<T>>;

    /**
     * Delete zero or more SaleContents.
     * @param {SaleContentDeleteManyArgs} args - Arguments to filter SaleContents to delete.
     * @example
     * // Delete a few SaleContents
     * const { count } = await prisma.saleContent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends SaleContentDeleteManyArgs>(
      args?: SelectSubset<T, SaleContentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more SaleContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleContents
     * const saleContent = await prisma.saleContent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends SaleContentUpdateManyArgs>(
      args: SelectSubset<T, SaleContentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one SaleContent.
     * @param {SaleContentUpsertArgs} args - Arguments to update or create a SaleContent.
     * @example
     * // Update or create a SaleContent
     * const saleContent = await prisma.saleContent.upsert({
     *   create: {
     *     // ... data to create a SaleContent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleContent we want to update
     *   }
     * })
     **/
    upsert<T extends SaleContentUpsertArgs>(
      args: SelectSubset<T, SaleContentUpsertArgs>
    ): Prisma__SaleContentClient<SaleContentGetPayload<T>>;

    /**
     * Count the number of SaleContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentCountArgs} args - Arguments to filter SaleContents to count.
     * @example
     * // Count the number of SaleContents
     * const count = await prisma.saleContent.count({
     *   where: {
     *     // ... the filter for the SaleContents we want to count
     *   }
     * })
     **/
    count<T extends SaleContentCountArgs>(
      args?: Subset<T, SaleContentCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], SaleContentCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a SaleContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends SaleContentAggregateArgs>(
      args: Subset<T, SaleContentAggregateArgs>
    ): PrismaPromise<GetSaleContentAggregateType<T>>;

    /**
     * Group by SaleContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends SaleContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleContentGroupByArgs["orderBy"] }
        : { orderBy?: SaleContentGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, SaleContentGroupByArgs, OrderByArg> &
        InputErrors
    ): {} extends InputErrors
      ? GetSaleContentGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleContent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SaleContentClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    sale<T extends SaleArgs = {}>(
      args?: Subset<T, SaleArgs>
    ): Prisma__SaleClient<SaleGetPayload<T> | Null>;

    product<T extends ProductArgs = {}>(
      args?: Subset<T, ProductArgs>
    ): Prisma__ProductClient<ProductGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SaleContent base type for findUnique actions
   */
  export type SaleContentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * Filter, which SaleContent to fetch.
     *
     **/
    where: SaleContentWhereUniqueInput;
  };

  /**
   * SaleContent findUnique
   */
  export interface SaleContentFindUniqueArgs
    extends SaleContentFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * SaleContent findUniqueOrThrow
   */
  export type SaleContentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * Filter, which SaleContent to fetch.
     *
     **/
    where: SaleContentWhereUniqueInput;
  };

  /**
   * SaleContent base type for findFirst actions
   */
  export type SaleContentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * Filter, which SaleContent to fetch.
     *
     **/
    where?: SaleContentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleContents to fetch.
     *
     **/
    orderBy?: Enumerable<SaleContentOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for SaleContents.
     *
     **/
    cursor?: SaleContentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleContents from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleContents.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of SaleContents.
     *
     **/
    distinct?: Enumerable<SaleContentScalarFieldEnum>;
  };

  /**
   * SaleContent findFirst
   */
  export interface SaleContentFindFirstArgs
    extends SaleContentFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * SaleContent findFirstOrThrow
   */
  export type SaleContentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * Filter, which SaleContent to fetch.
     *
     **/
    where?: SaleContentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleContents to fetch.
     *
     **/
    orderBy?: Enumerable<SaleContentOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for SaleContents.
     *
     **/
    cursor?: SaleContentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleContents from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleContents.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of SaleContents.
     *
     **/
    distinct?: Enumerable<SaleContentScalarFieldEnum>;
  };

  /**
   * SaleContent findMany
   */
  export type SaleContentFindManyArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * Filter, which SaleContents to fetch.
     *
     **/
    where?: SaleContentWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of SaleContents to fetch.
     *
     **/
    orderBy?: Enumerable<SaleContentOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing SaleContents.
     *
     **/
    cursor?: SaleContentWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` SaleContents from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` SaleContents.
     *
     **/
    skip?: number;
    distinct?: Enumerable<SaleContentScalarFieldEnum>;
  };

  /**
   * SaleContent create
   */
  export type SaleContentCreateArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * The data needed to create a SaleContent.
     *
     **/
    data: XOR<SaleContentCreateInput, SaleContentUncheckedCreateInput>;
  };

  /**
   * SaleContent createMany
   */
  export type SaleContentCreateManyArgs = {
    /**
     * The data used to create many SaleContents.
     *
     **/
    data: Enumerable<SaleContentCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * SaleContent update
   */
  export type SaleContentUpdateArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * The data needed to update a SaleContent.
     *
     **/
    data: XOR<SaleContentUpdateInput, SaleContentUncheckedUpdateInput>;
    /**
     * Choose, which SaleContent to update.
     *
     **/
    where: SaleContentWhereUniqueInput;
  };

  /**
   * SaleContent updateMany
   */
  export type SaleContentUpdateManyArgs = {
    /**
     * The data used to update SaleContents.
     *
     **/
    data: XOR<
      SaleContentUpdateManyMutationInput,
      SaleContentUncheckedUpdateManyInput
    >;
    /**
     * Filter which SaleContents to update
     *
     **/
    where?: SaleContentWhereInput;
  };

  /**
   * SaleContent upsert
   */
  export type SaleContentUpsertArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * The filter to search for the SaleContent to update in case it exists.
     *
     **/
    where: SaleContentWhereUniqueInput;
    /**
     * In case the SaleContent found by the `where` argument doesn't exist, create a new SaleContent with this data.
     *
     **/
    create: XOR<SaleContentCreateInput, SaleContentUncheckedCreateInput>;
    /**
     * In case the SaleContent was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<SaleContentUpdateInput, SaleContentUncheckedUpdateInput>;
  };

  /**
   * SaleContent delete
   */
  export type SaleContentDeleteArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
    /**
     * Filter which SaleContent to delete.
     *
     **/
    where: SaleContentWhereUniqueInput;
  };

  /**
   * SaleContent deleteMany
   */
  export type SaleContentDeleteManyArgs = {
    /**
     * Filter which SaleContents to delete
     *
     **/
    where?: SaleContentWhereInput;
  };

  /**
   * SaleContent without action
   */
  export type SaleContentArgs = {
    /**
     * Select specific fields to fetch from the SaleContent
     *
     **/
    select?: SaleContentSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleContentInclude | null;
  };

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null;
    _avg: UserAvgAggregateOutputType | null;
    _sum: UserSumAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  export type UserAvgAggregateOutputType = {
    id: number | null;
    distributorId: number | null;
  };

  export type UserSumAggregateOutputType = {
    id: number | null;
    distributorId: number | null;
  };

  export type UserMinAggregateOutputType = {
    id: number | null;
    email: string | null;
    name: string | null;
    phone: string | null;
    description: string | null;
    password: string | null;
    salt: string | null;
    activated: boolean | null;
    role: Role | null;
    distributorId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserMaxAggregateOutputType = {
    id: number | null;
    email: string | null;
    name: string | null;
    phone: string | null;
    description: string | null;
    password: string | null;
    salt: string | null;
    activated: boolean | null;
    role: Role | null;
    distributorId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type UserCountAggregateOutputType = {
    id: number;
    email: number;
    name: number;
    phone: number;
    description: number;
    password: number;
    salt: number;
    activated: number;
    role: number;
    distributorId: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type UserAvgAggregateInputType = {
    id?: true;
    distributorId?: true;
  };

  export type UserSumAggregateInputType = {
    id?: true;
    distributorId?: true;
  };

  export type UserMinAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    phone?: true;
    description?: true;
    password?: true;
    salt?: true;
    activated?: true;
    role?: true;
    distributorId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserMaxAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    phone?: true;
    description?: true;
    password?: true;
    salt?: true;
    activated?: true;
    role?: true;
    distributorId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type UserCountAggregateInputType = {
    id?: true;
    email?: true;
    name?: true;
    phone?: true;
    description?: true;
    password?: true;
    salt?: true;
    activated?: true;
    role?: true;
    distributorId?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     *
     **/
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     *
     **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Users
     **/
    _count?: true | UserCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: UserAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: UserSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: UserMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: UserMaxAggregateInputType;
  };

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>;
  };

  export type UserGroupByArgs = {
    where?: UserWhereInput;
    orderBy?: Enumerable<UserOrderByWithAggregationInput>;
    by: Array<UserScalarFieldEnum>;
    having?: UserScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: UserCountAggregateInputType | true;
    _avg?: UserAvgAggregateInputType;
    _sum?: UserSumAggregateInputType;
    _min?: UserMinAggregateInputType;
    _max?: UserMaxAggregateInputType;
  };

  export type UserGroupByOutputType = {
    id: number;
    email: string;
    name: string | null;
    phone: string | null;
    description: string;
    password: string;
    salt: string;
    activated: boolean;
    role: Role;
    distributorId: number | null;
    createdAt: Date;
    updatedAt: Date;
    _count: UserCountAggregateOutputType | null;
    _avg: UserAvgAggregateOutputType | null;
    _sum: UserSumAggregateOutputType | null;
    _min: UserMinAggregateOutputType | null;
    _max: UserMaxAggregateOutputType | null;
  };

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof UserGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], UserGroupByOutputType[P]>
          : GetScalarType<T[P], UserGroupByOutputType[P]>;
      }
    >
  >;

  export type UserSelect = {
    id?: boolean;
    email?: boolean;
    name?: boolean;
    phone?: boolean;
    description?: boolean;
    password?: boolean;
    salt?: boolean;
    activated?: boolean;
    role?: boolean;
    token?: boolean | TokenArgs;
    tasks?: boolean | User$tasksArgs;
    sales?: boolean | User$salesArgs;
    distributorId?: boolean;
    distributor?: boolean | DistributorArgs;
    createdAt?: boolean;
    updatedAt?: boolean;
    _count?: boolean | UserCountOutputTypeArgs;
  };

  export type UserInclude = {
    token?: boolean | TokenArgs;
    tasks?: boolean | User$tasksArgs;
    sales?: boolean | User$salesArgs;
    distributor?: boolean | DistributorArgs;
    _count?: boolean | UserCountOutputTypeArgs;
  };

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any; include: any }
      ? "Please either choose `select` or `include`"
      : S extends true
      ? User
      : S extends undefined
      ? never
      : S extends { include: any } & (UserArgs | UserFindManyArgs)
      ? User & {
          [P in TruthyKeys<S["include"]>]: P extends "token"
            ? TokenGetPayload<S["include"][P]> | null
            : P extends "tasks"
            ? Array<TaskGetPayload<S["include"][P]>>
            : P extends "sales"
            ? Array<SaleGetPayload<S["include"][P]>>
            : P extends "distributor"
            ? DistributorGetPayload<S["include"][P]> | null
            : P extends "_count"
            ? UserCountOutputTypeGetPayload<S["include"][P]>
            : never;
        }
      : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
          [P in TruthyKeys<S["select"]>]: P extends "token"
            ? TokenGetPayload<S["select"][P]> | null
            : P extends "tasks"
            ? Array<TaskGetPayload<S["select"][P]>>
            : P extends "sales"
            ? Array<SaleGetPayload<S["select"][P]>>
            : P extends "distributor"
            ? DistributorGetPayload<S["select"][P]> | null
            : P extends "_count"
            ? UserCountOutputTypeGetPayload<S["select"][P]>
            : P extends keyof User
            ? User[P]
            : never;
        }
      : User;

  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, "select" | "include"> & {
      select?: UserCountAggregateInputType | true;
    }
  >;

  export interface UserDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends UserFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "User"
    > extends True
      ? Prisma__UserClient<UserGetPayload<T>>
      : Prisma__UserClient<UserGetPayload<T> | null, null>;

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>;

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends UserFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "User"
    > extends True
      ? Prisma__UserClient<UserGetPayload<T>>
      : Prisma__UserClient<UserGetPayload<T> | null, null>;

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>;

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     *
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>;

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     *
     **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>;

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     *
     **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>;

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>;

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>;

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
     **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], UserCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends UserAggregateArgs>(
      args: Subset<T, UserAggregateArgs>
    ): PrismaPromise<GetUserAggregateType<T>>;

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs["orderBy"] }
        : { orderBy?: UserGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetUserGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    token<T extends TokenArgs = {}>(
      args?: Subset<T, TokenArgs>
    ): Prisma__TokenClient<TokenGetPayload<T> | Null>;

    tasks<T extends User$tasksArgs = {}>(
      args?: Subset<T, User$tasksArgs>
    ): PrismaPromise<Array<TaskGetPayload<T>> | Null>;

    sales<T extends User$salesArgs = {}>(
      args?: Subset<T, User$salesArgs>
    ): PrismaPromise<Array<SaleGetPayload<T>> | Null>;

    distributor<T extends DistributorArgs = {}>(
      args?: Subset<T, DistributorArgs>
    ): Prisma__DistributorClient<DistributorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * Filter, which User to fetch.
     *
     **/
    where: UserWhereUniqueInput;
  };

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * Filter, which User to fetch.
     *
     **/
    where: UserWhereUniqueInput;
  };

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * Filter, which User to fetch.
     *
     **/
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     *
     **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     *
     **/
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     *
     **/
    distinct?: Enumerable<UserScalarFieldEnum>;
  };

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * Filter, which User to fetch.
     *
     **/
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     *
     **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Users.
     *
     **/
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Users.
     *
     **/
    distinct?: Enumerable<UserScalarFieldEnum>;
  };

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * Filter, which Users to fetch.
     *
     **/
    where?: UserWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Users to fetch.
     *
     **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Users.
     *
     **/
    cursor?: UserWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Users from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Users.
     *
     **/
    skip?: number;
    distinct?: Enumerable<UserScalarFieldEnum>;
  };

  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * The data needed to create a User.
     *
     **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>;
  };

  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     *
     **/
    data: Enumerable<UserCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * The data needed to update a User.
     *
     **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
    /**
     * Choose, which User to update.
     *
     **/
    where: UserWhereUniqueInput;
  };

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     *
     **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>;
    /**
     * Filter which Users to update
     *
     **/
    where?: UserWhereInput;
  };

  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * The filter to search for the User to update in case it exists.
     *
     **/
    where: UserWhereUniqueInput;
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     *
     **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>;
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>;
  };

  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
    /**
     * Filter which User to delete.
     *
     **/
    where: UserWhereUniqueInput;
  };

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     *
     **/
    where?: UserWhereInput;
  };

  /**
   * User.tasks
   */
  export type User$tasksArgs = {
    /**
     * Select specific fields to fetch from the Task
     *
     **/
    select?: TaskSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TaskInclude | null;
    where?: TaskWhereInput;
    orderBy?: Enumerable<TaskOrderByWithRelationInput>;
    cursor?: TaskWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<TaskScalarFieldEnum>;
  };

  /**
   * User.sales
   */
  export type User$salesArgs = {
    /**
     * Select specific fields to fetch from the Sale
     *
     **/
    select?: SaleSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: SaleInclude | null;
    where?: SaleWhereInput;
    orderBy?: Enumerable<SaleOrderByWithRelationInput>;
    cursor?: SaleWhereUniqueInput;
    take?: number;
    skip?: number;
    distinct?: Enumerable<SaleScalarFieldEnum>;
  };

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     *
     **/
    select?: UserSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: UserInclude | null;
  };

  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null;
    _avg: TokenAvgAggregateOutputType | null;
    _sum: TokenSumAggregateOutputType | null;
    _min: TokenMinAggregateOutputType | null;
    _max: TokenMaxAggregateOutputType | null;
  };

  export type TokenAvgAggregateOutputType = {
    id: number | null;
    userId: number | null;
  };

  export type TokenSumAggregateOutputType = {
    id: number | null;
    userId: number | null;
  };

  export type TokenMinAggregateOutputType = {
    id: number | null;
    refreshToken: string | null;
    userId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type TokenMaxAggregateOutputType = {
    id: number | null;
    refreshToken: string | null;
    userId: number | null;
    createdAt: Date | null;
    updatedAt: Date | null;
  };

  export type TokenCountAggregateOutputType = {
    id: number;
    refreshToken: number;
    userId: number;
    createdAt: number;
    updatedAt: number;
    _all: number;
  };

  export type TokenAvgAggregateInputType = {
    id?: true;
    userId?: true;
  };

  export type TokenSumAggregateInputType = {
    id?: true;
    userId?: true;
  };

  export type TokenMinAggregateInputType = {
    id?: true;
    refreshToken?: true;
    userId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type TokenMaxAggregateInputType = {
    id?: true;
    refreshToken?: true;
    userId?: true;
    createdAt?: true;
    updatedAt?: true;
  };

  export type TokenCountAggregateInputType = {
    id?: true;
    refreshToken?: true;
    userId?: true;
    createdAt?: true;
    updatedAt?: true;
    _all?: true;
  };

  export type TokenAggregateArgs = {
    /**
     * Filter which Token to aggregate.
     *
     **/
    where?: TokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tokens to fetch.
     *
     **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the start position
     *
     **/
    cursor?: TokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tokens from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tokens.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Count returned Tokens
     **/
    _count?: true | TokenCountAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to average
     **/
    _avg?: TokenAvgAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to sum
     **/
    _sum?: TokenSumAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the minimum value
     **/
    _min?: TokenMinAggregateInputType;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     *
     * Select which fields to find the maximum value
     **/
    _max?: TokenMaxAggregateInputType;
  };

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
    [P in keyof T & keyof AggregateToken]: P extends "_count" | "count"
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>;
  };

  export type TokenGroupByArgs = {
    where?: TokenWhereInput;
    orderBy?: Enumerable<TokenOrderByWithAggregationInput>;
    by: Array<TokenScalarFieldEnum>;
    having?: TokenScalarWhereWithAggregatesInput;
    take?: number;
    skip?: number;
    _count?: TokenCountAggregateInputType | true;
    _avg?: TokenAvgAggregateInputType;
    _sum?: TokenSumAggregateInputType;
    _min?: TokenMinAggregateInputType;
    _max?: TokenMaxAggregateInputType;
  };

  export type TokenGroupByOutputType = {
    id: number;
    refreshToken: string;
    userId: number;
    createdAt: Date;
    updatedAt: Date;
    _count: TokenCountAggregateOutputType | null;
    _avg: TokenAvgAggregateOutputType | null;
    _sum: TokenSumAggregateOutputType | null;
    _min: TokenMinAggregateOutputType | null;
    _max: TokenMaxAggregateOutputType | null;
  };

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TokenGroupByOutputType, T["by"]> & {
        [P in keyof T & keyof TokenGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
          : GetScalarType<T[P], TokenGroupByOutputType[P]>;
      }
    >
  >;

  export type TokenSelect = {
    id?: boolean;
    refreshToken?: boolean;
    user?: boolean | UserArgs;
    userId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  };

  export type TokenInclude = {
    user?: boolean | UserArgs;
  };

  export type TokenGetPayload<
    S extends boolean | null | undefined | TokenArgs
  > = S extends { select: any; include: any }
    ? "Please either choose `select` or `include`"
    : S extends true
    ? Token
    : S extends undefined
    ? never
    : S extends { include: any } & (TokenArgs | TokenFindManyArgs)
    ? Token & {
        [P in TruthyKeys<S["include"]>]: P extends "user"
          ? UserGetPayload<S["include"][P]>
          : never;
      }
    : S extends { select: any } & (TokenArgs | TokenFindManyArgs)
    ? {
        [P in TruthyKeys<S["select"]>]: P extends "user"
          ? UserGetPayload<S["select"][P]>
          : P extends keyof Token
          ? Token[P]
          : never;
      }
    : Token;

  type TokenCountArgs = Merge<
    Omit<TokenFindManyArgs, "select" | "include"> & {
      select?: TokenCountAggregateInputType | true;
    }
  >;

  export interface TokenDelegate<
    GlobalRejectSettings extends
      | Prisma.RejectOnNotFound
      | Prisma.RejectPerOperation
      | false
      | undefined
  > {
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUnique<
      T extends TokenFindUniqueArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args: SelectSubset<T, TokenFindUniqueArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findUnique",
      "Token"
    > extends True
      ? Prisma__TokenClient<TokenGetPayload<T>>
      : Prisma__TokenClient<TokenGetPayload<T> | null, null>;

    /**
     * Find one Token that matches the filter or throw an error  with `error.code='P2025'`
     *     if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TokenFindUniqueOrThrowArgs>
    ): Prisma__TokenClient<TokenGetPayload<T>>;

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirst<
      T extends TokenFindFirstArgs,
      LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound
        ? T["rejectOnNotFound"]
        : undefined
    >(
      args?: SelectSubset<T, TokenFindFirstArgs>
    ): HasReject<
      GlobalRejectSettings,
      LocalRejectSettings,
      "findFirst",
      "Token"
    > extends True
      ? Prisma__TokenClient<TokenGetPayload<T>>
      : Prisma__TokenClient<TokenGetPayload<T> | null, null>;

    /**
     * Find the first Token that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     **/
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TokenFindFirstOrThrowArgs>
    ): Prisma__TokenClient<TokenGetPayload<T>>;

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     *
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     *
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     *
     **/
    findMany<T extends TokenFindManyArgs>(
      args?: SelectSubset<T, TokenFindManyArgs>
    ): PrismaPromise<Array<TokenGetPayload<T>>>;

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     *
     **/
    create<T extends TokenCreateArgs>(
      args: SelectSubset<T, TokenCreateArgs>
    ): Prisma__TokenClient<TokenGetPayload<T>>;

    /**
     * Create many Tokens.
     *     @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const token = await prisma.token.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *
     **/
    createMany<T extends TokenCreateManyArgs>(
      args?: SelectSubset<T, TokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     *
     **/
    delete<T extends TokenDeleteArgs>(
      args: SelectSubset<T, TokenDeleteArgs>
    ): Prisma__TokenClient<TokenGetPayload<T>>;

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    update<T extends TokenUpdateArgs>(
      args: SelectSubset<T, TokenUpdateArgs>
    ): Prisma__TokenClient<TokenGetPayload<T>>;

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     *
     **/
    deleteMany<T extends TokenDeleteManyArgs>(
      args?: SelectSubset<T, TokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     *
     **/
    updateMany<T extends TokenUpdateManyArgs>(
      args: SelectSubset<T, TokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>;

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     **/
    upsert<T extends TokenUpsertArgs>(
      args: SelectSubset<T, TokenUpsertArgs>
    ): Prisma__TokenClient<TokenGetPayload<T>>;

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
     **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>
    ): PrismaPromise<
      T extends _Record<"select", any>
        ? T["select"] extends true
          ? number
          : GetScalarType<T["select"], TokenCountAggregateOutputType>
        : number
    >;

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
     **/
    aggregate<T extends TokenAggregateArgs>(
      args: Subset<T, TokenAggregateArgs>
    ): PrismaPromise<GetTokenAggregateType<T>>;

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     *
     **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<"skip", Keys<T>>,
        Extends<"take", Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs["orderBy"] }
        : { orderBy?: TokenGroupByArgs["orderBy"] },
      OrderFields extends ExcludeUnderscoreKeys<
        Keys<MaybeTupleToUnion<T["orderBy"]>>
      >,
      ByFields extends TupleToUnion<T["by"]>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T["having"]>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T["by"] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
        ? `Error: "by" must not be empty.`
        : HavingValid extends False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  "Field ",
                  P,
                  ` in "having" needs to be provided in "by"`
                ];
          }[HavingFields]
        : "take" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : "skip" extends Keys<T>
        ? "orderBy" extends Keys<T>
          ? ByValid extends True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
              }[OrderFields]
          : 'Error: If you provide "skip", you also need to provide "orderBy"'
        : ByValid extends True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
          }[OrderFields]
    >(
      args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors
    ): {} extends InputErrors
      ? GetTokenGroupByPayload<T>
      : PrismaPromise<InputErrors>;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TokenClient<T, Null = never>
    implements PrismaPromise<T>
  {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(
      _dmmf: runtime.DMMFClass,
      _fetcher: PrismaClientFetcher,
      _queryType: "query" | "mutation",
      _rootField: string,
      _clientMethod: string,
      _args: any,
      _dataPath: string[],
      _errorFormat: ErrorFormat,
      _measurePerformance?: boolean | undefined,
      _isList?: boolean
    );
    readonly [Symbol.toStringTag]: "PrismaClientPromise";

    user<T extends UserArgs = {}>(
      args?: Subset<T, UserArgs>
    ): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(
      onfulfilled?:
        | ((value: T) => TResult1 | PromiseLike<TResult1>)
        | undefined
        | null,
      onrejected?:
        | ((reason: any) => TResult2 | PromiseLike<TResult2>)
        | undefined
        | null
    ): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(
      onrejected?:
        | ((reason: any) => TResult | PromiseLike<TResult>)
        | undefined
        | null
    ): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Token base type for findUnique actions
   */
  export type TokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * Filter, which Token to fetch.
     *
     **/
    where: TokenWhereUniqueInput;
  };

  /**
   * Token findUnique
   */
  export interface TokenFindUniqueArgs extends TokenFindUniqueArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * Filter, which Token to fetch.
     *
     **/
    where: TokenWhereUniqueInput;
  };

  /**
   * Token base type for findFirst actions
   */
  export type TokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * Filter, which Token to fetch.
     *
     **/
    where?: TokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tokens to fetch.
     *
     **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tokens.
     *
     **/
    cursor?: TokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tokens from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tokens.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tokens.
     *
     **/
    distinct?: Enumerable<TokenScalarFieldEnum>;
  };

  /**
   * Token findFirst
   */
  export interface TokenFindFirstArgs extends TokenFindFirstArgsBase {
    /**
     * Throw an Error if query returns no results
     * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
     */
    rejectOnNotFound?: RejectOnNotFound;
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * Filter, which Token to fetch.
     *
     **/
    where?: TokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tokens to fetch.
     *
     **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for searching for Tokens.
     *
     **/
    cursor?: TokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tokens from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tokens.
     *
     **/
    skip?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     *
     * Filter by unique combinations of Tokens.
     *
     **/
    distinct?: Enumerable<TokenScalarFieldEnum>;
  };

  /**
   * Token findMany
   */
  export type TokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * Filter, which Tokens to fetch.
     *
     **/
    where?: TokenWhereInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     *
     * Determine the order of Tokens to fetch.
     *
     **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     *
     * Sets the position for listing Tokens.
     *
     **/
    cursor?: TokenWhereUniqueInput;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Take `±n` Tokens from the position of the cursor.
     *
     **/
    take?: number;
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     *
     * Skip the first `n` Tokens.
     *
     **/
    skip?: number;
    distinct?: Enumerable<TokenScalarFieldEnum>;
  };

  /**
   * Token create
   */
  export type TokenCreateArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * The data needed to create a Token.
     *
     **/
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>;
  };

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs = {
    /**
     * The data used to create many Tokens.
     *
     **/
    data: Enumerable<TokenCreateManyInput>;
    skipDuplicates?: boolean;
  };

  /**
   * Token update
   */
  export type TokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * The data needed to update a Token.
     *
     **/
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>;
    /**
     * Choose, which Token to update.
     *
     **/
    where: TokenWhereUniqueInput;
  };

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs = {
    /**
     * The data used to update Tokens.
     *
     **/
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>;
    /**
     * Filter which Tokens to update
     *
     **/
    where?: TokenWhereInput;
  };

  /**
   * Token upsert
   */
  export type TokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * The filter to search for the Token to update in case it exists.
     *
     **/
    where: TokenWhereUniqueInput;
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     *
     **/
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>;
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     *
     **/
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>;
  };

  /**
   * Token delete
   */
  export type TokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
    /**
     * Filter which Token to delete.
     *
     **/
    where: TokenWhereUniqueInput;
  };

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs = {
    /**
     * Filter which Tokens to delete
     *
     **/
    where?: TokenWhereInput;
  };

  /**
   * Token without action
   */
  export type TokenArgs = {
    /**
     * Select specific fields to fetch from the Token
     *
     **/
    select?: TokenSelect | null;
    /**
     * Choose, which related nodes to fetch as well.
     *
     **/
    include?: TokenInclude | null;
  };

  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    id: "id";
    name: "name";
  };

  export type CategoryScalarFieldEnum =
    typeof CategoryScalarFieldEnum[keyof typeof CategoryScalarFieldEnum];

  export const CharacteristicScalarFieldEnum: {
    id: "id";
    name: "name";
    unit: "unit";
    value: "value";
    productId: "productId";
  };

  export type CharacteristicScalarFieldEnum =
    typeof CharacteristicScalarFieldEnum[keyof typeof CharacteristicScalarFieldEnum];

  export const ClientScalarFieldEnum: {
    id: "id";
    name: "name";
    fullName: "fullName";
    legalAddress: "legalAddress";
    actualAddress: "actualAddress";
    inn: "inn";
    kpp: "kpp";
    ogrn: "ogrn";
    manager: "manager";
    website: "website";
    phone: "phone";
    email: "email";
    info: "info";
    distributorId: "distributorId";
    groupId: "groupId";
  };

  export type ClientScalarFieldEnum =
    typeof ClientScalarFieldEnum[keyof typeof ClientScalarFieldEnum];

  export const ContactScalarFieldEnum: {
    id: "id";
    name: "name";
    email: "email";
    phone: "phone";
    description: "description";
    clientId: "clientId";
    distributorId: "distributorId";
  };

  export type ContactScalarFieldEnum =
    typeof ContactScalarFieldEnum[keyof typeof ContactScalarFieldEnum];

  export const DistributorScalarFieldEnum: {
    id: "id";
    name: "name";
    fullName: "fullName";
    legalAddress: "legalAddress";
    actualAddress: "actualAddress";
    inn: "inn";
    kpp: "kpp";
    ogrn: "ogrn";
    manager: "manager";
    website: "website";
    phone: "phone";
    email: "email";
    info: "info";
    discount: "discount";
  };

  export type DistributorScalarFieldEnum =
    typeof DistributorScalarFieldEnum[keyof typeof DistributorScalarFieldEnum];

  export const GroupScalarFieldEnum: {
    id: "id";
    name: "name";
    distributorId: "distributorId";
  };

  export type GroupScalarFieldEnum =
    typeof GroupScalarFieldEnum[keyof typeof GroupScalarFieldEnum];

  export const ProductScalarFieldEnum: {
    id: "id";
    name: "name";
    description: "description";
    price: "price";
    images: "images";
    video: "video";
    instruction: "instruction";
    categoryId: "categoryId";
    subcategoryId: "subcategoryId";
  };

  export type ProductScalarFieldEnum =
    typeof ProductScalarFieldEnum[keyof typeof ProductScalarFieldEnum];

  export const ProjectScalarFieldEnum: {
    id: "id";
    name: "name";
    description: "description";
    discount: "discount";
    startDate: "startDate";
    finishDate: "finishDate";
    statusId: "statusId";
    distributorId: "distributorId";
    clientId: "clientId";
    groupId: "groupId";
  };

  export type ProjectScalarFieldEnum =
    typeof ProjectScalarFieldEnum[keyof typeof ProjectScalarFieldEnum];

  export const ProjectStatusScalarFieldEnum: {
    id: "id";
    name: "name";
  };

  export type ProjectStatusScalarFieldEnum =
    typeof ProjectStatusScalarFieldEnum[keyof typeof ProjectStatusScalarFieldEnum];

  export const PropertyScalarFieldEnum: {
    id: "id";
    img: "img";
    content: "content";
    productId: "productId";
  };

  export type PropertyScalarFieldEnum =
    typeof PropertyScalarFieldEnum[keyof typeof PropertyScalarFieldEnum];

  export const QueryMode: {
    default: "default";
    insensitive: "insensitive";
  };

  export type QueryMode = typeof QueryMode[keyof typeof QueryMode];

  export const SaleContentScalarFieldEnum: {
    id: "id";
    price: "price";
    amount: "amount";
    saleId: "saleId";
    productId: "productId";
  };

  export type SaleContentScalarFieldEnum =
    typeof SaleContentScalarFieldEnum[keyof typeof SaleContentScalarFieldEnum];

  export const SaleScalarFieldEnum: {
    id: "id";
    date: "date";
    sum: "sum";
    distributorId: "distributorId";
    clientId: "clientId";
    projectId: "projectId";
    userId: "userId";
    statusId: "statusId";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type SaleScalarFieldEnum =
    typeof SaleScalarFieldEnum[keyof typeof SaleScalarFieldEnum];

  export const SaleStatusScalarFieldEnum: {
    id: "id";
    name: "name";
  };

  export type SaleStatusScalarFieldEnum =
    typeof SaleStatusScalarFieldEnum[keyof typeof SaleStatusScalarFieldEnum];

  export const SortOrder: {
    asc: "asc";
    desc: "desc";
  };

  export type SortOrder = typeof SortOrder[keyof typeof SortOrder];

  export const SubcategoryScalarFieldEnum: {
    id: "id";
    name: "name";
    categoryId: "categoryId";
  };

  export type SubcategoryScalarFieldEnum =
    typeof SubcategoryScalarFieldEnum[keyof typeof SubcategoryScalarFieldEnum];

  export const TaskScalarFieldEnum: {
    id: "id";
    title: "title";
    dateStarted: "dateStarted";
    dateEnded: "dateEnded";
    content: "content";
    statusId: "statusId";
    distributorId: "distributorId";
    clientId: "clientId";
    projectId: "projectId";
    userId: "userId";
    contactId: "contactId";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type TaskScalarFieldEnum =
    typeof TaskScalarFieldEnum[keyof typeof TaskScalarFieldEnum];

  export const TaskStatusScalarFieldEnum: {
    id: "id";
    name: "name";
  };

  export type TaskStatusScalarFieldEnum =
    typeof TaskStatusScalarFieldEnum[keyof typeof TaskStatusScalarFieldEnum];

  export const TokenScalarFieldEnum: {
    id: "id";
    refreshToken: "refreshToken";
    userId: "userId";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type TokenScalarFieldEnum =
    typeof TokenScalarFieldEnum[keyof typeof TokenScalarFieldEnum];

  export const TransactionIsolationLevel: {
    ReadUncommitted: "ReadUncommitted";
    ReadCommitted: "ReadCommitted";
    RepeatableRead: "RepeatableRead";
    Serializable: "Serializable";
  };

  export type TransactionIsolationLevel =
    typeof TransactionIsolationLevel[keyof typeof TransactionIsolationLevel];

  export const UserScalarFieldEnum: {
    id: "id";
    email: "email";
    name: "name";
    phone: "phone";
    description: "description";
    password: "password";
    salt: "salt";
    activated: "activated";
    role: "role";
    distributorId: "distributorId";
    createdAt: "createdAt";
    updatedAt: "updatedAt";
  };

  export type UserScalarFieldEnum =
    typeof UserScalarFieldEnum[keyof typeof UserScalarFieldEnum];

  /**
   * Deep Input Types
   */

  export type DistributorWhereInput = {
    AND?: Enumerable<DistributorWhereInput>;
    OR?: Enumerable<DistributorWhereInput>;
    NOT?: Enumerable<DistributorWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    fullName?: StringFilter | string;
    legalAddress?: StringNullableFilter | string | null;
    actualAddress?: StringNullableFilter | string | null;
    inn?: StringFilter | string;
    kpp?: StringNullableFilter | string | null;
    ogrn?: StringNullableFilter | string | null;
    manager?: StringNullableFilter | string | null;
    website?: StringNullableFilter | string | null;
    phone?: StringNullableFilter | string | null;
    email?: StringNullableFilter | string | null;
    info?: StringNullableFilter | string | null;
    discount?: FloatFilter | number;
    clients?: ClientListRelationFilter;
    projects?: ProjectListRelationFilter;
    sales?: SaleListRelationFilter;
    tasks?: TaskListRelationFilter;
    contacts?: ContactListRelationFilter;
    users?: UserListRelationFilter;
    groups?: GroupListRelationFilter;
  };

  export type DistributorOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    discount?: SortOrder;
    clients?: ClientOrderByRelationAggregateInput;
    projects?: ProjectOrderByRelationAggregateInput;
    sales?: SaleOrderByRelationAggregateInput;
    tasks?: TaskOrderByRelationAggregateInput;
    contacts?: ContactOrderByRelationAggregateInput;
    users?: UserOrderByRelationAggregateInput;
    groups?: GroupOrderByRelationAggregateInput;
  };

  export type DistributorWhereUniqueInput = {
    id?: number;
    inn?: string;
  };

  export type DistributorOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    discount?: SortOrder;
    _count?: DistributorCountOrderByAggregateInput;
    _avg?: DistributorAvgOrderByAggregateInput;
    _max?: DistributorMaxOrderByAggregateInput;
    _min?: DistributorMinOrderByAggregateInput;
    _sum?: DistributorSumOrderByAggregateInput;
  };

  export type DistributorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DistributorScalarWhereWithAggregatesInput>;
    OR?: Enumerable<DistributorScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<DistributorScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    fullName?: StringWithAggregatesFilter | string;
    legalAddress?: StringNullableWithAggregatesFilter | string | null;
    actualAddress?: StringNullableWithAggregatesFilter | string | null;
    inn?: StringWithAggregatesFilter | string;
    kpp?: StringNullableWithAggregatesFilter | string | null;
    ogrn?: StringNullableWithAggregatesFilter | string | null;
    manager?: StringNullableWithAggregatesFilter | string | null;
    website?: StringNullableWithAggregatesFilter | string | null;
    phone?: StringNullableWithAggregatesFilter | string | null;
    email?: StringNullableWithAggregatesFilter | string | null;
    info?: StringNullableWithAggregatesFilter | string | null;
    discount?: FloatWithAggregatesFilter | number;
  };

  export type GroupWhereInput = {
    AND?: Enumerable<GroupWhereInput>;
    OR?: Enumerable<GroupWhereInput>;
    NOT?: Enumerable<GroupWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    clients?: ClientListRelationFilter;
    projects?: ProjectListRelationFilter;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput> | null;
    distributorId?: IntNullableFilter | number | null;
  };

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    clients?: ClientOrderByRelationAggregateInput;
    projects?: ProjectOrderByRelationAggregateInput;
    distributor?: DistributorOrderByWithRelationInput;
    distributorId?: SortOrder;
  };

  export type GroupWhereUniqueInput = {
    id?: number;
    name?: string;
  };

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    distributorId?: SortOrder;
    _count?: GroupCountOrderByAggregateInput;
    _avg?: GroupAvgOrderByAggregateInput;
    _max?: GroupMaxOrderByAggregateInput;
    _min?: GroupMinOrderByAggregateInput;
    _sum?: GroupSumOrderByAggregateInput;
  };

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupScalarWhereWithAggregatesInput>;
    OR?: Enumerable<GroupScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<GroupScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    distributorId?: IntNullableWithAggregatesFilter | number | null;
  };

  export type ClientWhereInput = {
    AND?: Enumerable<ClientWhereInput>;
    OR?: Enumerable<ClientWhereInput>;
    NOT?: Enumerable<ClientWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    fullName?: StringFilter | string;
    legalAddress?: StringNullableFilter | string | null;
    actualAddress?: StringNullableFilter | string | null;
    inn?: StringFilter | string;
    kpp?: StringNullableFilter | string | null;
    ogrn?: StringNullableFilter | string | null;
    manager?: StringNullableFilter | string | null;
    website?: StringNullableFilter | string | null;
    phone?: StringNullableFilter | string | null;
    email?: StringNullableFilter | string | null;
    info?: StringNullableFilter | string | null;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput> | null;
    distributorId?: IntNullableFilter | number | null;
    group?: XOR<GroupRelationFilter, GroupWhereInput>;
    groupId?: IntFilter | number;
    projects?: ProjectListRelationFilter;
    tasks?: TaskListRelationFilter;
    contacts?: ContactListRelationFilter;
    sales?: SaleListRelationFilter;
  };

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    distributor?: DistributorOrderByWithRelationInput;
    distributorId?: SortOrder;
    group?: GroupOrderByWithRelationInput;
    groupId?: SortOrder;
    projects?: ProjectOrderByRelationAggregateInput;
    tasks?: TaskOrderByRelationAggregateInput;
    contacts?: ContactOrderByRelationAggregateInput;
    sales?: SaleOrderByRelationAggregateInput;
  };

  export type ClientWhereUniqueInput = {
    id?: number;
    inn?: string;
  };

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    distributorId?: SortOrder;
    groupId?: SortOrder;
    _count?: ClientCountOrderByAggregateInput;
    _avg?: ClientAvgOrderByAggregateInput;
    _max?: ClientMaxOrderByAggregateInput;
    _min?: ClientMinOrderByAggregateInput;
    _sum?: ClientSumOrderByAggregateInput;
  };

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientScalarWhereWithAggregatesInput>;
    OR?: Enumerable<ClientScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<ClientScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    fullName?: StringWithAggregatesFilter | string;
    legalAddress?: StringNullableWithAggregatesFilter | string | null;
    actualAddress?: StringNullableWithAggregatesFilter | string | null;
    inn?: StringWithAggregatesFilter | string;
    kpp?: StringNullableWithAggregatesFilter | string | null;
    ogrn?: StringNullableWithAggregatesFilter | string | null;
    manager?: StringNullableWithAggregatesFilter | string | null;
    website?: StringNullableWithAggregatesFilter | string | null;
    phone?: StringNullableWithAggregatesFilter | string | null;
    email?: StringNullableWithAggregatesFilter | string | null;
    info?: StringNullableWithAggregatesFilter | string | null;
    distributorId?: IntNullableWithAggregatesFilter | number | null;
    groupId?: IntWithAggregatesFilter | number;
  };

  export type ContactWhereInput = {
    AND?: Enumerable<ContactWhereInput>;
    OR?: Enumerable<ContactWhereInput>;
    NOT?: Enumerable<ContactWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    email?: StringFilter | string;
    phone?: StringNullableFilter | string | null;
    description?: StringNullableFilter | string | null;
    clientId?: IntFilter | number;
    client?: XOR<ClientRelationFilter, ClientWhereInput>;
    distributorId?: IntFilter | number;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput>;
    tasks?: TaskListRelationFilter;
  };

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    email?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    clientId?: SortOrder;
    client?: ClientOrderByWithRelationInput;
    distributorId?: SortOrder;
    distributor?: DistributorOrderByWithRelationInput;
    tasks?: TaskOrderByRelationAggregateInput;
  };

  export type ContactWhereUniqueInput = {
    id?: number;
  };

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    email?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    clientId?: SortOrder;
    distributorId?: SortOrder;
    _count?: ContactCountOrderByAggregateInput;
    _avg?: ContactAvgOrderByAggregateInput;
    _max?: ContactMaxOrderByAggregateInput;
    _min?: ContactMinOrderByAggregateInput;
    _sum?: ContactSumOrderByAggregateInput;
  };

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactScalarWhereWithAggregatesInput>;
    OR?: Enumerable<ContactScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<ContactScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    email?: StringWithAggregatesFilter | string;
    phone?: StringNullableWithAggregatesFilter | string | null;
    description?: StringNullableWithAggregatesFilter | string | null;
    clientId?: IntWithAggregatesFilter | number;
    distributorId?: IntWithAggregatesFilter | number;
  };

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>;
    OR?: Enumerable<ProjectWhereInput>;
    NOT?: Enumerable<ProjectWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    description?: StringNullableFilter | string | null;
    discount?: FloatNullableFilter | number | null;
    startDate?: DateTimeFilter | Date | string;
    finishDate?: DateTimeNullableFilter | Date | string | null;
    status?: XOR<ProjectStatusRelationFilter, ProjectStatusWhereInput>;
    statusId?: IntFilter | number;
    distributorId?: IntFilter | number;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput>;
    clientId?: IntFilter | number;
    client?: XOR<ClientRelationFilter, ClientWhereInput>;
    groupId?: IntFilter | number;
    group?: XOR<GroupRelationFilter, GroupWhereInput>;
    tasks?: TaskListRelationFilter;
    sales?: SaleListRelationFilter;
  };

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    discount?: SortOrder;
    startDate?: SortOrder;
    finishDate?: SortOrder;
    status?: ProjectStatusOrderByWithRelationInput;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    distributor?: DistributorOrderByWithRelationInput;
    clientId?: SortOrder;
    client?: ClientOrderByWithRelationInput;
    groupId?: SortOrder;
    group?: GroupOrderByWithRelationInput;
    tasks?: TaskOrderByRelationAggregateInput;
    sales?: SaleOrderByRelationAggregateInput;
  };

  export type ProjectWhereUniqueInput = {
    id?: number;
  };

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    discount?: SortOrder;
    startDate?: SortOrder;
    finishDate?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    groupId?: SortOrder;
    _count?: ProjectCountOrderByAggregateInput;
    _avg?: ProjectAvgOrderByAggregateInput;
    _max?: ProjectMaxOrderByAggregateInput;
    _min?: ProjectMinOrderByAggregateInput;
    _sum?: ProjectSumOrderByAggregateInput;
  };

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>;
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    description?: StringNullableWithAggregatesFilter | string | null;
    discount?: FloatNullableWithAggregatesFilter | number | null;
    startDate?: DateTimeWithAggregatesFilter | Date | string;
    finishDate?: DateTimeNullableWithAggregatesFilter | Date | string | null;
    statusId?: IntWithAggregatesFilter | number;
    distributorId?: IntWithAggregatesFilter | number;
    clientId?: IntWithAggregatesFilter | number;
    groupId?: IntWithAggregatesFilter | number;
  };

  export type ProjectStatusWhereInput = {
    AND?: Enumerable<ProjectStatusWhereInput>;
    OR?: Enumerable<ProjectStatusWhereInput>;
    NOT?: Enumerable<ProjectStatusWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    projects?: ProjectListRelationFilter;
  };

  export type ProjectStatusOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    projects?: ProjectOrderByRelationAggregateInput;
  };

  export type ProjectStatusWhereUniqueInput = {
    id?: number;
  };

  export type ProjectStatusOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    _count?: ProjectStatusCountOrderByAggregateInput;
    _avg?: ProjectStatusAvgOrderByAggregateInput;
    _max?: ProjectStatusMaxOrderByAggregateInput;
    _min?: ProjectStatusMinOrderByAggregateInput;
    _sum?: ProjectStatusSumOrderByAggregateInput;
  };

  export type ProjectStatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectStatusScalarWhereWithAggregatesInput>;
    OR?: Enumerable<ProjectStatusScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<ProjectStatusScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
  };

  export type TaskWhereInput = {
    AND?: Enumerable<TaskWhereInput>;
    OR?: Enumerable<TaskWhereInput>;
    NOT?: Enumerable<TaskWhereInput>;
    id?: IntFilter | number;
    title?: StringFilter | string;
    dateStarted?: DateTimeFilter | Date | string;
    dateEnded?: DateTimeNullableFilter | Date | string | null;
    content?: StringFilter | string;
    status?: XOR<TaskStatusRelationFilter, TaskStatusWhereInput>;
    statusId?: IntFilter | number;
    distributorId?: IntNullableFilter | number | null;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput> | null;
    clientId?: IntNullableFilter | number | null;
    client?: XOR<ClientRelationFilter, ClientWhereInput> | null;
    projectId?: IntNullableFilter | number | null;
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null;
    userId?: IntFilter | number;
    user?: XOR<UserRelationFilter, UserWhereInput>;
    contactId?: IntNullableFilter | number | null;
    contact?: XOR<ContactRelationFilter, ContactWhereInput> | null;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder;
    title?: SortOrder;
    dateStarted?: SortOrder;
    dateEnded?: SortOrder;
    content?: SortOrder;
    status?: TaskStatusOrderByWithRelationInput;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    distributor?: DistributorOrderByWithRelationInput;
    clientId?: SortOrder;
    client?: ClientOrderByWithRelationInput;
    projectId?: SortOrder;
    project?: ProjectOrderByWithRelationInput;
    userId?: SortOrder;
    user?: UserOrderByWithRelationInput;
    contactId?: SortOrder;
    contact?: ContactOrderByWithRelationInput;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TaskWhereUniqueInput = {
    id?: number;
  };

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder;
    title?: SortOrder;
    dateStarted?: SortOrder;
    dateEnded?: SortOrder;
    content?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    contactId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: TaskCountOrderByAggregateInput;
    _avg?: TaskAvgOrderByAggregateInput;
    _max?: TaskMaxOrderByAggregateInput;
    _min?: TaskMinOrderByAggregateInput;
    _sum?: TaskSumOrderByAggregateInput;
  };

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TaskScalarWhereWithAggregatesInput>;
    OR?: Enumerable<TaskScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<TaskScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    title?: StringWithAggregatesFilter | string;
    dateStarted?: DateTimeWithAggregatesFilter | Date | string;
    dateEnded?: DateTimeNullableWithAggregatesFilter | Date | string | null;
    content?: StringWithAggregatesFilter | string;
    statusId?: IntWithAggregatesFilter | number;
    distributorId?: IntNullableWithAggregatesFilter | number | null;
    clientId?: IntNullableWithAggregatesFilter | number | null;
    projectId?: IntNullableWithAggregatesFilter | number | null;
    userId?: IntWithAggregatesFilter | number;
    contactId?: IntNullableWithAggregatesFilter | number | null;
    createdAt?: DateTimeWithAggregatesFilter | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter | Date | string;
  };

  export type TaskStatusWhereInput = {
    AND?: Enumerable<TaskStatusWhereInput>;
    OR?: Enumerable<TaskStatusWhereInput>;
    NOT?: Enumerable<TaskStatusWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    tasks?: TaskListRelationFilter;
  };

  export type TaskStatusOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    tasks?: TaskOrderByRelationAggregateInput;
  };

  export type TaskStatusWhereUniqueInput = {
    id?: number;
  };

  export type TaskStatusOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    _count?: TaskStatusCountOrderByAggregateInput;
    _avg?: TaskStatusAvgOrderByAggregateInput;
    _max?: TaskStatusMaxOrderByAggregateInput;
    _min?: TaskStatusMinOrderByAggregateInput;
    _sum?: TaskStatusSumOrderByAggregateInput;
  };

  export type TaskStatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TaskStatusScalarWhereWithAggregatesInput>;
    OR?: Enumerable<TaskStatusScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<TaskStatusScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
  };

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>;
    OR?: Enumerable<CategoryWhereInput>;
    NOT?: Enumerable<CategoryWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    subcategories?: SubcategoryListRelationFilter;
    products?: ProductListRelationFilter;
  };

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    subcategories?: SubcategoryOrderByRelationAggregateInput;
    products?: ProductOrderByRelationAggregateInput;
  };

  export type CategoryWhereUniqueInput = {
    id?: number;
  };

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    _count?: CategoryCountOrderByAggregateInput;
    _avg?: CategoryAvgOrderByAggregateInput;
    _max?: CategoryMaxOrderByAggregateInput;
    _min?: CategoryMinOrderByAggregateInput;
    _sum?: CategorySumOrderByAggregateInput;
  };

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>;
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
  };

  export type SubcategoryWhereInput = {
    AND?: Enumerable<SubcategoryWhereInput>;
    OR?: Enumerable<SubcategoryWhereInput>;
    NOT?: Enumerable<SubcategoryWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    categoryId?: IntFilter | number;
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>;
    products?: ProductListRelationFilter;
  };

  export type SubcategoryOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    categoryId?: SortOrder;
    category?: CategoryOrderByWithRelationInput;
    products?: ProductOrderByRelationAggregateInput;
  };

  export type SubcategoryWhereUniqueInput = {
    id?: number;
  };

  export type SubcategoryOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    categoryId?: SortOrder;
    _count?: SubcategoryCountOrderByAggregateInput;
    _avg?: SubcategoryAvgOrderByAggregateInput;
    _max?: SubcategoryMaxOrderByAggregateInput;
    _min?: SubcategoryMinOrderByAggregateInput;
    _sum?: SubcategorySumOrderByAggregateInput;
  };

  export type SubcategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SubcategoryScalarWhereWithAggregatesInput>;
    OR?: Enumerable<SubcategoryScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<SubcategoryScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    categoryId?: IntWithAggregatesFilter | number;
  };

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>;
    OR?: Enumerable<ProductWhereInput>;
    NOT?: Enumerable<ProductWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    description?: StringNullableFilter | string | null;
    price?: FloatFilter | number;
    images?: StringNullableListFilter;
    video?: StringNullableFilter | string | null;
    instruction?: StringNullableFilter | string | null;
    properties?: PropertyListRelationFilter;
    saleContents?: SaleContentListRelationFilter;
    characteristics?: CharacteristicListRelationFilter;
    categoryId?: IntFilter | number;
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>;
    subcategoryId?: IntNullableFilter | number | null;
    subcategory?: XOR<SubcategoryRelationFilter, SubcategoryWhereInput> | null;
  };

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    images?: SortOrder;
    video?: SortOrder;
    instruction?: SortOrder;
    properties?: PropertyOrderByRelationAggregateInput;
    saleContents?: SaleContentOrderByRelationAggregateInput;
    characteristics?: CharacteristicOrderByRelationAggregateInput;
    categoryId?: SortOrder;
    category?: CategoryOrderByWithRelationInput;
    subcategoryId?: SortOrder;
    subcategory?: SubcategoryOrderByWithRelationInput;
  };

  export type ProductWhereUniqueInput = {
    id?: number;
  };

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    images?: SortOrder;
    video?: SortOrder;
    instruction?: SortOrder;
    categoryId?: SortOrder;
    subcategoryId?: SortOrder;
    _count?: ProductCountOrderByAggregateInput;
    _avg?: ProductAvgOrderByAggregateInput;
    _max?: ProductMaxOrderByAggregateInput;
    _min?: ProductMinOrderByAggregateInput;
    _sum?: ProductSumOrderByAggregateInput;
  };

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>;
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    description?: StringNullableWithAggregatesFilter | string | null;
    price?: FloatWithAggregatesFilter | number;
    images?: StringNullableListFilter;
    video?: StringNullableWithAggregatesFilter | string | null;
    instruction?: StringNullableWithAggregatesFilter | string | null;
    categoryId?: IntWithAggregatesFilter | number;
    subcategoryId?: IntNullableWithAggregatesFilter | number | null;
  };

  export type PropertyWhereInput = {
    AND?: Enumerable<PropertyWhereInput>;
    OR?: Enumerable<PropertyWhereInput>;
    NOT?: Enumerable<PropertyWhereInput>;
    id?: IntFilter | number;
    img?: StringNullableFilter | string | null;
    content?: StringFilter | string;
    productId?: IntFilter | number;
    product?: XOR<ProductRelationFilter, ProductWhereInput>;
  };

  export type PropertyOrderByWithRelationInput = {
    id?: SortOrder;
    img?: SortOrder;
    content?: SortOrder;
    productId?: SortOrder;
    product?: ProductOrderByWithRelationInput;
  };

  export type PropertyWhereUniqueInput = {
    id?: number;
  };

  export type PropertyOrderByWithAggregationInput = {
    id?: SortOrder;
    img?: SortOrder;
    content?: SortOrder;
    productId?: SortOrder;
    _count?: PropertyCountOrderByAggregateInput;
    _avg?: PropertyAvgOrderByAggregateInput;
    _max?: PropertyMaxOrderByAggregateInput;
    _min?: PropertyMinOrderByAggregateInput;
    _sum?: PropertySumOrderByAggregateInput;
  };

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PropertyScalarWhereWithAggregatesInput>;
    OR?: Enumerable<PropertyScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<PropertyScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    img?: StringNullableWithAggregatesFilter | string | null;
    content?: StringWithAggregatesFilter | string;
    productId?: IntWithAggregatesFilter | number;
  };

  export type CharacteristicWhereInput = {
    AND?: Enumerable<CharacteristicWhereInput>;
    OR?: Enumerable<CharacteristicWhereInput>;
    NOT?: Enumerable<CharacteristicWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    unit?: StringNullableFilter | string | null;
    value?: StringFilter | string;
    productId?: IntFilter | number;
    product?: XOR<ProductRelationFilter, ProductWhereInput>;
  };

  export type CharacteristicOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    unit?: SortOrder;
    value?: SortOrder;
    productId?: SortOrder;
    product?: ProductOrderByWithRelationInput;
  };

  export type CharacteristicWhereUniqueInput = {
    id?: number;
  };

  export type CharacteristicOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    unit?: SortOrder;
    value?: SortOrder;
    productId?: SortOrder;
    _count?: CharacteristicCountOrderByAggregateInput;
    _avg?: CharacteristicAvgOrderByAggregateInput;
    _max?: CharacteristicMaxOrderByAggregateInput;
    _min?: CharacteristicMinOrderByAggregateInput;
    _sum?: CharacteristicSumOrderByAggregateInput;
  };

  export type CharacteristicScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CharacteristicScalarWhereWithAggregatesInput>;
    OR?: Enumerable<CharacteristicScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<CharacteristicScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
    unit?: StringNullableWithAggregatesFilter | string | null;
    value?: StringWithAggregatesFilter | string;
    productId?: IntWithAggregatesFilter | number;
  };

  export type SaleWhereInput = {
    AND?: Enumerable<SaleWhereInput>;
    OR?: Enumerable<SaleWhereInput>;
    NOT?: Enumerable<SaleWhereInput>;
    id?: IntFilter | number;
    date?: DateTimeFilter | Date | string;
    sum?: FloatFilter | number;
    distributorId?: IntFilter | number;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput>;
    clientId?: IntFilter | number;
    client?: XOR<ClientRelationFilter, ClientWhereInput>;
    projectId?: IntFilter | number;
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>;
    userId?: IntFilter | number;
    user?: XOR<UserRelationFilter, UserWhereInput>;
    saleContent?: SaleContentListRelationFilter;
    statusId?: IntFilter | number;
    status?: XOR<SaleStatusRelationFilter, SaleStatusWhereInput>;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type SaleOrderByWithRelationInput = {
    id?: SortOrder;
    date?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    distributor?: DistributorOrderByWithRelationInput;
    clientId?: SortOrder;
    client?: ClientOrderByWithRelationInput;
    projectId?: SortOrder;
    project?: ProjectOrderByWithRelationInput;
    userId?: SortOrder;
    user?: UserOrderByWithRelationInput;
    saleContent?: SaleContentOrderByRelationAggregateInput;
    statusId?: SortOrder;
    status?: SaleStatusOrderByWithRelationInput;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type SaleWhereUniqueInput = {
    id?: number;
  };

  export type SaleOrderByWithAggregationInput = {
    id?: SortOrder;
    date?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    statusId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: SaleCountOrderByAggregateInput;
    _avg?: SaleAvgOrderByAggregateInput;
    _max?: SaleMaxOrderByAggregateInput;
    _min?: SaleMinOrderByAggregateInput;
    _sum?: SaleSumOrderByAggregateInput;
  };

  export type SaleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SaleScalarWhereWithAggregatesInput>;
    OR?: Enumerable<SaleScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<SaleScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    date?: DateTimeWithAggregatesFilter | Date | string;
    sum?: FloatWithAggregatesFilter | number;
    distributorId?: IntWithAggregatesFilter | number;
    clientId?: IntWithAggregatesFilter | number;
    projectId?: IntWithAggregatesFilter | number;
    userId?: IntWithAggregatesFilter | number;
    statusId?: IntWithAggregatesFilter | number;
    createdAt?: DateTimeWithAggregatesFilter | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter | Date | string;
  };

  export type SaleStatusWhereInput = {
    AND?: Enumerable<SaleStatusWhereInput>;
    OR?: Enumerable<SaleStatusWhereInput>;
    NOT?: Enumerable<SaleStatusWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    sales?: SaleListRelationFilter;
  };

  export type SaleStatusOrderByWithRelationInput = {
    id?: SortOrder;
    name?: SortOrder;
    sales?: SaleOrderByRelationAggregateInput;
  };

  export type SaleStatusWhereUniqueInput = {
    id?: number;
  };

  export type SaleStatusOrderByWithAggregationInput = {
    id?: SortOrder;
    name?: SortOrder;
    _count?: SaleStatusCountOrderByAggregateInput;
    _avg?: SaleStatusAvgOrderByAggregateInput;
    _max?: SaleStatusMaxOrderByAggregateInput;
    _min?: SaleStatusMinOrderByAggregateInput;
    _sum?: SaleStatusSumOrderByAggregateInput;
  };

  export type SaleStatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SaleStatusScalarWhereWithAggregatesInput>;
    OR?: Enumerable<SaleStatusScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<SaleStatusScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    name?: StringWithAggregatesFilter | string;
  };

  export type SaleContentWhereInput = {
    AND?: Enumerable<SaleContentWhereInput>;
    OR?: Enumerable<SaleContentWhereInput>;
    NOT?: Enumerable<SaleContentWhereInput>;
    id?: IntFilter | number;
    price?: FloatFilter | number;
    amount?: IntFilter | number;
    saleId?: IntFilter | number;
    sale?: XOR<SaleRelationFilter, SaleWhereInput>;
    productId?: IntFilter | number;
    product?: XOR<ProductRelationFilter, ProductWhereInput>;
  };

  export type SaleContentOrderByWithRelationInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    sale?: SaleOrderByWithRelationInput;
    productId?: SortOrder;
    product?: ProductOrderByWithRelationInput;
  };

  export type SaleContentWhereUniqueInput = {
    id?: number;
  };

  export type SaleContentOrderByWithAggregationInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    productId?: SortOrder;
    _count?: SaleContentCountOrderByAggregateInput;
    _avg?: SaleContentAvgOrderByAggregateInput;
    _max?: SaleContentMaxOrderByAggregateInput;
    _min?: SaleContentMinOrderByAggregateInput;
    _sum?: SaleContentSumOrderByAggregateInput;
  };

  export type SaleContentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SaleContentScalarWhereWithAggregatesInput>;
    OR?: Enumerable<SaleContentScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<SaleContentScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    price?: FloatWithAggregatesFilter | number;
    amount?: IntWithAggregatesFilter | number;
    saleId?: IntWithAggregatesFilter | number;
    productId?: IntWithAggregatesFilter | number;
  };

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>;
    OR?: Enumerable<UserWhereInput>;
    NOT?: Enumerable<UserWhereInput>;
    id?: IntFilter | number;
    email?: StringFilter | string;
    name?: StringNullableFilter | string | null;
    phone?: StringNullableFilter | string | null;
    description?: StringFilter | string;
    password?: StringFilter | string;
    salt?: StringFilter | string;
    activated?: BoolFilter | boolean;
    role?: EnumRoleFilter | Role;
    token?: XOR<TokenRelationFilter, TokenWhereInput> | null;
    tasks?: TaskListRelationFilter;
    sales?: SaleListRelationFilter;
    distributorId?: IntNullableFilter | number | null;
    distributor?: XOR<DistributorRelationFilter, DistributorWhereInput> | null;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type UserOrderByWithRelationInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    password?: SortOrder;
    salt?: SortOrder;
    activated?: SortOrder;
    role?: SortOrder;
    token?: TokenOrderByWithRelationInput;
    tasks?: TaskOrderByRelationAggregateInput;
    sales?: SaleOrderByRelationAggregateInput;
    distributorId?: SortOrder;
    distributor?: DistributorOrderByWithRelationInput;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserWhereUniqueInput = {
    id?: number;
    email?: string;
  };

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    password?: SortOrder;
    salt?: SortOrder;
    activated?: SortOrder;
    role?: SortOrder;
    distributorId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: UserCountOrderByAggregateInput;
    _avg?: UserAvgOrderByAggregateInput;
    _max?: UserMaxOrderByAggregateInput;
    _min?: UserMinOrderByAggregateInput;
    _sum?: UserSumOrderByAggregateInput;
  };

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>;
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    email?: StringWithAggregatesFilter | string;
    name?: StringNullableWithAggregatesFilter | string | null;
    phone?: StringNullableWithAggregatesFilter | string | null;
    description?: StringWithAggregatesFilter | string;
    password?: StringWithAggregatesFilter | string;
    salt?: StringWithAggregatesFilter | string;
    activated?: BoolWithAggregatesFilter | boolean;
    role?: EnumRoleWithAggregatesFilter | Role;
    distributorId?: IntNullableWithAggregatesFilter | number | null;
    createdAt?: DateTimeWithAggregatesFilter | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter | Date | string;
  };

  export type TokenWhereInput = {
    AND?: Enumerable<TokenWhereInput>;
    OR?: Enumerable<TokenWhereInput>;
    NOT?: Enumerable<TokenWhereInput>;
    id?: IntFilter | number;
    refreshToken?: StringFilter | string;
    user?: XOR<UserRelationFilter, UserWhereInput>;
    userId?: IntFilter | number;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder;
    refreshToken?: SortOrder;
    user?: UserOrderByWithRelationInput;
    userId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TokenWhereUniqueInput = {
    id?: number;
    userId?: number;
  };

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder;
    refreshToken?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
    _count?: TokenCountOrderByAggregateInput;
    _avg?: TokenAvgOrderByAggregateInput;
    _max?: TokenMaxOrderByAggregateInput;
    _min?: TokenMinOrderByAggregateInput;
    _sum?: TokenSumOrderByAggregateInput;
  };

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TokenScalarWhereWithAggregatesInput>;
    OR?: Enumerable<TokenScalarWhereWithAggregatesInput>;
    NOT?: Enumerable<TokenScalarWhereWithAggregatesInput>;
    id?: IntWithAggregatesFilter | number;
    refreshToken?: StringWithAggregatesFilter | string;
    userId?: IntWithAggregatesFilter | number;
    createdAt?: DateTimeWithAggregatesFilter | Date | string;
    updatedAt?: DateTimeWithAggregatesFilter | Date | string;
  };

  export type DistributorCreateInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorCreateManyInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
  };

  export type DistributorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
  };

  export type DistributorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
  };

  export type GroupCreateInput = {
    name: string;
    clients?: ClientCreateNestedManyWithoutGroupInput;
    projects?: ProjectCreateNestedManyWithoutGroupInput;
    distributor?: DistributorCreateNestedOneWithoutGroupsInput;
  };

  export type GroupUncheckedCreateInput = {
    id?: number;
    name: string;
    clients?: ClientUncheckedCreateNestedManyWithoutGroupInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutGroupInput;
    distributorId?: number | null;
  };

  export type GroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    clients?: ClientUpdateManyWithoutGroupNestedInput;
    projects?: ProjectUpdateManyWithoutGroupNestedInput;
    distributor?: DistributorUpdateOneWithoutGroupsNestedInput;
  };

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    clients?: ClientUncheckedUpdateManyWithoutGroupNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutGroupNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type GroupCreateManyInput = {
    id?: number;
    name: string;
    distributorId?: number | null;
  };

  export type GroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type ClientCreateInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributor?: DistributorCreateNestedOneWithoutClientsInput;
    group?: GroupCreateNestedOneWithoutClientsInput;
    projects?: ProjectCreateNestedManyWithoutClientInput;
    tasks?: TaskCreateNestedManyWithoutClientInput;
    contacts?: ContactCreateNestedManyWithoutClientInput;
    sales?: SaleCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    groupId?: number;
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutClientInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutClientInput;
    sales?: SaleUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneWithoutClientsNestedInput;
    group?: GroupUpdateOneRequiredWithoutClientsNestedInput;
    projects?: ProjectUpdateManyWithoutClientNestedInput;
    tasks?: TaskUpdateManyWithoutClientNestedInput;
    contacts?: ContactUpdateManyWithoutClientNestedInput;
    sales?: SaleUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    groupId?: IntFieldUpdateOperationsInput | number;
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutClientNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutClientNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type ClientCreateManyInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    groupId?: number;
  };

  export type ClientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    groupId?: IntFieldUpdateOperationsInput | number;
  };

  export type ContactCreateInput = {
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    client: ClientCreateNestedOneWithoutContactsInput;
    distributor: DistributorCreateNestedOneWithoutContactsInput;
    tasks?: TaskCreateNestedManyWithoutContactInput;
  };

  export type ContactUncheckedCreateInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    clientId: number;
    distributorId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutContactInput;
  };

  export type ContactUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    client?: ClientUpdateOneRequiredWithoutContactsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutContactsNestedInput;
    tasks?: TaskUpdateManyWithoutContactNestedInput;
  };

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    clientId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutContactNestedInput;
  };

  export type ContactCreateManyInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    clientId: number;
    distributorId: number;
  };

  export type ContactUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    clientId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
  };

  export type ProjectCreateInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    status?: ProjectStatusCreateNestedOneWithoutProjectsInput;
    distributor: DistributorCreateNestedOneWithoutProjectsInput;
    client: ClientCreateNestedOneWithoutProjectsInput;
    group: GroupCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sales?: SaleCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    clientId: number;
    groupId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sales?: SaleUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    status?: ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutProjectsNestedInput;
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput;
    group?: GroupUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sales?: SaleUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectCreateManyInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    clientId: number;
    groupId: number;
  };

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
  };

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
  };

  export type ProjectStatusCreateInput = {
    name: string;
    projects?: ProjectCreateNestedManyWithoutStatusInput;
  };

  export type ProjectStatusUncheckedCreateInput = {
    id?: number;
    name: string;
    projects?: ProjectUncheckedCreateNestedManyWithoutStatusInput;
  };

  export type ProjectStatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    projects?: ProjectUpdateManyWithoutStatusNestedInput;
  };

  export type ProjectStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    projects?: ProjectUncheckedUpdateManyWithoutStatusNestedInput;
  };

  export type ProjectStatusCreateManyInput = {
    id?: number;
    name: string;
  };

  export type ProjectStatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type ProjectStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskCreateInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    status?: TaskStatusCreateNestedOneWithoutTasksInput;
    distributor?: DistributorCreateNestedOneWithoutTasksInput;
    client?: ClientCreateNestedOneWithoutTasksInput;
    project?: ProjectCreateNestedOneWithoutTasksInput;
    user: UserCreateNestedOneWithoutTasksInput;
    contact?: ContactCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    status?: TaskStatusUpdateOneRequiredWithoutTasksNestedInput;
    distributor?: DistributorUpdateOneWithoutTasksNestedInput;
    client?: ClientUpdateOneWithoutTasksNestedInput;
    project?: ProjectUpdateOneWithoutTasksNestedInput;
    user?: UserUpdateOneRequiredWithoutTasksNestedInput;
    contact?: ContactUpdateOneWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskCreateManyInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskStatusCreateInput = {
    name: string;
    tasks?: TaskCreateNestedManyWithoutStatusInput;
  };

  export type TaskStatusUncheckedCreateInput = {
    id?: number;
    name: string;
    tasks?: TaskUncheckedCreateNestedManyWithoutStatusInput;
  };

  export type TaskStatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUpdateManyWithoutStatusNestedInput;
  };

  export type TaskStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    tasks?: TaskUncheckedUpdateManyWithoutStatusNestedInput;
  };

  export type TaskStatusCreateManyInput = {
    id?: number;
    name: string;
  };

  export type TaskStatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type CategoryCreateInput = {
    name: string;
    subcategories?: SubcategoryCreateNestedManyWithoutCategoryInput;
    products?: ProductCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryUncheckedCreateInput = {
    id?: number;
    name: string;
    subcategories?: SubcategoryUncheckedCreateNestedManyWithoutCategoryInput;
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    subcategories?: SubcategoryUpdateManyWithoutCategoryNestedInput;
    products?: ProductUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    subcategories?: SubcategoryUncheckedUpdateManyWithoutCategoryNestedInput;
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryCreateManyInput = {
    id?: number;
    name: string;
  };

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type SubcategoryCreateInput = {
    name: string;
    category: CategoryCreateNestedOneWithoutSubcategoriesInput;
    products?: ProductCreateNestedManyWithoutSubcategoryInput;
  };

  export type SubcategoryUncheckedCreateInput = {
    id?: number;
    name: string;
    categoryId: number;
    products?: ProductUncheckedCreateNestedManyWithoutSubcategoryInput;
  };

  export type SubcategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    category?: CategoryUpdateOneRequiredWithoutSubcategoriesNestedInput;
    products?: ProductUpdateManyWithoutSubcategoryNestedInput;
  };

  export type SubcategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    categoryId?: IntFieldUpdateOperationsInput | number;
    products?: ProductUncheckedUpdateManyWithoutSubcategoryNestedInput;
  };

  export type SubcategoryCreateManyInput = {
    id?: number;
    name: string;
    categoryId: number;
  };

  export type SubcategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type SubcategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    categoryId?: IntFieldUpdateOperationsInput | number;
  };

  export type ProductCreateInput = {
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicCreateNestedManyWithoutProductInput;
    category: CategoryCreateNestedOneWithoutProductsInput;
    subcategory?: SubcategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyUncheckedCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentUncheckedCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicUncheckedCreateNestedManyWithoutProductInput;
    categoryId: number;
    subcategoryId?: number | null;
  };

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUpdateManyWithoutProductNestedInput;
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput;
    subcategory?: SubcategoryUpdateOneWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUncheckedUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUncheckedUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUncheckedUpdateManyWithoutProductNestedInput;
    categoryId?: IntFieldUpdateOperationsInput | number;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type ProductCreateManyInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    categoryId: number;
    subcategoryId?: number | null;
  };

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
  };

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    categoryId?: IntFieldUpdateOperationsInput | number;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type PropertyCreateInput = {
    img?: string | null;
    content: string;
    product: ProductCreateNestedOneWithoutPropertiesInput;
  };

  export type PropertyUncheckedCreateInput = {
    id?: number;
    img?: string | null;
    content: string;
    productId: number;
  };

  export type PropertyUpdateInput = {
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
    product?: ProductUpdateOneRequiredWithoutPropertiesNestedInput;
  };

  export type PropertyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type PropertyCreateManyInput = {
    id?: number;
    img?: string | null;
    content: string;
    productId: number;
  };

  export type PropertyUpdateManyMutationInput = {
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
  };

  export type PropertyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type CharacteristicCreateInput = {
    name: string;
    unit?: string | null;
    value: string;
    product: ProductCreateNestedOneWithoutCharacteristicsInput;
  };

  export type CharacteristicUncheckedCreateInput = {
    id?: number;
    name: string;
    unit?: string | null;
    value: string;
    productId: number;
  };

  export type CharacteristicUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
    product?: ProductUpdateOneRequiredWithoutCharacteristicsNestedInput;
  };

  export type CharacteristicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type CharacteristicCreateManyInput = {
    id?: number;
    name: string;
    unit?: string | null;
    value: string;
    productId: number;
  };

  export type CharacteristicUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
  };

  export type CharacteristicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleCreateInput = {
    date: Date | string;
    sum: number;
    distributor: DistributorCreateNestedOneWithoutSalesInput;
    client: ClientCreateNestedOneWithoutSalesInput;
    project: ProjectCreateNestedOneWithoutSalesInput;
    user: UserCreateNestedOneWithoutSalesInput;
    saleContent?: SaleContentCreateNestedManyWithoutSaleInput;
    status: SaleStatusCreateNestedOneWithoutSalesInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    saleContent?: SaleContentUncheckedCreateNestedManyWithoutSaleInput;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributor?: DistributorUpdateOneRequiredWithoutSalesNestedInput;
    client?: ClientUpdateOneRequiredWithoutSalesNestedInput;
    project?: ProjectUpdateOneRequiredWithoutSalesNestedInput;
    user?: UserUpdateOneRequiredWithoutSalesNestedInput;
    saleContent?: SaleContentUpdateManyWithoutSaleNestedInput;
    status?: SaleStatusUpdateOneRequiredWithoutSalesNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    saleContent?: SaleContentUncheckedUpdateManyWithoutSaleNestedInput;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleCreateManyInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleStatusCreateInput = {
    name: string;
    sales?: SaleCreateNestedManyWithoutStatusInput;
  };

  export type SaleStatusUncheckedCreateInput = {
    id?: number;
    name: string;
    sales?: SaleUncheckedCreateNestedManyWithoutStatusInput;
  };

  export type SaleStatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string;
    sales?: SaleUpdateManyWithoutStatusNestedInput;
  };

  export type SaleStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    sales?: SaleUncheckedUpdateManyWithoutStatusNestedInput;
  };

  export type SaleStatusCreateManyInput = {
    id?: number;
    name: string;
  };

  export type SaleStatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type SaleStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type SaleContentCreateInput = {
    price: number;
    amount: number;
    sale: SaleCreateNestedOneWithoutSaleContentInput;
    product: ProductCreateNestedOneWithoutSaleContentsInput;
  };

  export type SaleContentUncheckedCreateInput = {
    id?: number;
    price: number;
    amount: number;
    saleId: number;
    productId: number;
  };

  export type SaleContentUpdateInput = {
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    sale?: SaleUpdateOneRequiredWithoutSaleContentNestedInput;
    product?: ProductUpdateOneRequiredWithoutSaleContentsNestedInput;
  };

  export type SaleContentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    saleId?: IntFieldUpdateOperationsInput | number;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleContentCreateManyInput = {
    id?: number;
    price: number;
    amount: number;
    saleId: number;
    productId: number;
  };

  export type SaleContentUpdateManyMutationInput = {
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleContentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    saleId?: IntFieldUpdateOperationsInput | number;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type UserCreateInput = {
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenCreateNestedOneWithoutUserInput;
    tasks?: TaskCreateNestedManyWithoutUserInput;
    sales?: SaleCreateNestedManyWithoutUserInput;
    distributor?: DistributorCreateNestedOneWithoutUsersInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUncheckedCreateInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenUncheckedCreateNestedOneWithoutUserInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput;
    sales?: SaleUncheckedCreateNestedManyWithoutUserInput;
    distributorId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUpdateOneWithoutUserNestedInput;
    tasks?: TaskUpdateManyWithoutUserNestedInput;
    sales?: SaleUpdateManyWithoutUserNestedInput;
    distributor?: DistributorUpdateOneWithoutUsersNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUncheckedUpdateOneWithoutUserNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutUserNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserCreateManyInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    distributorId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TokenCreateInput = {
    refreshToken: string;
    user: UserCreateNestedOneWithoutTokenInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TokenUncheckedCreateInput = {
    id?: number;
    refreshToken: string;
    userId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TokenUpdateInput = {
    refreshToken?: StringFieldUpdateOperationsInput | string;
    user?: UserUpdateOneRequiredWithoutTokenNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number;
    refreshToken?: StringFieldUpdateOperationsInput | string;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TokenCreateManyInput = {
    id?: number;
    refreshToken: string;
    userId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TokenUpdateManyMutationInput = {
    refreshToken?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number;
    refreshToken?: StringFieldUpdateOperationsInput | string;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type IntFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntFilter | number;
  };

  export type StringFilter = {
    equals?: string;
    in?: Enumerable<string>;
    notIn?: Enumerable<string>;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    mode?: QueryMode;
    not?: NestedStringFilter | string;
  };

  export type StringNullableFilter = {
    equals?: string | null;
    in?: Enumerable<string> | null;
    notIn?: Enumerable<string> | null;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    mode?: QueryMode;
    not?: NestedStringNullableFilter | string | null;
  };

  export type FloatFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatFilter | number;
  };

  export type ClientListRelationFilter = {
    every?: ClientWhereInput;
    some?: ClientWhereInput;
    none?: ClientWhereInput;
  };

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput;
    some?: ProjectWhereInput;
    none?: ProjectWhereInput;
  };

  export type SaleListRelationFilter = {
    every?: SaleWhereInput;
    some?: SaleWhereInput;
    none?: SaleWhereInput;
  };

  export type TaskListRelationFilter = {
    every?: TaskWhereInput;
    some?: TaskWhereInput;
    none?: TaskWhereInput;
  };

  export type ContactListRelationFilter = {
    every?: ContactWhereInput;
    some?: ContactWhereInput;
    none?: ContactWhereInput;
  };

  export type UserListRelationFilter = {
    every?: UserWhereInput;
    some?: UserWhereInput;
    none?: UserWhereInput;
  };

  export type GroupListRelationFilter = {
    every?: GroupWhereInput;
    some?: GroupWhereInput;
    none?: GroupWhereInput;
  };

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type SaleOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type DistributorCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    discount?: SortOrder;
  };

  export type DistributorAvgOrderByAggregateInput = {
    id?: SortOrder;
    discount?: SortOrder;
  };

  export type DistributorMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    discount?: SortOrder;
  };

  export type DistributorMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    discount?: SortOrder;
  };

  export type DistributorSumOrderByAggregateInput = {
    id?: SortOrder;
    discount?: SortOrder;
  };

  export type IntWithAggregatesFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntWithAggregatesFilter | number;
    _count?: NestedIntFilter;
    _avg?: NestedFloatFilter;
    _sum?: NestedIntFilter;
    _min?: NestedIntFilter;
    _max?: NestedIntFilter;
  };

  export type StringWithAggregatesFilter = {
    equals?: string;
    in?: Enumerable<string>;
    notIn?: Enumerable<string>;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    mode?: QueryMode;
    not?: NestedStringWithAggregatesFilter | string;
    _count?: NestedIntFilter;
    _min?: NestedStringFilter;
    _max?: NestedStringFilter;
  };

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null;
    in?: Enumerable<string> | null;
    notIn?: Enumerable<string> | null;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    mode?: QueryMode;
    not?: NestedStringNullableWithAggregatesFilter | string | null;
    _count?: NestedIntNullableFilter;
    _min?: NestedStringNullableFilter;
    _max?: NestedStringNullableFilter;
  };

  export type FloatWithAggregatesFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatWithAggregatesFilter | number;
    _count?: NestedIntFilter;
    _avg?: NestedFloatFilter;
    _sum?: NestedFloatFilter;
    _min?: NestedFloatFilter;
    _max?: NestedFloatFilter;
  };

  export type DistributorRelationFilter = {
    is?: DistributorWhereInput;
    isNot?: DistributorWhereInput;
  };

  export type IntNullableFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntNullableFilter | number | null;
  };

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    distributorId?: SortOrder;
  };

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder;
    distributorId?: SortOrder;
  };

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    distributorId?: SortOrder;
  };

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    distributorId?: SortOrder;
  };

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder;
    distributorId?: SortOrder;
  };

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntNullableWithAggregatesFilter | number | null;
    _count?: NestedIntNullableFilter;
    _avg?: NestedFloatNullableFilter;
    _sum?: NestedIntNullableFilter;
    _min?: NestedIntNullableFilter;
    _max?: NestedIntNullableFilter;
  };

  export type GroupRelationFilter = {
    is?: GroupWhereInput;
    isNot?: GroupWhereInput;
  };

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    distributorId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder;
    distributorId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    distributorId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    fullName?: SortOrder;
    legalAddress?: SortOrder;
    actualAddress?: SortOrder;
    inn?: SortOrder;
    kpp?: SortOrder;
    ogrn?: SortOrder;
    manager?: SortOrder;
    website?: SortOrder;
    phone?: SortOrder;
    email?: SortOrder;
    info?: SortOrder;
    distributorId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder;
    distributorId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ClientRelationFilter = {
    is?: ClientWhereInput;
    isNot?: ClientWhereInput;
  };

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    email?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    clientId?: SortOrder;
    distributorId?: SortOrder;
  };

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder;
    clientId?: SortOrder;
    distributorId?: SortOrder;
  };

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    email?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    clientId?: SortOrder;
    distributorId?: SortOrder;
  };

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    email?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    clientId?: SortOrder;
    distributorId?: SortOrder;
  };

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder;
    clientId?: SortOrder;
    distributorId?: SortOrder;
  };

  export type FloatNullableFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatNullableFilter | number | null;
  };

  export type DateTimeFilter = {
    equals?: Date | string;
    in?: Enumerable<Date> | Enumerable<string>;
    notIn?: Enumerable<Date> | Enumerable<string>;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeFilter | Date | string;
  };

  export type DateTimeNullableFilter = {
    equals?: Date | string | null;
    in?: Enumerable<Date> | Enumerable<string> | null;
    notIn?: Enumerable<Date> | Enumerable<string> | null;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeNullableFilter | Date | string | null;
  };

  export type ProjectStatusRelationFilter = {
    is?: ProjectStatusWhereInput;
    isNot?: ProjectStatusWhereInput;
  };

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    discount?: SortOrder;
    startDate?: SortOrder;
    finishDate?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder;
    discount?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    discount?: SortOrder;
    startDate?: SortOrder;
    finishDate?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    discount?: SortOrder;
    startDate?: SortOrder;
    finishDate?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    groupId?: SortOrder;
  };

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder;
    discount?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    groupId?: SortOrder;
  };

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatNullableWithAggregatesFilter | number | null;
    _count?: NestedIntNullableFilter;
    _avg?: NestedFloatNullableFilter;
    _sum?: NestedFloatNullableFilter;
    _min?: NestedFloatNullableFilter;
    _max?: NestedFloatNullableFilter;
  };

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string;
    in?: Enumerable<Date> | Enumerable<string>;
    notIn?: Enumerable<Date> | Enumerable<string>;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeWithAggregatesFilter | Date | string;
    _count?: NestedIntFilter;
    _min?: NestedDateTimeFilter;
    _max?: NestedDateTimeFilter;
  };

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null;
    in?: Enumerable<Date> | Enumerable<string> | null;
    notIn?: Enumerable<Date> | Enumerable<string> | null;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null;
    _count?: NestedIntNullableFilter;
    _min?: NestedDateTimeNullableFilter;
    _max?: NestedDateTimeNullableFilter;
  };

  export type ProjectStatusCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type ProjectStatusAvgOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type ProjectStatusMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type ProjectStatusMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type ProjectStatusSumOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type TaskStatusRelationFilter = {
    is?: TaskStatusWhereInput;
    isNot?: TaskStatusWhereInput;
  };

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput | null;
    isNot?: ProjectWhereInput | null;
  };

  export type UserRelationFilter = {
    is?: UserWhereInput;
    isNot?: UserWhereInput;
  };

  export type ContactRelationFilter = {
    is?: ContactWhereInput | null;
    isNot?: ContactWhereInput | null;
  };

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    dateStarted?: SortOrder;
    dateEnded?: SortOrder;
    content?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    contactId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TaskAvgOrderByAggregateInput = {
    id?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    contactId?: SortOrder;
  };

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    dateStarted?: SortOrder;
    dateEnded?: SortOrder;
    content?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    contactId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder;
    title?: SortOrder;
    dateStarted?: SortOrder;
    dateEnded?: SortOrder;
    content?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    contactId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TaskSumOrderByAggregateInput = {
    id?: SortOrder;
    statusId?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    contactId?: SortOrder;
  };

  export type TaskStatusCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type TaskStatusAvgOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type TaskStatusMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type TaskStatusMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type TaskStatusSumOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type SubcategoryListRelationFilter = {
    every?: SubcategoryWhereInput;
    some?: SubcategoryWhereInput;
    none?: SubcategoryWhereInput;
  };

  export type ProductListRelationFilter = {
    every?: ProductWhereInput;
    some?: ProductWhereInput;
    none?: ProductWhereInput;
  };

  export type SubcategoryOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput;
    isNot?: CategoryWhereInput;
  };

  export type SubcategoryCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    categoryId?: SortOrder;
  };

  export type SubcategoryAvgOrderByAggregateInput = {
    id?: SortOrder;
    categoryId?: SortOrder;
  };

  export type SubcategoryMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    categoryId?: SortOrder;
  };

  export type SubcategoryMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    categoryId?: SortOrder;
  };

  export type SubcategorySumOrderByAggregateInput = {
    id?: SortOrder;
    categoryId?: SortOrder;
  };

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null;
    has?: string | null;
    hasEvery?: Enumerable<string>;
    hasSome?: Enumerable<string>;
    isEmpty?: boolean;
  };

  export type PropertyListRelationFilter = {
    every?: PropertyWhereInput;
    some?: PropertyWhereInput;
    none?: PropertyWhereInput;
  };

  export type SaleContentListRelationFilter = {
    every?: SaleContentWhereInput;
    some?: SaleContentWhereInput;
    none?: SaleContentWhereInput;
  };

  export type CharacteristicListRelationFilter = {
    every?: CharacteristicWhereInput;
    some?: CharacteristicWhereInput;
    none?: CharacteristicWhereInput;
  };

  export type SubcategoryRelationFilter = {
    is?: SubcategoryWhereInput | null;
    isNot?: SubcategoryWhereInput | null;
  };

  export type PropertyOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type SaleContentOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type CharacteristicOrderByRelationAggregateInput = {
    _count?: SortOrder;
  };

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    images?: SortOrder;
    video?: SortOrder;
    instruction?: SortOrder;
    categoryId?: SortOrder;
    subcategoryId?: SortOrder;
  };

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    categoryId?: SortOrder;
    subcategoryId?: SortOrder;
  };

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    video?: SortOrder;
    instruction?: SortOrder;
    categoryId?: SortOrder;
    subcategoryId?: SortOrder;
  };

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    description?: SortOrder;
    price?: SortOrder;
    video?: SortOrder;
    instruction?: SortOrder;
    categoryId?: SortOrder;
    subcategoryId?: SortOrder;
  };

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    categoryId?: SortOrder;
    subcategoryId?: SortOrder;
  };

  export type ProductRelationFilter = {
    is?: ProductWhereInput;
    isNot?: ProductWhereInput;
  };

  export type PropertyCountOrderByAggregateInput = {
    id?: SortOrder;
    img?: SortOrder;
    content?: SortOrder;
    productId?: SortOrder;
  };

  export type PropertyAvgOrderByAggregateInput = {
    id?: SortOrder;
    productId?: SortOrder;
  };

  export type PropertyMaxOrderByAggregateInput = {
    id?: SortOrder;
    img?: SortOrder;
    content?: SortOrder;
    productId?: SortOrder;
  };

  export type PropertyMinOrderByAggregateInput = {
    id?: SortOrder;
    img?: SortOrder;
    content?: SortOrder;
    productId?: SortOrder;
  };

  export type PropertySumOrderByAggregateInput = {
    id?: SortOrder;
    productId?: SortOrder;
  };

  export type CharacteristicCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    unit?: SortOrder;
    value?: SortOrder;
    productId?: SortOrder;
  };

  export type CharacteristicAvgOrderByAggregateInput = {
    id?: SortOrder;
    productId?: SortOrder;
  };

  export type CharacteristicMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    unit?: SortOrder;
    value?: SortOrder;
    productId?: SortOrder;
  };

  export type CharacteristicMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
    unit?: SortOrder;
    value?: SortOrder;
    productId?: SortOrder;
  };

  export type CharacteristicSumOrderByAggregateInput = {
    id?: SortOrder;
    productId?: SortOrder;
  };

  export type SaleStatusRelationFilter = {
    is?: SaleStatusWhereInput;
    isNot?: SaleStatusWhereInput;
  };

  export type SaleCountOrderByAggregateInput = {
    id?: SortOrder;
    date?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    statusId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type SaleAvgOrderByAggregateInput = {
    id?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    statusId?: SortOrder;
  };

  export type SaleMaxOrderByAggregateInput = {
    id?: SortOrder;
    date?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    statusId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type SaleMinOrderByAggregateInput = {
    id?: SortOrder;
    date?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    statusId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type SaleSumOrderByAggregateInput = {
    id?: SortOrder;
    sum?: SortOrder;
    distributorId?: SortOrder;
    clientId?: SortOrder;
    projectId?: SortOrder;
    userId?: SortOrder;
    statusId?: SortOrder;
  };

  export type SaleStatusCountOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type SaleStatusAvgOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type SaleStatusMaxOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type SaleStatusMinOrderByAggregateInput = {
    id?: SortOrder;
    name?: SortOrder;
  };

  export type SaleStatusSumOrderByAggregateInput = {
    id?: SortOrder;
  };

  export type SaleRelationFilter = {
    is?: SaleWhereInput;
    isNot?: SaleWhereInput;
  };

  export type SaleContentCountOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    productId?: SortOrder;
  };

  export type SaleContentAvgOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    productId?: SortOrder;
  };

  export type SaleContentMaxOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    productId?: SortOrder;
  };

  export type SaleContentMinOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    productId?: SortOrder;
  };

  export type SaleContentSumOrderByAggregateInput = {
    id?: SortOrder;
    price?: SortOrder;
    amount?: SortOrder;
    saleId?: SortOrder;
    productId?: SortOrder;
  };

  export type BoolFilter = {
    equals?: boolean;
    not?: NestedBoolFilter | boolean;
  };

  export type EnumRoleFilter = {
    equals?: Role;
    in?: Enumerable<Role>;
    notIn?: Enumerable<Role>;
    not?: NestedEnumRoleFilter | Role;
  };

  export type TokenRelationFilter = {
    is?: TokenWhereInput | null;
    isNot?: TokenWhereInput | null;
  };

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    password?: SortOrder;
    salt?: SortOrder;
    activated?: SortOrder;
    role?: SortOrder;
    distributorId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder;
    distributorId?: SortOrder;
  };

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    password?: SortOrder;
    salt?: SortOrder;
    activated?: SortOrder;
    role?: SortOrder;
    distributorId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder;
    email?: SortOrder;
    name?: SortOrder;
    phone?: SortOrder;
    description?: SortOrder;
    password?: SortOrder;
    salt?: SortOrder;
    activated?: SortOrder;
    role?: SortOrder;
    distributorId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder;
    distributorId?: SortOrder;
  };

  export type BoolWithAggregatesFilter = {
    equals?: boolean;
    not?: NestedBoolWithAggregatesFilter | boolean;
    _count?: NestedIntFilter;
    _min?: NestedBoolFilter;
    _max?: NestedBoolFilter;
  };

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role;
    in?: Enumerable<Role>;
    notIn?: Enumerable<Role>;
    not?: NestedEnumRoleWithAggregatesFilter | Role;
    _count?: NestedIntFilter;
    _min?: NestedEnumRoleFilter;
    _max?: NestedEnumRoleFilter;
  };

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder;
    refreshToken?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
  };

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder;
    refreshToken?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder;
    refreshToken?: SortOrder;
    userId?: SortOrder;
    createdAt?: SortOrder;
    updatedAt?: SortOrder;
  };

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder;
    userId?: SortOrder;
  };

  export type ClientCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutDistributorInput>,
      Enumerable<ClientUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutDistributorInput>;
    createMany?: ClientCreateManyDistributorInputEnvelope;
    connect?: Enumerable<ClientWhereUniqueInput>;
  };

  export type ProjectCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutDistributorInput>,
      Enumerable<ProjectUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutDistributorInput>;
    createMany?: ProjectCreateManyDistributorInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type SaleCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutDistributorInput>,
      Enumerable<SaleUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutDistributorInput>;
    createMany?: SaleCreateManyDistributorInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type TaskCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutDistributorInput>,
      Enumerable<TaskUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutDistributorInput>;
    createMany?: TaskCreateManyDistributorInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type ContactCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutDistributorInput>,
      Enumerable<ContactUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutDistributorInput>;
    createMany?: ContactCreateManyDistributorInputEnvelope;
    connect?: Enumerable<ContactWhereUniqueInput>;
  };

  export type UserCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<UserCreateWithoutDistributorInput>,
      Enumerable<UserUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDistributorInput>;
    createMany?: UserCreateManyDistributorInputEnvelope;
    connect?: Enumerable<UserWhereUniqueInput>;
  };

  export type GroupCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<GroupCreateWithoutDistributorInput>,
      Enumerable<GroupUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutDistributorInput>;
    createMany?: GroupCreateManyDistributorInputEnvelope;
    connect?: Enumerable<GroupWhereUniqueInput>;
  };

  export type ClientUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutDistributorInput>,
      Enumerable<ClientUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutDistributorInput>;
    createMany?: ClientCreateManyDistributorInputEnvelope;
    connect?: Enumerable<ClientWhereUniqueInput>;
  };

  export type ProjectUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutDistributorInput>,
      Enumerable<ProjectUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutDistributorInput>;
    createMany?: ProjectCreateManyDistributorInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type SaleUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutDistributorInput>,
      Enumerable<SaleUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutDistributorInput>;
    createMany?: SaleCreateManyDistributorInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type TaskUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutDistributorInput>,
      Enumerable<TaskUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutDistributorInput>;
    createMany?: TaskCreateManyDistributorInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type ContactUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutDistributorInput>,
      Enumerable<ContactUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutDistributorInput>;
    createMany?: ContactCreateManyDistributorInputEnvelope;
    connect?: Enumerable<ContactWhereUniqueInput>;
  };

  export type UserUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<UserCreateWithoutDistributorInput>,
      Enumerable<UserUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDistributorInput>;
    createMany?: UserCreateManyDistributorInputEnvelope;
    connect?: Enumerable<UserWhereUniqueInput>;
  };

  export type GroupUncheckedCreateNestedManyWithoutDistributorInput = {
    create?: XOR<
      Enumerable<GroupCreateWithoutDistributorInput>,
      Enumerable<GroupUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutDistributorInput>;
    createMany?: GroupCreateManyDistributorInputEnvelope;
    connect?: Enumerable<GroupWhereUniqueInput>;
  };

  export type StringFieldUpdateOperationsInput = {
    set?: string;
  };

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null;
  };

  export type FloatFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type ClientUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutDistributorInput>,
      Enumerable<ClientUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<ClientUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: ClientCreateManyDistributorInputEnvelope;
    set?: Enumerable<ClientWhereUniqueInput>;
    disconnect?: Enumerable<ClientWhereUniqueInput>;
    delete?: Enumerable<ClientWhereUniqueInput>;
    connect?: Enumerable<ClientWhereUniqueInput>;
    update?: Enumerable<ClientUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<ClientUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<ClientScalarWhereInput>;
  };

  export type ProjectUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutDistributorInput>,
      Enumerable<ProjectUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: ProjectCreateManyDistributorInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type SaleUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutDistributorInput>,
      Enumerable<SaleUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: SaleCreateManyDistributorInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type TaskUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutDistributorInput>,
      Enumerable<TaskUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: TaskCreateManyDistributorInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type ContactUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutDistributorInput>,
      Enumerable<ContactUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: ContactCreateManyDistributorInputEnvelope;
    set?: Enumerable<ContactWhereUniqueInput>;
    disconnect?: Enumerable<ContactWhereUniqueInput>;
    delete?: Enumerable<ContactWhereUniqueInput>;
    connect?: Enumerable<ContactWhereUniqueInput>;
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<ContactScalarWhereInput>;
  };

  export type UserUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<UserCreateWithoutDistributorInput>,
      Enumerable<UserUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: UserCreateManyDistributorInputEnvelope;
    set?: Enumerable<UserWhereUniqueInput>;
    disconnect?: Enumerable<UserWhereUniqueInput>;
    delete?: Enumerable<UserWhereUniqueInput>;
    connect?: Enumerable<UserWhereUniqueInput>;
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<UserScalarWhereInput>;
  };

  export type GroupUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<GroupCreateWithoutDistributorInput>,
      Enumerable<GroupUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<GroupUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: GroupCreateManyDistributorInputEnvelope;
    set?: Enumerable<GroupWhereUniqueInput>;
    disconnect?: Enumerable<GroupWhereUniqueInput>;
    delete?: Enumerable<GroupWhereUniqueInput>;
    connect?: Enumerable<GroupWhereUniqueInput>;
    update?: Enumerable<GroupUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<GroupUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<GroupScalarWhereInput>;
  };

  export type IntFieldUpdateOperationsInput = {
    set?: number;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type ClientUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutDistributorInput>,
      Enumerable<ClientUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<ClientUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: ClientCreateManyDistributorInputEnvelope;
    set?: Enumerable<ClientWhereUniqueInput>;
    disconnect?: Enumerable<ClientWhereUniqueInput>;
    delete?: Enumerable<ClientWhereUniqueInput>;
    connect?: Enumerable<ClientWhereUniqueInput>;
    update?: Enumerable<ClientUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<ClientUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<ClientScalarWhereInput>;
  };

  export type ProjectUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutDistributorInput>,
      Enumerable<ProjectUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: ProjectCreateManyDistributorInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type SaleUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutDistributorInput>,
      Enumerable<SaleUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: SaleCreateManyDistributorInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type TaskUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutDistributorInput>,
      Enumerable<TaskUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: TaskCreateManyDistributorInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type ContactUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutDistributorInput>,
      Enumerable<ContactUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: ContactCreateManyDistributorInputEnvelope;
    set?: Enumerable<ContactWhereUniqueInput>;
    disconnect?: Enumerable<ContactWhereUniqueInput>;
    delete?: Enumerable<ContactWhereUniqueInput>;
    connect?: Enumerable<ContactWhereUniqueInput>;
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<ContactScalarWhereInput>;
  };

  export type UserUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<UserCreateWithoutDistributorInput>,
      Enumerable<UserUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: UserCreateManyDistributorInputEnvelope;
    set?: Enumerable<UserWhereUniqueInput>;
    disconnect?: Enumerable<UserWhereUniqueInput>;
    delete?: Enumerable<UserWhereUniqueInput>;
    connect?: Enumerable<UserWhereUniqueInput>;
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<UserScalarWhereInput>;
  };

  export type GroupUncheckedUpdateManyWithoutDistributorNestedInput = {
    create?: XOR<
      Enumerable<GroupCreateWithoutDistributorInput>,
      Enumerable<GroupUncheckedCreateWithoutDistributorInput>
    >;
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutDistributorInput>;
    upsert?: Enumerable<GroupUpsertWithWhereUniqueWithoutDistributorInput>;
    createMany?: GroupCreateManyDistributorInputEnvelope;
    set?: Enumerable<GroupWhereUniqueInput>;
    disconnect?: Enumerable<GroupWhereUniqueInput>;
    delete?: Enumerable<GroupWhereUniqueInput>;
    connect?: Enumerable<GroupWhereUniqueInput>;
    update?: Enumerable<GroupUpdateWithWhereUniqueWithoutDistributorInput>;
    updateMany?: Enumerable<GroupUpdateManyWithWhereWithoutDistributorInput>;
    deleteMany?: Enumerable<GroupScalarWhereInput>;
  };

  export type ClientCreateNestedManyWithoutGroupInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutGroupInput>,
      Enumerable<ClientUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutGroupInput>;
    createMany?: ClientCreateManyGroupInputEnvelope;
    connect?: Enumerable<ClientWhereUniqueInput>;
  };

  export type ProjectCreateNestedManyWithoutGroupInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutGroupInput>,
      Enumerable<ProjectUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutGroupInput>;
    createMany?: ProjectCreateManyGroupInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type DistributorCreateNestedOneWithoutGroupsInput = {
    create?: XOR<
      DistributorCreateWithoutGroupsInput,
      DistributorUncheckedCreateWithoutGroupsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutGroupsInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type ClientUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutGroupInput>,
      Enumerable<ClientUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutGroupInput>;
    createMany?: ClientCreateManyGroupInputEnvelope;
    connect?: Enumerable<ClientWhereUniqueInput>;
  };

  export type ProjectUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutGroupInput>,
      Enumerable<ProjectUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutGroupInput>;
    createMany?: ProjectCreateManyGroupInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type ClientUpdateManyWithoutGroupNestedInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutGroupInput>,
      Enumerable<ClientUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutGroupInput>;
    upsert?: Enumerable<ClientUpsertWithWhereUniqueWithoutGroupInput>;
    createMany?: ClientCreateManyGroupInputEnvelope;
    set?: Enumerable<ClientWhereUniqueInput>;
    disconnect?: Enumerable<ClientWhereUniqueInput>;
    delete?: Enumerable<ClientWhereUniqueInput>;
    connect?: Enumerable<ClientWhereUniqueInput>;
    update?: Enumerable<ClientUpdateWithWhereUniqueWithoutGroupInput>;
    updateMany?: Enumerable<ClientUpdateManyWithWhereWithoutGroupInput>;
    deleteMany?: Enumerable<ClientScalarWhereInput>;
  };

  export type ProjectUpdateManyWithoutGroupNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutGroupInput>,
      Enumerable<ProjectUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutGroupInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutGroupInput>;
    createMany?: ProjectCreateManyGroupInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutGroupInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutGroupInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type DistributorUpdateOneWithoutGroupsNestedInput = {
    create?: XOR<
      DistributorCreateWithoutGroupsInput,
      DistributorUncheckedCreateWithoutGroupsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutGroupsInput;
    upsert?: DistributorUpsertWithoutGroupsInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutGroupsInput,
      DistributorUncheckedUpdateWithoutGroupsInput
    >;
  };

  export type ClientUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<
      Enumerable<ClientCreateWithoutGroupInput>,
      Enumerable<ClientUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ClientCreateOrConnectWithoutGroupInput>;
    upsert?: Enumerable<ClientUpsertWithWhereUniqueWithoutGroupInput>;
    createMany?: ClientCreateManyGroupInputEnvelope;
    set?: Enumerable<ClientWhereUniqueInput>;
    disconnect?: Enumerable<ClientWhereUniqueInput>;
    delete?: Enumerable<ClientWhereUniqueInput>;
    connect?: Enumerable<ClientWhereUniqueInput>;
    update?: Enumerable<ClientUpdateWithWhereUniqueWithoutGroupInput>;
    updateMany?: Enumerable<ClientUpdateManyWithWhereWithoutGroupInput>;
    deleteMany?: Enumerable<ClientScalarWhereInput>;
  };

  export type ProjectUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutGroupInput>,
      Enumerable<ProjectUncheckedCreateWithoutGroupInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutGroupInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutGroupInput>;
    createMany?: ProjectCreateManyGroupInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutGroupInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutGroupInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type DistributorCreateNestedOneWithoutClientsInput = {
    create?: XOR<
      DistributorCreateWithoutClientsInput,
      DistributorUncheckedCreateWithoutClientsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutClientsInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type GroupCreateNestedOneWithoutClientsInput = {
    create?: XOR<
      GroupCreateWithoutClientsInput,
      GroupUncheckedCreateWithoutClientsInput
    >;
    connectOrCreate?: GroupCreateOrConnectWithoutClientsInput;
    connect?: GroupWhereUniqueInput;
  };

  export type ProjectCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutClientInput>,
      Enumerable<ProjectUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutClientInput>;
    createMany?: ProjectCreateManyClientInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type TaskCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutClientInput>,
      Enumerable<TaskUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutClientInput>;
    createMany?: TaskCreateManyClientInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type ContactCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutClientInput>,
      Enumerable<ContactUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutClientInput>;
    createMany?: ContactCreateManyClientInputEnvelope;
    connect?: Enumerable<ContactWhereUniqueInput>;
  };

  export type SaleCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutClientInput>,
      Enumerable<SaleUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutClientInput>;
    createMany?: SaleCreateManyClientInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type ProjectUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutClientInput>,
      Enumerable<ProjectUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutClientInput>;
    createMany?: ProjectCreateManyClientInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type TaskUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutClientInput>,
      Enumerable<TaskUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutClientInput>;
    createMany?: TaskCreateManyClientInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type ContactUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutClientInput>,
      Enumerable<ContactUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutClientInput>;
    createMany?: ContactCreateManyClientInputEnvelope;
    connect?: Enumerable<ContactWhereUniqueInput>;
  };

  export type SaleUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutClientInput>,
      Enumerable<SaleUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutClientInput>;
    createMany?: SaleCreateManyClientInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type DistributorUpdateOneWithoutClientsNestedInput = {
    create?: XOR<
      DistributorCreateWithoutClientsInput,
      DistributorUncheckedCreateWithoutClientsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutClientsInput;
    upsert?: DistributorUpsertWithoutClientsInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutClientsInput,
      DistributorUncheckedUpdateWithoutClientsInput
    >;
  };

  export type GroupUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<
      GroupCreateWithoutClientsInput,
      GroupUncheckedCreateWithoutClientsInput
    >;
    connectOrCreate?: GroupCreateOrConnectWithoutClientsInput;
    upsert?: GroupUpsertWithoutClientsInput;
    connect?: GroupWhereUniqueInput;
    update?: XOR<
      GroupUpdateWithoutClientsInput,
      GroupUncheckedUpdateWithoutClientsInput
    >;
  };

  export type ProjectUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutClientInput>,
      Enumerable<ProjectUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: ProjectCreateManyClientInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type TaskUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutClientInput>,
      Enumerable<TaskUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: TaskCreateManyClientInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type ContactUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutClientInput>,
      Enumerable<ContactUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: ContactCreateManyClientInputEnvelope;
    set?: Enumerable<ContactWhereUniqueInput>;
    disconnect?: Enumerable<ContactWhereUniqueInput>;
    delete?: Enumerable<ContactWhereUniqueInput>;
    connect?: Enumerable<ContactWhereUniqueInput>;
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<ContactScalarWhereInput>;
  };

  export type SaleUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutClientInput>,
      Enumerable<SaleUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: SaleCreateManyClientInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type ProjectUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutClientInput>,
      Enumerable<ProjectUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: ProjectCreateManyClientInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type TaskUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutClientInput>,
      Enumerable<TaskUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: TaskCreateManyClientInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type ContactUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<ContactCreateWithoutClientInput>,
      Enumerable<ContactUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: ContactCreateManyClientInputEnvelope;
    set?: Enumerable<ContactWhereUniqueInput>;
    disconnect?: Enumerable<ContactWhereUniqueInput>;
    delete?: Enumerable<ContactWhereUniqueInput>;
    connect?: Enumerable<ContactWhereUniqueInput>;
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<ContactScalarWhereInput>;
  };

  export type SaleUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutClientInput>,
      Enumerable<SaleUncheckedCreateWithoutClientInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutClientInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutClientInput>;
    createMany?: SaleCreateManyClientInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutClientInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutClientInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type ClientCreateNestedOneWithoutContactsInput = {
    create?: XOR<
      ClientCreateWithoutContactsInput,
      ClientUncheckedCreateWithoutContactsInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutContactsInput;
    connect?: ClientWhereUniqueInput;
  };

  export type DistributorCreateNestedOneWithoutContactsInput = {
    create?: XOR<
      DistributorCreateWithoutContactsInput,
      DistributorUncheckedCreateWithoutContactsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutContactsInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type TaskCreateNestedManyWithoutContactInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutContactInput>,
      Enumerable<TaskUncheckedCreateWithoutContactInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutContactInput>;
    createMany?: TaskCreateManyContactInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type TaskUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutContactInput>,
      Enumerable<TaskUncheckedCreateWithoutContactInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutContactInput>;
    createMany?: TaskCreateManyContactInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type ClientUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<
      ClientCreateWithoutContactsInput,
      ClientUncheckedCreateWithoutContactsInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutContactsInput;
    upsert?: ClientUpsertWithoutContactsInput;
    connect?: ClientWhereUniqueInput;
    update?: XOR<
      ClientUpdateWithoutContactsInput,
      ClientUncheckedUpdateWithoutContactsInput
    >;
  };

  export type DistributorUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<
      DistributorCreateWithoutContactsInput,
      DistributorUncheckedCreateWithoutContactsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutContactsInput;
    upsert?: DistributorUpsertWithoutContactsInput;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutContactsInput,
      DistributorUncheckedUpdateWithoutContactsInput
    >;
  };

  export type TaskUpdateManyWithoutContactNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutContactInput>,
      Enumerable<TaskUncheckedCreateWithoutContactInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutContactInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutContactInput>;
    createMany?: TaskCreateManyContactInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutContactInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutContactInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type TaskUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutContactInput>,
      Enumerable<TaskUncheckedCreateWithoutContactInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutContactInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutContactInput>;
    createMany?: TaskCreateManyContactInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutContactInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutContactInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type ProjectStatusCreateNestedOneWithoutProjectsInput = {
    create?: XOR<
      ProjectStatusCreateWithoutProjectsInput,
      ProjectStatusUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: ProjectStatusCreateOrConnectWithoutProjectsInput;
    connect?: ProjectStatusWhereUniqueInput;
  };

  export type DistributorCreateNestedOneWithoutProjectsInput = {
    create?: XOR<
      DistributorCreateWithoutProjectsInput,
      DistributorUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutProjectsInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type ClientCreateNestedOneWithoutProjectsInput = {
    create?: XOR<
      ClientCreateWithoutProjectsInput,
      ClientUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutProjectsInput;
    connect?: ClientWhereUniqueInput;
  };

  export type GroupCreateNestedOneWithoutProjectsInput = {
    create?: XOR<
      GroupCreateWithoutProjectsInput,
      GroupUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: GroupCreateOrConnectWithoutProjectsInput;
    connect?: GroupWhereUniqueInput;
  };

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutProjectInput>,
      Enumerable<TaskUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutProjectInput>;
    createMany?: TaskCreateManyProjectInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type SaleCreateNestedManyWithoutProjectInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutProjectInput>,
      Enumerable<SaleUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutProjectInput>;
    createMany?: SaleCreateManyProjectInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutProjectInput>,
      Enumerable<TaskUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutProjectInput>;
    createMany?: TaskCreateManyProjectInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type SaleUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutProjectInput>,
      Enumerable<SaleUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutProjectInput>;
    createMany?: SaleCreateManyProjectInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null;
    increment?: number;
    decrement?: number;
    multiply?: number;
    divide?: number;
  };

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string;
  };

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null;
  };

  export type ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<
      ProjectStatusCreateWithoutProjectsInput,
      ProjectStatusUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: ProjectStatusCreateOrConnectWithoutProjectsInput;
    upsert?: ProjectStatusUpsertWithoutProjectsInput;
    connect?: ProjectStatusWhereUniqueInput;
    update?: XOR<
      ProjectStatusUpdateWithoutProjectsInput,
      ProjectStatusUncheckedUpdateWithoutProjectsInput
    >;
  };

  export type DistributorUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<
      DistributorCreateWithoutProjectsInput,
      DistributorUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutProjectsInput;
    upsert?: DistributorUpsertWithoutProjectsInput;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutProjectsInput,
      DistributorUncheckedUpdateWithoutProjectsInput
    >;
  };

  export type ClientUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<
      ClientCreateWithoutProjectsInput,
      ClientUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutProjectsInput;
    upsert?: ClientUpsertWithoutProjectsInput;
    connect?: ClientWhereUniqueInput;
    update?: XOR<
      ClientUpdateWithoutProjectsInput,
      ClientUncheckedUpdateWithoutProjectsInput
    >;
  };

  export type GroupUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<
      GroupCreateWithoutProjectsInput,
      GroupUncheckedCreateWithoutProjectsInput
    >;
    connectOrCreate?: GroupCreateOrConnectWithoutProjectsInput;
    upsert?: GroupUpsertWithoutProjectsInput;
    connect?: GroupWhereUniqueInput;
    update?: XOR<
      GroupUpdateWithoutProjectsInput,
      GroupUncheckedUpdateWithoutProjectsInput
    >;
  };

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutProjectInput>,
      Enumerable<TaskUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutProjectInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutProjectInput>;
    createMany?: TaskCreateManyProjectInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutProjectInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutProjectInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type SaleUpdateManyWithoutProjectNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutProjectInput>,
      Enumerable<SaleUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutProjectInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutProjectInput>;
    createMany?: SaleCreateManyProjectInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutProjectInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutProjectInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutProjectInput>,
      Enumerable<TaskUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutProjectInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutProjectInput>;
    createMany?: TaskCreateManyProjectInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutProjectInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutProjectInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type SaleUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutProjectInput>,
      Enumerable<SaleUncheckedCreateWithoutProjectInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutProjectInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutProjectInput>;
    createMany?: SaleCreateManyProjectInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutProjectInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutProjectInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type ProjectCreateNestedManyWithoutStatusInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutStatusInput>,
      Enumerable<ProjectUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutStatusInput>;
    createMany?: ProjectCreateManyStatusInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type ProjectUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutStatusInput>,
      Enumerable<ProjectUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutStatusInput>;
    createMany?: ProjectCreateManyStatusInputEnvelope;
    connect?: Enumerable<ProjectWhereUniqueInput>;
  };

  export type ProjectUpdateManyWithoutStatusNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutStatusInput>,
      Enumerable<ProjectUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutStatusInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutStatusInput>;
    createMany?: ProjectCreateManyStatusInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutStatusInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutStatusInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type ProjectUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<
      Enumerable<ProjectCreateWithoutStatusInput>,
      Enumerable<ProjectUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutStatusInput>;
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutStatusInput>;
    createMany?: ProjectCreateManyStatusInputEnvelope;
    set?: Enumerable<ProjectWhereUniqueInput>;
    disconnect?: Enumerable<ProjectWhereUniqueInput>;
    delete?: Enumerable<ProjectWhereUniqueInput>;
    connect?: Enumerable<ProjectWhereUniqueInput>;
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutStatusInput>;
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutStatusInput>;
    deleteMany?: Enumerable<ProjectScalarWhereInput>;
  };

  export type TaskStatusCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      TaskStatusCreateWithoutTasksInput,
      TaskStatusUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: TaskStatusCreateOrConnectWithoutTasksInput;
    connect?: TaskStatusWhereUniqueInput;
  };

  export type DistributorCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      DistributorCreateWithoutTasksInput,
      DistributorUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutTasksInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type ClientCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      ClientCreateWithoutTasksInput,
      ClientUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutTasksInput;
    connect?: ClientWhereUniqueInput;
  };

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput;
    connect?: ProjectWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      UserCreateWithoutTasksInput,
      UserUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput;
    connect?: UserWhereUniqueInput;
  };

  export type ContactCreateNestedOneWithoutTasksInput = {
    create?: XOR<
      ContactCreateWithoutTasksInput,
      ContactUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ContactCreateOrConnectWithoutTasksInput;
    connect?: ContactWhereUniqueInput;
  };

  export type TaskStatusUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<
      TaskStatusCreateWithoutTasksInput,
      TaskStatusUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: TaskStatusCreateOrConnectWithoutTasksInput;
    upsert?: TaskStatusUpsertWithoutTasksInput;
    connect?: TaskStatusWhereUniqueInput;
    update?: XOR<
      TaskStatusUpdateWithoutTasksInput,
      TaskStatusUncheckedUpdateWithoutTasksInput
    >;
  };

  export type DistributorUpdateOneWithoutTasksNestedInput = {
    create?: XOR<
      DistributorCreateWithoutTasksInput,
      DistributorUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutTasksInput;
    upsert?: DistributorUpsertWithoutTasksInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutTasksInput,
      DistributorUncheckedUpdateWithoutTasksInput
    >;
  };

  export type ClientUpdateOneWithoutTasksNestedInput = {
    create?: XOR<
      ClientCreateWithoutTasksInput,
      ClientUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutTasksInput;
    upsert?: ClientUpsertWithoutTasksInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: ClientWhereUniqueInput;
    update?: XOR<
      ClientUpdateWithoutTasksInput,
      ClientUncheckedUpdateWithoutTasksInput
    >;
  };

  export type ProjectUpdateOneWithoutTasksNestedInput = {
    create?: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput;
    upsert?: ProjectUpsertWithoutTasksInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: ProjectWhereUniqueInput;
    update?: XOR<
      ProjectUpdateWithoutTasksInput,
      ProjectUncheckedUpdateWithoutTasksInput
    >;
  };

  export type UserUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<
      UserCreateWithoutTasksInput,
      UserUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutTasksInput;
    upsert?: UserUpsertWithoutTasksInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      UserUpdateWithoutTasksInput,
      UserUncheckedUpdateWithoutTasksInput
    >;
  };

  export type ContactUpdateOneWithoutTasksNestedInput = {
    create?: XOR<
      ContactCreateWithoutTasksInput,
      ContactUncheckedCreateWithoutTasksInput
    >;
    connectOrCreate?: ContactCreateOrConnectWithoutTasksInput;
    upsert?: ContactUpsertWithoutTasksInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: ContactWhereUniqueInput;
    update?: XOR<
      ContactUpdateWithoutTasksInput,
      ContactUncheckedUpdateWithoutTasksInput
    >;
  };

  export type TaskCreateNestedManyWithoutStatusInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutStatusInput>,
      Enumerable<TaskUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutStatusInput>;
    createMany?: TaskCreateManyStatusInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type TaskUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutStatusInput>,
      Enumerable<TaskUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutStatusInput>;
    createMany?: TaskCreateManyStatusInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type TaskUpdateManyWithoutStatusNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutStatusInput>,
      Enumerable<TaskUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutStatusInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutStatusInput>;
    createMany?: TaskCreateManyStatusInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutStatusInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutStatusInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type TaskUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutStatusInput>,
      Enumerable<TaskUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutStatusInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutStatusInput>;
    createMany?: TaskCreateManyStatusInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutStatusInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutStatusInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type SubcategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<
      Enumerable<SubcategoryCreateWithoutCategoryInput>,
      Enumerable<SubcategoryUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<SubcategoryCreateOrConnectWithoutCategoryInput>;
    createMany?: SubcategoryCreateManyCategoryInputEnvelope;
    connect?: Enumerable<SubcategoryWhereUniqueInput>;
  };

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutCategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>;
    createMany?: ProductCreateManyCategoryInputEnvelope;
    connect?: Enumerable<ProductWhereUniqueInput>;
  };

  export type SubcategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<
      Enumerable<SubcategoryCreateWithoutCategoryInput>,
      Enumerable<SubcategoryUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<SubcategoryCreateOrConnectWithoutCategoryInput>;
    createMany?: SubcategoryCreateManyCategoryInputEnvelope;
    connect?: Enumerable<SubcategoryWhereUniqueInput>;
  };

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutCategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>;
    createMany?: ProductCreateManyCategoryInputEnvelope;
    connect?: Enumerable<ProductWhereUniqueInput>;
  };

  export type SubcategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<
      Enumerable<SubcategoryCreateWithoutCategoryInput>,
      Enumerable<SubcategoryUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<SubcategoryCreateOrConnectWithoutCategoryInput>;
    upsert?: Enumerable<SubcategoryUpsertWithWhereUniqueWithoutCategoryInput>;
    createMany?: SubcategoryCreateManyCategoryInputEnvelope;
    set?: Enumerable<SubcategoryWhereUniqueInput>;
    disconnect?: Enumerable<SubcategoryWhereUniqueInput>;
    delete?: Enumerable<SubcategoryWhereUniqueInput>;
    connect?: Enumerable<SubcategoryWhereUniqueInput>;
    update?: Enumerable<SubcategoryUpdateWithWhereUniqueWithoutCategoryInput>;
    updateMany?: Enumerable<SubcategoryUpdateManyWithWhereWithoutCategoryInput>;
    deleteMany?: Enumerable<SubcategoryScalarWhereInput>;
  };

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutCategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>;
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoryInput>;
    createMany?: ProductCreateManyCategoryInputEnvelope;
    set?: Enumerable<ProductWhereUniqueInput>;
    disconnect?: Enumerable<ProductWhereUniqueInput>;
    delete?: Enumerable<ProductWhereUniqueInput>;
    connect?: Enumerable<ProductWhereUniqueInput>;
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoryInput>;
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoryInput>;
    deleteMany?: Enumerable<ProductScalarWhereInput>;
  };

  export type SubcategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<
      Enumerable<SubcategoryCreateWithoutCategoryInput>,
      Enumerable<SubcategoryUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<SubcategoryCreateOrConnectWithoutCategoryInput>;
    upsert?: Enumerable<SubcategoryUpsertWithWhereUniqueWithoutCategoryInput>;
    createMany?: SubcategoryCreateManyCategoryInputEnvelope;
    set?: Enumerable<SubcategoryWhereUniqueInput>;
    disconnect?: Enumerable<SubcategoryWhereUniqueInput>;
    delete?: Enumerable<SubcategoryWhereUniqueInput>;
    connect?: Enumerable<SubcategoryWhereUniqueInput>;
    update?: Enumerable<SubcategoryUpdateWithWhereUniqueWithoutCategoryInput>;
    updateMany?: Enumerable<SubcategoryUpdateManyWithWhereWithoutCategoryInput>;
    deleteMany?: Enumerable<SubcategoryScalarWhereInput>;
  };

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutCategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutCategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>;
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoryInput>;
    createMany?: ProductCreateManyCategoryInputEnvelope;
    set?: Enumerable<ProductWhereUniqueInput>;
    disconnect?: Enumerable<ProductWhereUniqueInput>;
    delete?: Enumerable<ProductWhereUniqueInput>;
    connect?: Enumerable<ProductWhereUniqueInput>;
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoryInput>;
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoryInput>;
    deleteMany?: Enumerable<ProductScalarWhereInput>;
  };

  export type CategoryCreateNestedOneWithoutSubcategoriesInput = {
    create?: XOR<
      CategoryCreateWithoutSubcategoriesInput,
      CategoryUncheckedCreateWithoutSubcategoriesInput
    >;
    connectOrCreate?: CategoryCreateOrConnectWithoutSubcategoriesInput;
    connect?: CategoryWhereUniqueInput;
  };

  export type ProductCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutSubcategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutSubcategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubcategoryInput>;
    createMany?: ProductCreateManySubcategoryInputEnvelope;
    connect?: Enumerable<ProductWhereUniqueInput>;
  };

  export type ProductUncheckedCreateNestedManyWithoutSubcategoryInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutSubcategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutSubcategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubcategoryInput>;
    createMany?: ProductCreateManySubcategoryInputEnvelope;
    connect?: Enumerable<ProductWhereUniqueInput>;
  };

  export type CategoryUpdateOneRequiredWithoutSubcategoriesNestedInput = {
    create?: XOR<
      CategoryCreateWithoutSubcategoriesInput,
      CategoryUncheckedCreateWithoutSubcategoriesInput
    >;
    connectOrCreate?: CategoryCreateOrConnectWithoutSubcategoriesInput;
    upsert?: CategoryUpsertWithoutSubcategoriesInput;
    connect?: CategoryWhereUniqueInput;
    update?: XOR<
      CategoryUpdateWithoutSubcategoriesInput,
      CategoryUncheckedUpdateWithoutSubcategoriesInput
    >;
  };

  export type ProductUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutSubcategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutSubcategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubcategoryInput>;
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutSubcategoryInput>;
    createMany?: ProductCreateManySubcategoryInputEnvelope;
    set?: Enumerable<ProductWhereUniqueInput>;
    disconnect?: Enumerable<ProductWhereUniqueInput>;
    delete?: Enumerable<ProductWhereUniqueInput>;
    connect?: Enumerable<ProductWhereUniqueInput>;
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutSubcategoryInput>;
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutSubcategoryInput>;
    deleteMany?: Enumerable<ProductScalarWhereInput>;
  };

  export type ProductUncheckedUpdateManyWithoutSubcategoryNestedInput = {
    create?: XOR<
      Enumerable<ProductCreateWithoutSubcategoryInput>,
      Enumerable<ProductUncheckedCreateWithoutSubcategoryInput>
    >;
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutSubcategoryInput>;
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutSubcategoryInput>;
    createMany?: ProductCreateManySubcategoryInputEnvelope;
    set?: Enumerable<ProductWhereUniqueInput>;
    disconnect?: Enumerable<ProductWhereUniqueInput>;
    delete?: Enumerable<ProductWhereUniqueInput>;
    connect?: Enumerable<ProductWhereUniqueInput>;
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutSubcategoryInput>;
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutSubcategoryInput>;
    deleteMany?: Enumerable<ProductScalarWhereInput>;
  };

  export type ProductCreateimagesInput = {
    set: Enumerable<string>;
  };

  export type PropertyCreateNestedManyWithoutProductInput = {
    create?: XOR<
      Enumerable<PropertyCreateWithoutProductInput>,
      Enumerable<PropertyUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutProductInput>;
    createMany?: PropertyCreateManyProductInputEnvelope;
    connect?: Enumerable<PropertyWhereUniqueInput>;
  };

  export type SaleContentCreateNestedManyWithoutProductInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutProductInput>,
      Enumerable<SaleContentUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutProductInput>;
    createMany?: SaleContentCreateManyProductInputEnvelope;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
  };

  export type CharacteristicCreateNestedManyWithoutProductInput = {
    create?: XOR<
      Enumerable<CharacteristicCreateWithoutProductInput>,
      Enumerable<CharacteristicUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<CharacteristicCreateOrConnectWithoutProductInput>;
    createMany?: CharacteristicCreateManyProductInputEnvelope;
    connect?: Enumerable<CharacteristicWhereUniqueInput>;
  };

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput;
    connect?: CategoryWhereUniqueInput;
  };

  export type SubcategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<
      SubcategoryCreateWithoutProductsInput,
      SubcategoryUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: SubcategoryCreateOrConnectWithoutProductsInput;
    connect?: SubcategoryWhereUniqueInput;
  };

  export type PropertyUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<
      Enumerable<PropertyCreateWithoutProductInput>,
      Enumerable<PropertyUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutProductInput>;
    createMany?: PropertyCreateManyProductInputEnvelope;
    connect?: Enumerable<PropertyWhereUniqueInput>;
  };

  export type SaleContentUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutProductInput>,
      Enumerable<SaleContentUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutProductInput>;
    createMany?: SaleContentCreateManyProductInputEnvelope;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
  };

  export type CharacteristicUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<
      Enumerable<CharacteristicCreateWithoutProductInput>,
      Enumerable<CharacteristicUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<CharacteristicCreateOrConnectWithoutProductInput>;
    createMany?: CharacteristicCreateManyProductInputEnvelope;
    connect?: Enumerable<CharacteristicWhereUniqueInput>;
  };

  export type ProductUpdateimagesInput = {
    set?: Enumerable<string>;
    push?: string | Enumerable<string>;
  };

  export type PropertyUpdateManyWithoutProductNestedInput = {
    create?: XOR<
      Enumerable<PropertyCreateWithoutProductInput>,
      Enumerable<PropertyUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutProductInput>;
    upsert?: Enumerable<PropertyUpsertWithWhereUniqueWithoutProductInput>;
    createMany?: PropertyCreateManyProductInputEnvelope;
    set?: Enumerable<PropertyWhereUniqueInput>;
    disconnect?: Enumerable<PropertyWhereUniqueInput>;
    delete?: Enumerable<PropertyWhereUniqueInput>;
    connect?: Enumerable<PropertyWhereUniqueInput>;
    update?: Enumerable<PropertyUpdateWithWhereUniqueWithoutProductInput>;
    updateMany?: Enumerable<PropertyUpdateManyWithWhereWithoutProductInput>;
    deleteMany?: Enumerable<PropertyScalarWhereInput>;
  };

  export type SaleContentUpdateManyWithoutProductNestedInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutProductInput>,
      Enumerable<SaleContentUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutProductInput>;
    upsert?: Enumerable<SaleContentUpsertWithWhereUniqueWithoutProductInput>;
    createMany?: SaleContentCreateManyProductInputEnvelope;
    set?: Enumerable<SaleContentWhereUniqueInput>;
    disconnect?: Enumerable<SaleContentWhereUniqueInput>;
    delete?: Enumerable<SaleContentWhereUniqueInput>;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
    update?: Enumerable<SaleContentUpdateWithWhereUniqueWithoutProductInput>;
    updateMany?: Enumerable<SaleContentUpdateManyWithWhereWithoutProductInput>;
    deleteMany?: Enumerable<SaleContentScalarWhereInput>;
  };

  export type CharacteristicUpdateManyWithoutProductNestedInput = {
    create?: XOR<
      Enumerable<CharacteristicCreateWithoutProductInput>,
      Enumerable<CharacteristicUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<CharacteristicCreateOrConnectWithoutProductInput>;
    upsert?: Enumerable<CharacteristicUpsertWithWhereUniqueWithoutProductInput>;
    createMany?: CharacteristicCreateManyProductInputEnvelope;
    set?: Enumerable<CharacteristicWhereUniqueInput>;
    disconnect?: Enumerable<CharacteristicWhereUniqueInput>;
    delete?: Enumerable<CharacteristicWhereUniqueInput>;
    connect?: Enumerable<CharacteristicWhereUniqueInput>;
    update?: Enumerable<CharacteristicUpdateWithWhereUniqueWithoutProductInput>;
    updateMany?: Enumerable<CharacteristicUpdateManyWithWhereWithoutProductInput>;
    deleteMany?: Enumerable<CharacteristicScalarWhereInput>;
  };

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput;
    upsert?: CategoryUpsertWithoutProductsInput;
    connect?: CategoryWhereUniqueInput;
    update?: XOR<
      CategoryUpdateWithoutProductsInput,
      CategoryUncheckedUpdateWithoutProductsInput
    >;
  };

  export type SubcategoryUpdateOneWithoutProductsNestedInput = {
    create?: XOR<
      SubcategoryCreateWithoutProductsInput,
      SubcategoryUncheckedCreateWithoutProductsInput
    >;
    connectOrCreate?: SubcategoryCreateOrConnectWithoutProductsInput;
    upsert?: SubcategoryUpsertWithoutProductsInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: SubcategoryWhereUniqueInput;
    update?: XOR<
      SubcategoryUpdateWithoutProductsInput,
      SubcategoryUncheckedUpdateWithoutProductsInput
    >;
  };

  export type PropertyUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<
      Enumerable<PropertyCreateWithoutProductInput>,
      Enumerable<PropertyUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutProductInput>;
    upsert?: Enumerable<PropertyUpsertWithWhereUniqueWithoutProductInput>;
    createMany?: PropertyCreateManyProductInputEnvelope;
    set?: Enumerable<PropertyWhereUniqueInput>;
    disconnect?: Enumerable<PropertyWhereUniqueInput>;
    delete?: Enumerable<PropertyWhereUniqueInput>;
    connect?: Enumerable<PropertyWhereUniqueInput>;
    update?: Enumerable<PropertyUpdateWithWhereUniqueWithoutProductInput>;
    updateMany?: Enumerable<PropertyUpdateManyWithWhereWithoutProductInput>;
    deleteMany?: Enumerable<PropertyScalarWhereInput>;
  };

  export type SaleContentUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutProductInput>,
      Enumerable<SaleContentUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutProductInput>;
    upsert?: Enumerable<SaleContentUpsertWithWhereUniqueWithoutProductInput>;
    createMany?: SaleContentCreateManyProductInputEnvelope;
    set?: Enumerable<SaleContentWhereUniqueInput>;
    disconnect?: Enumerable<SaleContentWhereUniqueInput>;
    delete?: Enumerable<SaleContentWhereUniqueInput>;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
    update?: Enumerable<SaleContentUpdateWithWhereUniqueWithoutProductInput>;
    updateMany?: Enumerable<SaleContentUpdateManyWithWhereWithoutProductInput>;
    deleteMany?: Enumerable<SaleContentScalarWhereInput>;
  };

  export type CharacteristicUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<
      Enumerable<CharacteristicCreateWithoutProductInput>,
      Enumerable<CharacteristicUncheckedCreateWithoutProductInput>
    >;
    connectOrCreate?: Enumerable<CharacteristicCreateOrConnectWithoutProductInput>;
    upsert?: Enumerable<CharacteristicUpsertWithWhereUniqueWithoutProductInput>;
    createMany?: CharacteristicCreateManyProductInputEnvelope;
    set?: Enumerable<CharacteristicWhereUniqueInput>;
    disconnect?: Enumerable<CharacteristicWhereUniqueInput>;
    delete?: Enumerable<CharacteristicWhereUniqueInput>;
    connect?: Enumerable<CharacteristicWhereUniqueInput>;
    update?: Enumerable<CharacteristicUpdateWithWhereUniqueWithoutProductInput>;
    updateMany?: Enumerable<CharacteristicUpdateManyWithWhereWithoutProductInput>;
    deleteMany?: Enumerable<CharacteristicScalarWhereInput>;
  };

  export type ProductCreateNestedOneWithoutPropertiesInput = {
    create?: XOR<
      ProductCreateWithoutPropertiesInput,
      ProductUncheckedCreateWithoutPropertiesInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutPropertiesInput;
    connect?: ProductWhereUniqueInput;
  };

  export type ProductUpdateOneRequiredWithoutPropertiesNestedInput = {
    create?: XOR<
      ProductCreateWithoutPropertiesInput,
      ProductUncheckedCreateWithoutPropertiesInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutPropertiesInput;
    upsert?: ProductUpsertWithoutPropertiesInput;
    connect?: ProductWhereUniqueInput;
    update?: XOR<
      ProductUpdateWithoutPropertiesInput,
      ProductUncheckedUpdateWithoutPropertiesInput
    >;
  };

  export type ProductCreateNestedOneWithoutCharacteristicsInput = {
    create?: XOR<
      ProductCreateWithoutCharacteristicsInput,
      ProductUncheckedCreateWithoutCharacteristicsInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutCharacteristicsInput;
    connect?: ProductWhereUniqueInput;
  };

  export type ProductUpdateOneRequiredWithoutCharacteristicsNestedInput = {
    create?: XOR<
      ProductCreateWithoutCharacteristicsInput,
      ProductUncheckedCreateWithoutCharacteristicsInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutCharacteristicsInput;
    upsert?: ProductUpsertWithoutCharacteristicsInput;
    connect?: ProductWhereUniqueInput;
    update?: XOR<
      ProductUpdateWithoutCharacteristicsInput,
      ProductUncheckedUpdateWithoutCharacteristicsInput
    >;
  };

  export type DistributorCreateNestedOneWithoutSalesInput = {
    create?: XOR<
      DistributorCreateWithoutSalesInput,
      DistributorUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutSalesInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type ClientCreateNestedOneWithoutSalesInput = {
    create?: XOR<
      ClientCreateWithoutSalesInput,
      ClientUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutSalesInput;
    connect?: ClientWhereUniqueInput;
  };

  export type ProjectCreateNestedOneWithoutSalesInput = {
    create?: XOR<
      ProjectCreateWithoutSalesInput,
      ProjectUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutSalesInput;
    connect?: ProjectWhereUniqueInput;
  };

  export type UserCreateNestedOneWithoutSalesInput = {
    create?: XOR<
      UserCreateWithoutSalesInput,
      UserUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutSalesInput;
    connect?: UserWhereUniqueInput;
  };

  export type SaleContentCreateNestedManyWithoutSaleInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutSaleInput>,
      Enumerable<SaleContentUncheckedCreateWithoutSaleInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutSaleInput>;
    createMany?: SaleContentCreateManySaleInputEnvelope;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
  };

  export type SaleStatusCreateNestedOneWithoutSalesInput = {
    create?: XOR<
      SaleStatusCreateWithoutSalesInput,
      SaleStatusUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: SaleStatusCreateOrConnectWithoutSalesInput;
    connect?: SaleStatusWhereUniqueInput;
  };

  export type SaleContentUncheckedCreateNestedManyWithoutSaleInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutSaleInput>,
      Enumerable<SaleContentUncheckedCreateWithoutSaleInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutSaleInput>;
    createMany?: SaleContentCreateManySaleInputEnvelope;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
  };

  export type DistributorUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<
      DistributorCreateWithoutSalesInput,
      DistributorUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutSalesInput;
    upsert?: DistributorUpsertWithoutSalesInput;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutSalesInput,
      DistributorUncheckedUpdateWithoutSalesInput
    >;
  };

  export type ClientUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<
      ClientCreateWithoutSalesInput,
      ClientUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: ClientCreateOrConnectWithoutSalesInput;
    upsert?: ClientUpsertWithoutSalesInput;
    connect?: ClientWhereUniqueInput;
    update?: XOR<
      ClientUpdateWithoutSalesInput,
      ClientUncheckedUpdateWithoutSalesInput
    >;
  };

  export type ProjectUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<
      ProjectCreateWithoutSalesInput,
      ProjectUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: ProjectCreateOrConnectWithoutSalesInput;
    upsert?: ProjectUpsertWithoutSalesInput;
    connect?: ProjectWhereUniqueInput;
    update?: XOR<
      ProjectUpdateWithoutSalesInput,
      ProjectUncheckedUpdateWithoutSalesInput
    >;
  };

  export type UserUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<
      UserCreateWithoutSalesInput,
      UserUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutSalesInput;
    upsert?: UserUpsertWithoutSalesInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      UserUpdateWithoutSalesInput,
      UserUncheckedUpdateWithoutSalesInput
    >;
  };

  export type SaleContentUpdateManyWithoutSaleNestedInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutSaleInput>,
      Enumerable<SaleContentUncheckedCreateWithoutSaleInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutSaleInput>;
    upsert?: Enumerable<SaleContentUpsertWithWhereUniqueWithoutSaleInput>;
    createMany?: SaleContentCreateManySaleInputEnvelope;
    set?: Enumerable<SaleContentWhereUniqueInput>;
    disconnect?: Enumerable<SaleContentWhereUniqueInput>;
    delete?: Enumerable<SaleContentWhereUniqueInput>;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
    update?: Enumerable<SaleContentUpdateWithWhereUniqueWithoutSaleInput>;
    updateMany?: Enumerable<SaleContentUpdateManyWithWhereWithoutSaleInput>;
    deleteMany?: Enumerable<SaleContentScalarWhereInput>;
  };

  export type SaleStatusUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<
      SaleStatusCreateWithoutSalesInput,
      SaleStatusUncheckedCreateWithoutSalesInput
    >;
    connectOrCreate?: SaleStatusCreateOrConnectWithoutSalesInput;
    upsert?: SaleStatusUpsertWithoutSalesInput;
    connect?: SaleStatusWhereUniqueInput;
    update?: XOR<
      SaleStatusUpdateWithoutSalesInput,
      SaleStatusUncheckedUpdateWithoutSalesInput
    >;
  };

  export type SaleContentUncheckedUpdateManyWithoutSaleNestedInput = {
    create?: XOR<
      Enumerable<SaleContentCreateWithoutSaleInput>,
      Enumerable<SaleContentUncheckedCreateWithoutSaleInput>
    >;
    connectOrCreate?: Enumerable<SaleContentCreateOrConnectWithoutSaleInput>;
    upsert?: Enumerable<SaleContentUpsertWithWhereUniqueWithoutSaleInput>;
    createMany?: SaleContentCreateManySaleInputEnvelope;
    set?: Enumerable<SaleContentWhereUniqueInput>;
    disconnect?: Enumerable<SaleContentWhereUniqueInput>;
    delete?: Enumerable<SaleContentWhereUniqueInput>;
    connect?: Enumerable<SaleContentWhereUniqueInput>;
    update?: Enumerable<SaleContentUpdateWithWhereUniqueWithoutSaleInput>;
    updateMany?: Enumerable<SaleContentUpdateManyWithWhereWithoutSaleInput>;
    deleteMany?: Enumerable<SaleContentScalarWhereInput>;
  };

  export type SaleCreateNestedManyWithoutStatusInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutStatusInput>,
      Enumerable<SaleUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutStatusInput>;
    createMany?: SaleCreateManyStatusInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type SaleUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutStatusInput>,
      Enumerable<SaleUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutStatusInput>;
    createMany?: SaleCreateManyStatusInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type SaleUpdateManyWithoutStatusNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutStatusInput>,
      Enumerable<SaleUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutStatusInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutStatusInput>;
    createMany?: SaleCreateManyStatusInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutStatusInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutStatusInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type SaleUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutStatusInput>,
      Enumerable<SaleUncheckedCreateWithoutStatusInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutStatusInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutStatusInput>;
    createMany?: SaleCreateManyStatusInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutStatusInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutStatusInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type SaleCreateNestedOneWithoutSaleContentInput = {
    create?: XOR<
      SaleCreateWithoutSaleContentInput,
      SaleUncheckedCreateWithoutSaleContentInput
    >;
    connectOrCreate?: SaleCreateOrConnectWithoutSaleContentInput;
    connect?: SaleWhereUniqueInput;
  };

  export type ProductCreateNestedOneWithoutSaleContentsInput = {
    create?: XOR<
      ProductCreateWithoutSaleContentsInput,
      ProductUncheckedCreateWithoutSaleContentsInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutSaleContentsInput;
    connect?: ProductWhereUniqueInput;
  };

  export type SaleUpdateOneRequiredWithoutSaleContentNestedInput = {
    create?: XOR<
      SaleCreateWithoutSaleContentInput,
      SaleUncheckedCreateWithoutSaleContentInput
    >;
    connectOrCreate?: SaleCreateOrConnectWithoutSaleContentInput;
    upsert?: SaleUpsertWithoutSaleContentInput;
    connect?: SaleWhereUniqueInput;
    update?: XOR<
      SaleUpdateWithoutSaleContentInput,
      SaleUncheckedUpdateWithoutSaleContentInput
    >;
  };

  export type ProductUpdateOneRequiredWithoutSaleContentsNestedInput = {
    create?: XOR<
      ProductCreateWithoutSaleContentsInput,
      ProductUncheckedCreateWithoutSaleContentsInput
    >;
    connectOrCreate?: ProductCreateOrConnectWithoutSaleContentsInput;
    upsert?: ProductUpsertWithoutSaleContentsInput;
    connect?: ProductWhereUniqueInput;
    update?: XOR<
      ProductUpdateWithoutSaleContentsInput,
      ProductUncheckedUpdateWithoutSaleContentsInput
    >;
  };

  export type TokenCreateNestedOneWithoutUserInput = {
    create?: XOR<
      TokenCreateWithoutUserInput,
      TokenUncheckedCreateWithoutUserInput
    >;
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput;
    connect?: TokenWhereUniqueInput;
  };

  export type TaskCreateNestedManyWithoutUserInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutUserInput>,
      Enumerable<TaskUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>;
    createMany?: TaskCreateManyUserInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type SaleCreateNestedManyWithoutUserInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutUserInput>,
      Enumerable<SaleUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutUserInput>;
    createMany?: SaleCreateManyUserInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type DistributorCreateNestedOneWithoutUsersInput = {
    create?: XOR<
      DistributorCreateWithoutUsersInput,
      DistributorUncheckedCreateWithoutUsersInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutUsersInput;
    connect?: DistributorWhereUniqueInput;
  };

  export type TokenUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<
      TokenCreateWithoutUserInput,
      TokenUncheckedCreateWithoutUserInput
    >;
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput;
    connect?: TokenWhereUniqueInput;
  };

  export type TaskUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutUserInput>,
      Enumerable<TaskUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>;
    createMany?: TaskCreateManyUserInputEnvelope;
    connect?: Enumerable<TaskWhereUniqueInput>;
  };

  export type SaleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutUserInput>,
      Enumerable<SaleUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutUserInput>;
    createMany?: SaleCreateManyUserInputEnvelope;
    connect?: Enumerable<SaleWhereUniqueInput>;
  };

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean;
  };

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role;
  };

  export type TokenUpdateOneWithoutUserNestedInput = {
    create?: XOR<
      TokenCreateWithoutUserInput,
      TokenUncheckedCreateWithoutUserInput
    >;
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput;
    upsert?: TokenUpsertWithoutUserInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: TokenWhereUniqueInput;
    update?: XOR<
      TokenUpdateWithoutUserInput,
      TokenUncheckedUpdateWithoutUserInput
    >;
  };

  export type TaskUpdateManyWithoutUserNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutUserInput>,
      Enumerable<TaskUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutUserInput>;
    createMany?: TaskCreateManyUserInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutUserInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutUserInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type SaleUpdateManyWithoutUserNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutUserInput>,
      Enumerable<SaleUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutUserInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutUserInput>;
    createMany?: SaleCreateManyUserInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutUserInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutUserInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type DistributorUpdateOneWithoutUsersNestedInput = {
    create?: XOR<
      DistributorCreateWithoutUsersInput,
      DistributorUncheckedCreateWithoutUsersInput
    >;
    connectOrCreate?: DistributorCreateOrConnectWithoutUsersInput;
    upsert?: DistributorUpsertWithoutUsersInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: DistributorWhereUniqueInput;
    update?: XOR<
      DistributorUpdateWithoutUsersInput,
      DistributorUncheckedUpdateWithoutUsersInput
    >;
  };

  export type TokenUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<
      TokenCreateWithoutUserInput,
      TokenUncheckedCreateWithoutUserInput
    >;
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput;
    upsert?: TokenUpsertWithoutUserInput;
    disconnect?: boolean;
    delete?: boolean;
    connect?: TokenWhereUniqueInput;
    update?: XOR<
      TokenUpdateWithoutUserInput,
      TokenUncheckedUpdateWithoutUserInput
    >;
  };

  export type TaskUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<
      Enumerable<TaskCreateWithoutUserInput>,
      Enumerable<TaskUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutUserInput>;
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutUserInput>;
    createMany?: TaskCreateManyUserInputEnvelope;
    set?: Enumerable<TaskWhereUniqueInput>;
    disconnect?: Enumerable<TaskWhereUniqueInput>;
    delete?: Enumerable<TaskWhereUniqueInput>;
    connect?: Enumerable<TaskWhereUniqueInput>;
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutUserInput>;
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutUserInput>;
    deleteMany?: Enumerable<TaskScalarWhereInput>;
  };

  export type SaleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<
      Enumerable<SaleCreateWithoutUserInput>,
      Enumerable<SaleUncheckedCreateWithoutUserInput>
    >;
    connectOrCreate?: Enumerable<SaleCreateOrConnectWithoutUserInput>;
    upsert?: Enumerable<SaleUpsertWithWhereUniqueWithoutUserInput>;
    createMany?: SaleCreateManyUserInputEnvelope;
    set?: Enumerable<SaleWhereUniqueInput>;
    disconnect?: Enumerable<SaleWhereUniqueInput>;
    delete?: Enumerable<SaleWhereUniqueInput>;
    connect?: Enumerable<SaleWhereUniqueInput>;
    update?: Enumerable<SaleUpdateWithWhereUniqueWithoutUserInput>;
    updateMany?: Enumerable<SaleUpdateManyWithWhereWithoutUserInput>;
    deleteMany?: Enumerable<SaleScalarWhereInput>;
  };

  export type UserCreateNestedOneWithoutTokenInput = {
    create?: XOR<
      UserCreateWithoutTokenInput,
      UserUncheckedCreateWithoutTokenInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutTokenInput;
    connect?: UserWhereUniqueInput;
  };

  export type UserUpdateOneRequiredWithoutTokenNestedInput = {
    create?: XOR<
      UserCreateWithoutTokenInput,
      UserUncheckedCreateWithoutTokenInput
    >;
    connectOrCreate?: UserCreateOrConnectWithoutTokenInput;
    upsert?: UserUpsertWithoutTokenInput;
    connect?: UserWhereUniqueInput;
    update?: XOR<
      UserUpdateWithoutTokenInput,
      UserUncheckedUpdateWithoutTokenInput
    >;
  };

  export type NestedIntFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntFilter | number;
  };

  export type NestedStringFilter = {
    equals?: string;
    in?: Enumerable<string>;
    notIn?: Enumerable<string>;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    not?: NestedStringFilter | string;
  };

  export type NestedStringNullableFilter = {
    equals?: string | null;
    in?: Enumerable<string> | null;
    notIn?: Enumerable<string> | null;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    not?: NestedStringNullableFilter | string | null;
  };

  export type NestedFloatFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatFilter | number;
  };

  export type NestedIntWithAggregatesFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntWithAggregatesFilter | number;
    _count?: NestedIntFilter;
    _avg?: NestedFloatFilter;
    _sum?: NestedIntFilter;
    _min?: NestedIntFilter;
    _max?: NestedIntFilter;
  };

  export type NestedStringWithAggregatesFilter = {
    equals?: string;
    in?: Enumerable<string>;
    notIn?: Enumerable<string>;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    not?: NestedStringWithAggregatesFilter | string;
    _count?: NestedIntFilter;
    _min?: NestedStringFilter;
    _max?: NestedStringFilter;
  };

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null;
    in?: Enumerable<string> | null;
    notIn?: Enumerable<string> | null;
    lt?: string;
    lte?: string;
    gt?: string;
    gte?: string;
    contains?: string;
    startsWith?: string;
    endsWith?: string;
    not?: NestedStringNullableWithAggregatesFilter | string | null;
    _count?: NestedIntNullableFilter;
    _min?: NestedStringNullableFilter;
    _max?: NestedStringNullableFilter;
  };

  export type NestedIntNullableFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntNullableFilter | number | null;
  };

  export type NestedFloatWithAggregatesFilter = {
    equals?: number;
    in?: Enumerable<number>;
    notIn?: Enumerable<number>;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatWithAggregatesFilter | number;
    _count?: NestedIntFilter;
    _avg?: NestedFloatFilter;
    _sum?: NestedFloatFilter;
    _min?: NestedFloatFilter;
    _max?: NestedFloatFilter;
  };

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedIntNullableWithAggregatesFilter | number | null;
    _count?: NestedIntNullableFilter;
    _avg?: NestedFloatNullableFilter;
    _sum?: NestedIntNullableFilter;
    _min?: NestedIntNullableFilter;
    _max?: NestedIntNullableFilter;
  };

  export type NestedFloatNullableFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatNullableFilter | number | null;
  };

  export type NestedDateTimeFilter = {
    equals?: Date | string;
    in?: Enumerable<Date> | Enumerable<string>;
    notIn?: Enumerable<Date> | Enumerable<string>;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeFilter | Date | string;
  };

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null;
    in?: Enumerable<Date> | Enumerable<string> | null;
    notIn?: Enumerable<Date> | Enumerable<string> | null;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeNullableFilter | Date | string | null;
  };

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null;
    in?: Enumerable<number> | null;
    notIn?: Enumerable<number> | null;
    lt?: number;
    lte?: number;
    gt?: number;
    gte?: number;
    not?: NestedFloatNullableWithAggregatesFilter | number | null;
    _count?: NestedIntNullableFilter;
    _avg?: NestedFloatNullableFilter;
    _sum?: NestedFloatNullableFilter;
    _min?: NestedFloatNullableFilter;
    _max?: NestedFloatNullableFilter;
  };

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string;
    in?: Enumerable<Date> | Enumerable<string>;
    notIn?: Enumerable<Date> | Enumerable<string>;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeWithAggregatesFilter | Date | string;
    _count?: NestedIntFilter;
    _min?: NestedDateTimeFilter;
    _max?: NestedDateTimeFilter;
  };

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null;
    in?: Enumerable<Date> | Enumerable<string> | null;
    notIn?: Enumerable<Date> | Enumerable<string> | null;
    lt?: Date | string;
    lte?: Date | string;
    gt?: Date | string;
    gte?: Date | string;
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null;
    _count?: NestedIntNullableFilter;
    _min?: NestedDateTimeNullableFilter;
    _max?: NestedDateTimeNullableFilter;
  };

  export type NestedBoolFilter = {
    equals?: boolean;
    not?: NestedBoolFilter | boolean;
  };

  export type NestedEnumRoleFilter = {
    equals?: Role;
    in?: Enumerable<Role>;
    notIn?: Enumerable<Role>;
    not?: NestedEnumRoleFilter | Role;
  };

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean;
    not?: NestedBoolWithAggregatesFilter | boolean;
    _count?: NestedIntFilter;
    _min?: NestedBoolFilter;
    _max?: NestedBoolFilter;
  };

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role;
    in?: Enumerable<Role>;
    notIn?: Enumerable<Role>;
    not?: NestedEnumRoleWithAggregatesFilter | Role;
    _count?: NestedIntFilter;
    _min?: NestedEnumRoleFilter;
    _max?: NestedEnumRoleFilter;
  };

  export type ClientCreateWithoutDistributorInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    group?: GroupCreateNestedOneWithoutClientsInput;
    projects?: ProjectCreateNestedManyWithoutClientInput;
    tasks?: TaskCreateNestedManyWithoutClientInput;
    contacts?: ContactCreateNestedManyWithoutClientInput;
    sales?: SaleCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateWithoutDistributorInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    groupId?: number;
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutClientInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutClientInput;
    sales?: SaleUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientCreateOrConnectWithoutDistributorInput = {
    where: ClientWhereUniqueInput;
    create: XOR<
      ClientCreateWithoutDistributorInput,
      ClientUncheckedCreateWithoutDistributorInput
    >;
  };

  export type ClientCreateManyDistributorInputEnvelope = {
    data: Enumerable<ClientCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type ProjectCreateWithoutDistributorInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    status?: ProjectStatusCreateNestedOneWithoutProjectsInput;
    client: ClientCreateNestedOneWithoutProjectsInput;
    group: GroupCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sales?: SaleCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutDistributorInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    clientId: number;
    groupId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sales?: SaleUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutDistributorInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutDistributorInput,
      ProjectUncheckedCreateWithoutDistributorInput
    >;
  };

  export type ProjectCreateManyDistributorInputEnvelope = {
    data: Enumerable<ProjectCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type SaleCreateWithoutDistributorInput = {
    date: Date | string;
    sum: number;
    client: ClientCreateNestedOneWithoutSalesInput;
    project: ProjectCreateNestedOneWithoutSalesInput;
    user: UserCreateNestedOneWithoutSalesInput;
    saleContent?: SaleContentCreateNestedManyWithoutSaleInput;
    status: SaleStatusCreateNestedOneWithoutSalesInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateWithoutDistributorInput = {
    id?: number;
    date: Date | string;
    sum: number;
    clientId: number;
    projectId: number;
    userId: number;
    saleContent?: SaleContentUncheckedCreateNestedManyWithoutSaleInput;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateOrConnectWithoutDistributorInput = {
    where: SaleWhereUniqueInput;
    create: XOR<
      SaleCreateWithoutDistributorInput,
      SaleUncheckedCreateWithoutDistributorInput
    >;
  };

  export type SaleCreateManyDistributorInputEnvelope = {
    data: Enumerable<SaleCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type TaskCreateWithoutDistributorInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    status?: TaskStatusCreateNestedOneWithoutTasksInput;
    client?: ClientCreateNestedOneWithoutTasksInput;
    project?: ProjectCreateNestedOneWithoutTasksInput;
    user: UserCreateNestedOneWithoutTasksInput;
    contact?: ContactCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateWithoutDistributorInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateOrConnectWithoutDistributorInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutDistributorInput,
      TaskUncheckedCreateWithoutDistributorInput
    >;
  };

  export type TaskCreateManyDistributorInputEnvelope = {
    data: Enumerable<TaskCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type ContactCreateWithoutDistributorInput = {
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    client: ClientCreateNestedOneWithoutContactsInput;
    tasks?: TaskCreateNestedManyWithoutContactInput;
  };

  export type ContactUncheckedCreateWithoutDistributorInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    clientId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutContactInput;
  };

  export type ContactCreateOrConnectWithoutDistributorInput = {
    where: ContactWhereUniqueInput;
    create: XOR<
      ContactCreateWithoutDistributorInput,
      ContactUncheckedCreateWithoutDistributorInput
    >;
  };

  export type ContactCreateManyDistributorInputEnvelope = {
    data: Enumerable<ContactCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type UserCreateWithoutDistributorInput = {
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenCreateNestedOneWithoutUserInput;
    tasks?: TaskCreateNestedManyWithoutUserInput;
    sales?: SaleCreateNestedManyWithoutUserInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUncheckedCreateWithoutDistributorInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenUncheckedCreateNestedOneWithoutUserInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput;
    sales?: SaleUncheckedCreateNestedManyWithoutUserInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserCreateOrConnectWithoutDistributorInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutDistributorInput,
      UserUncheckedCreateWithoutDistributorInput
    >;
  };

  export type UserCreateManyDistributorInputEnvelope = {
    data: Enumerable<UserCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type GroupCreateWithoutDistributorInput = {
    name: string;
    clients?: ClientCreateNestedManyWithoutGroupInput;
    projects?: ProjectCreateNestedManyWithoutGroupInput;
  };

  export type GroupUncheckedCreateWithoutDistributorInput = {
    id?: number;
    name: string;
    clients?: ClientUncheckedCreateNestedManyWithoutGroupInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutGroupInput;
  };

  export type GroupCreateOrConnectWithoutDistributorInput = {
    where: GroupWhereUniqueInput;
    create: XOR<
      GroupCreateWithoutDistributorInput,
      GroupUncheckedCreateWithoutDistributorInput
    >;
  };

  export type GroupCreateManyDistributorInputEnvelope = {
    data: Enumerable<GroupCreateManyDistributorInput>;
    skipDuplicates?: boolean;
  };

  export type ClientUpsertWithWhereUniqueWithoutDistributorInput = {
    where: ClientWhereUniqueInput;
    update: XOR<
      ClientUpdateWithoutDistributorInput,
      ClientUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      ClientCreateWithoutDistributorInput,
      ClientUncheckedCreateWithoutDistributorInput
    >;
  };

  export type ClientUpdateWithWhereUniqueWithoutDistributorInput = {
    where: ClientWhereUniqueInput;
    data: XOR<
      ClientUpdateWithoutDistributorInput,
      ClientUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type ClientUpdateManyWithWhereWithoutDistributorInput = {
    where: ClientScalarWhereInput;
    data: XOR<
      ClientUpdateManyMutationInput,
      ClientUncheckedUpdateManyWithoutClientsInput
    >;
  };

  export type ClientScalarWhereInput = {
    AND?: Enumerable<ClientScalarWhereInput>;
    OR?: Enumerable<ClientScalarWhereInput>;
    NOT?: Enumerable<ClientScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    fullName?: StringFilter | string;
    legalAddress?: StringNullableFilter | string | null;
    actualAddress?: StringNullableFilter | string | null;
    inn?: StringFilter | string;
    kpp?: StringNullableFilter | string | null;
    ogrn?: StringNullableFilter | string | null;
    manager?: StringNullableFilter | string | null;
    website?: StringNullableFilter | string | null;
    phone?: StringNullableFilter | string | null;
    email?: StringNullableFilter | string | null;
    info?: StringNullableFilter | string | null;
    distributorId?: IntNullableFilter | number | null;
    groupId?: IntFilter | number;
  };

  export type ProjectUpsertWithWhereUniqueWithoutDistributorInput = {
    where: ProjectWhereUniqueInput;
    update: XOR<
      ProjectUpdateWithoutDistributorInput,
      ProjectUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      ProjectCreateWithoutDistributorInput,
      ProjectUncheckedCreateWithoutDistributorInput
    >;
  };

  export type ProjectUpdateWithWhereUniqueWithoutDistributorInput = {
    where: ProjectWhereUniqueInput;
    data: XOR<
      ProjectUpdateWithoutDistributorInput,
      ProjectUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type ProjectUpdateManyWithWhereWithoutDistributorInput = {
    where: ProjectScalarWhereInput;
    data: XOR<
      ProjectUpdateManyMutationInput,
      ProjectUncheckedUpdateManyWithoutProjectsInput
    >;
  };

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>;
    OR?: Enumerable<ProjectScalarWhereInput>;
    NOT?: Enumerable<ProjectScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    description?: StringNullableFilter | string | null;
    discount?: FloatNullableFilter | number | null;
    startDate?: DateTimeFilter | Date | string;
    finishDate?: DateTimeNullableFilter | Date | string | null;
    statusId?: IntFilter | number;
    distributorId?: IntFilter | number;
    clientId?: IntFilter | number;
    groupId?: IntFilter | number;
  };

  export type SaleUpsertWithWhereUniqueWithoutDistributorInput = {
    where: SaleWhereUniqueInput;
    update: XOR<
      SaleUpdateWithoutDistributorInput,
      SaleUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      SaleCreateWithoutDistributorInput,
      SaleUncheckedCreateWithoutDistributorInput
    >;
  };

  export type SaleUpdateWithWhereUniqueWithoutDistributorInput = {
    where: SaleWhereUniqueInput;
    data: XOR<
      SaleUpdateWithoutDistributorInput,
      SaleUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type SaleUpdateManyWithWhereWithoutDistributorInput = {
    where: SaleScalarWhereInput;
    data: XOR<
      SaleUpdateManyMutationInput,
      SaleUncheckedUpdateManyWithoutSalesInput
    >;
  };

  export type SaleScalarWhereInput = {
    AND?: Enumerable<SaleScalarWhereInput>;
    OR?: Enumerable<SaleScalarWhereInput>;
    NOT?: Enumerable<SaleScalarWhereInput>;
    id?: IntFilter | number;
    date?: DateTimeFilter | Date | string;
    sum?: FloatFilter | number;
    distributorId?: IntFilter | number;
    clientId?: IntFilter | number;
    projectId?: IntFilter | number;
    userId?: IntFilter | number;
    statusId?: IntFilter | number;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type TaskUpsertWithWhereUniqueWithoutDistributorInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutDistributorInput,
      TaskUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      TaskCreateWithoutDistributorInput,
      TaskUncheckedCreateWithoutDistributorInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutDistributorInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutDistributorInput,
      TaskUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutDistributorInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutTasksInput
    >;
  };

  export type TaskScalarWhereInput = {
    AND?: Enumerable<TaskScalarWhereInput>;
    OR?: Enumerable<TaskScalarWhereInput>;
    NOT?: Enumerable<TaskScalarWhereInput>;
    id?: IntFilter | number;
    title?: StringFilter | string;
    dateStarted?: DateTimeFilter | Date | string;
    dateEnded?: DateTimeNullableFilter | Date | string | null;
    content?: StringFilter | string;
    statusId?: IntFilter | number;
    distributorId?: IntNullableFilter | number | null;
    clientId?: IntNullableFilter | number | null;
    projectId?: IntNullableFilter | number | null;
    userId?: IntFilter | number;
    contactId?: IntNullableFilter | number | null;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type ContactUpsertWithWhereUniqueWithoutDistributorInput = {
    where: ContactWhereUniqueInput;
    update: XOR<
      ContactUpdateWithoutDistributorInput,
      ContactUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      ContactCreateWithoutDistributorInput,
      ContactUncheckedCreateWithoutDistributorInput
    >;
  };

  export type ContactUpdateWithWhereUniqueWithoutDistributorInput = {
    where: ContactWhereUniqueInput;
    data: XOR<
      ContactUpdateWithoutDistributorInput,
      ContactUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type ContactUpdateManyWithWhereWithoutDistributorInput = {
    where: ContactScalarWhereInput;
    data: XOR<
      ContactUpdateManyMutationInput,
      ContactUncheckedUpdateManyWithoutContactsInput
    >;
  };

  export type ContactScalarWhereInput = {
    AND?: Enumerable<ContactScalarWhereInput>;
    OR?: Enumerable<ContactScalarWhereInput>;
    NOT?: Enumerable<ContactScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    email?: StringFilter | string;
    phone?: StringNullableFilter | string | null;
    description?: StringNullableFilter | string | null;
    clientId?: IntFilter | number;
    distributorId?: IntFilter | number;
  };

  export type UserUpsertWithWhereUniqueWithoutDistributorInput = {
    where: UserWhereUniqueInput;
    update: XOR<
      UserUpdateWithoutDistributorInput,
      UserUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      UserCreateWithoutDistributorInput,
      UserUncheckedCreateWithoutDistributorInput
    >;
  };

  export type UserUpdateWithWhereUniqueWithoutDistributorInput = {
    where: UserWhereUniqueInput;
    data: XOR<
      UserUpdateWithoutDistributorInput,
      UserUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type UserUpdateManyWithWhereWithoutDistributorInput = {
    where: UserScalarWhereInput;
    data: XOR<
      UserUpdateManyMutationInput,
      UserUncheckedUpdateManyWithoutUsersInput
    >;
  };

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>;
    OR?: Enumerable<UserScalarWhereInput>;
    NOT?: Enumerable<UserScalarWhereInput>;
    id?: IntFilter | number;
    email?: StringFilter | string;
    name?: StringNullableFilter | string | null;
    phone?: StringNullableFilter | string | null;
    description?: StringFilter | string;
    password?: StringFilter | string;
    salt?: StringFilter | string;
    activated?: BoolFilter | boolean;
    role?: EnumRoleFilter | Role;
    distributorId?: IntNullableFilter | number | null;
    createdAt?: DateTimeFilter | Date | string;
    updatedAt?: DateTimeFilter | Date | string;
  };

  export type GroupUpsertWithWhereUniqueWithoutDistributorInput = {
    where: GroupWhereUniqueInput;
    update: XOR<
      GroupUpdateWithoutDistributorInput,
      GroupUncheckedUpdateWithoutDistributorInput
    >;
    create: XOR<
      GroupCreateWithoutDistributorInput,
      GroupUncheckedCreateWithoutDistributorInput
    >;
  };

  export type GroupUpdateWithWhereUniqueWithoutDistributorInput = {
    where: GroupWhereUniqueInput;
    data: XOR<
      GroupUpdateWithoutDistributorInput,
      GroupUncheckedUpdateWithoutDistributorInput
    >;
  };

  export type GroupUpdateManyWithWhereWithoutDistributorInput = {
    where: GroupScalarWhereInput;
    data: XOR<
      GroupUpdateManyMutationInput,
      GroupUncheckedUpdateManyWithoutGroupsInput
    >;
  };

  export type GroupScalarWhereInput = {
    AND?: Enumerable<GroupScalarWhereInput>;
    OR?: Enumerable<GroupScalarWhereInput>;
    NOT?: Enumerable<GroupScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    distributorId?: IntNullableFilter | number | null;
  };

  export type ClientCreateWithoutGroupInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributor?: DistributorCreateNestedOneWithoutClientsInput;
    projects?: ProjectCreateNestedManyWithoutClientInput;
    tasks?: TaskCreateNestedManyWithoutClientInput;
    contacts?: ContactCreateNestedManyWithoutClientInput;
    sales?: SaleCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateWithoutGroupInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutClientInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutClientInput;
    sales?: SaleUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientCreateOrConnectWithoutGroupInput = {
    where: ClientWhereUniqueInput;
    create: XOR<
      ClientCreateWithoutGroupInput,
      ClientUncheckedCreateWithoutGroupInput
    >;
  };

  export type ClientCreateManyGroupInputEnvelope = {
    data: Enumerable<ClientCreateManyGroupInput>;
    skipDuplicates?: boolean;
  };

  export type ProjectCreateWithoutGroupInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    status?: ProjectStatusCreateNestedOneWithoutProjectsInput;
    distributor: DistributorCreateNestedOneWithoutProjectsInput;
    client: ClientCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sales?: SaleCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutGroupInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    clientId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sales?: SaleUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutGroupInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutGroupInput,
      ProjectUncheckedCreateWithoutGroupInput
    >;
  };

  export type ProjectCreateManyGroupInputEnvelope = {
    data: Enumerable<ProjectCreateManyGroupInput>;
    skipDuplicates?: boolean;
  };

  export type DistributorCreateWithoutGroupsInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutGroupsInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutGroupsInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutGroupsInput,
      DistributorUncheckedCreateWithoutGroupsInput
    >;
  };

  export type ClientUpsertWithWhereUniqueWithoutGroupInput = {
    where: ClientWhereUniqueInput;
    update: XOR<
      ClientUpdateWithoutGroupInput,
      ClientUncheckedUpdateWithoutGroupInput
    >;
    create: XOR<
      ClientCreateWithoutGroupInput,
      ClientUncheckedCreateWithoutGroupInput
    >;
  };

  export type ClientUpdateWithWhereUniqueWithoutGroupInput = {
    where: ClientWhereUniqueInput;
    data: XOR<
      ClientUpdateWithoutGroupInput,
      ClientUncheckedUpdateWithoutGroupInput
    >;
  };

  export type ClientUpdateManyWithWhereWithoutGroupInput = {
    where: ClientScalarWhereInput;
    data: XOR<
      ClientUpdateManyMutationInput,
      ClientUncheckedUpdateManyWithoutClientsInput
    >;
  };

  export type ProjectUpsertWithWhereUniqueWithoutGroupInput = {
    where: ProjectWhereUniqueInput;
    update: XOR<
      ProjectUpdateWithoutGroupInput,
      ProjectUncheckedUpdateWithoutGroupInput
    >;
    create: XOR<
      ProjectCreateWithoutGroupInput,
      ProjectUncheckedCreateWithoutGroupInput
    >;
  };

  export type ProjectUpdateWithWhereUniqueWithoutGroupInput = {
    where: ProjectWhereUniqueInput;
    data: XOR<
      ProjectUpdateWithoutGroupInput,
      ProjectUncheckedUpdateWithoutGroupInput
    >;
  };

  export type ProjectUpdateManyWithWhereWithoutGroupInput = {
    where: ProjectScalarWhereInput;
    data: XOR<
      ProjectUpdateManyMutationInput,
      ProjectUncheckedUpdateManyWithoutProjectsInput
    >;
  };

  export type DistributorUpsertWithoutGroupsInput = {
    update: XOR<
      DistributorUpdateWithoutGroupsInput,
      DistributorUncheckedUpdateWithoutGroupsInput
    >;
    create: XOR<
      DistributorCreateWithoutGroupsInput,
      DistributorUncheckedCreateWithoutGroupsInput
    >;
  };

  export type DistributorUpdateWithoutGroupsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorCreateWithoutClientsInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutClientsInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutClientsInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutClientsInput,
      DistributorUncheckedCreateWithoutClientsInput
    >;
  };

  export type GroupCreateWithoutClientsInput = {
    name: string;
    projects?: ProjectCreateNestedManyWithoutGroupInput;
    distributor?: DistributorCreateNestedOneWithoutGroupsInput;
  };

  export type GroupUncheckedCreateWithoutClientsInput = {
    id?: number;
    name: string;
    projects?: ProjectUncheckedCreateNestedManyWithoutGroupInput;
    distributorId?: number | null;
  };

  export type GroupCreateOrConnectWithoutClientsInput = {
    where: GroupWhereUniqueInput;
    create: XOR<
      GroupCreateWithoutClientsInput,
      GroupUncheckedCreateWithoutClientsInput
    >;
  };

  export type ProjectCreateWithoutClientInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    status?: ProjectStatusCreateNestedOneWithoutProjectsInput;
    distributor: DistributorCreateNestedOneWithoutProjectsInput;
    group: GroupCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sales?: SaleCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutClientInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    groupId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sales?: SaleUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutClientInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutClientInput,
      ProjectUncheckedCreateWithoutClientInput
    >;
  };

  export type ProjectCreateManyClientInputEnvelope = {
    data: Enumerable<ProjectCreateManyClientInput>;
    skipDuplicates?: boolean;
  };

  export type TaskCreateWithoutClientInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    status?: TaskStatusCreateNestedOneWithoutTasksInput;
    distributor?: DistributorCreateNestedOneWithoutTasksInput;
    project?: ProjectCreateNestedOneWithoutTasksInput;
    user: UserCreateNestedOneWithoutTasksInput;
    contact?: ContactCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateWithoutClientInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateOrConnectWithoutClientInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutClientInput,
      TaskUncheckedCreateWithoutClientInput
    >;
  };

  export type TaskCreateManyClientInputEnvelope = {
    data: Enumerable<TaskCreateManyClientInput>;
    skipDuplicates?: boolean;
  };

  export type ContactCreateWithoutClientInput = {
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    distributor: DistributorCreateNestedOneWithoutContactsInput;
    tasks?: TaskCreateNestedManyWithoutContactInput;
  };

  export type ContactUncheckedCreateWithoutClientInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    distributorId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutContactInput;
  };

  export type ContactCreateOrConnectWithoutClientInput = {
    where: ContactWhereUniqueInput;
    create: XOR<
      ContactCreateWithoutClientInput,
      ContactUncheckedCreateWithoutClientInput
    >;
  };

  export type ContactCreateManyClientInputEnvelope = {
    data: Enumerable<ContactCreateManyClientInput>;
    skipDuplicates?: boolean;
  };

  export type SaleCreateWithoutClientInput = {
    date: Date | string;
    sum: number;
    distributor: DistributorCreateNestedOneWithoutSalesInput;
    project: ProjectCreateNestedOneWithoutSalesInput;
    user: UserCreateNestedOneWithoutSalesInput;
    saleContent?: SaleContentCreateNestedManyWithoutSaleInput;
    status: SaleStatusCreateNestedOneWithoutSalesInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateWithoutClientInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    projectId: number;
    userId: number;
    saleContent?: SaleContentUncheckedCreateNestedManyWithoutSaleInput;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateOrConnectWithoutClientInput = {
    where: SaleWhereUniqueInput;
    create: XOR<
      SaleCreateWithoutClientInput,
      SaleUncheckedCreateWithoutClientInput
    >;
  };

  export type SaleCreateManyClientInputEnvelope = {
    data: Enumerable<SaleCreateManyClientInput>;
    skipDuplicates?: boolean;
  };

  export type DistributorUpsertWithoutClientsInput = {
    update: XOR<
      DistributorUpdateWithoutClientsInput,
      DistributorUncheckedUpdateWithoutClientsInput
    >;
    create: XOR<
      DistributorCreateWithoutClientsInput,
      DistributorUncheckedCreateWithoutClientsInput
    >;
  };

  export type DistributorUpdateWithoutClientsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type GroupUpsertWithoutClientsInput = {
    update: XOR<
      GroupUpdateWithoutClientsInput,
      GroupUncheckedUpdateWithoutClientsInput
    >;
    create: XOR<
      GroupCreateWithoutClientsInput,
      GroupUncheckedCreateWithoutClientsInput
    >;
  };

  export type GroupUpdateWithoutClientsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    projects?: ProjectUpdateManyWithoutGroupNestedInput;
    distributor?: DistributorUpdateOneWithoutGroupsNestedInput;
  };

  export type GroupUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    projects?: ProjectUncheckedUpdateManyWithoutGroupNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type ProjectUpsertWithWhereUniqueWithoutClientInput = {
    where: ProjectWhereUniqueInput;
    update: XOR<
      ProjectUpdateWithoutClientInput,
      ProjectUncheckedUpdateWithoutClientInput
    >;
    create: XOR<
      ProjectCreateWithoutClientInput,
      ProjectUncheckedCreateWithoutClientInput
    >;
  };

  export type ProjectUpdateWithWhereUniqueWithoutClientInput = {
    where: ProjectWhereUniqueInput;
    data: XOR<
      ProjectUpdateWithoutClientInput,
      ProjectUncheckedUpdateWithoutClientInput
    >;
  };

  export type ProjectUpdateManyWithWhereWithoutClientInput = {
    where: ProjectScalarWhereInput;
    data: XOR<
      ProjectUpdateManyMutationInput,
      ProjectUncheckedUpdateManyWithoutProjectsInput
    >;
  };

  export type TaskUpsertWithWhereUniqueWithoutClientInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutClientInput,
      TaskUncheckedUpdateWithoutClientInput
    >;
    create: XOR<
      TaskCreateWithoutClientInput,
      TaskUncheckedCreateWithoutClientInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutClientInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutClientInput,
      TaskUncheckedUpdateWithoutClientInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutClientInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutTasksInput
    >;
  };

  export type ContactUpsertWithWhereUniqueWithoutClientInput = {
    where: ContactWhereUniqueInput;
    update: XOR<
      ContactUpdateWithoutClientInput,
      ContactUncheckedUpdateWithoutClientInput
    >;
    create: XOR<
      ContactCreateWithoutClientInput,
      ContactUncheckedCreateWithoutClientInput
    >;
  };

  export type ContactUpdateWithWhereUniqueWithoutClientInput = {
    where: ContactWhereUniqueInput;
    data: XOR<
      ContactUpdateWithoutClientInput,
      ContactUncheckedUpdateWithoutClientInput
    >;
  };

  export type ContactUpdateManyWithWhereWithoutClientInput = {
    where: ContactScalarWhereInput;
    data: XOR<
      ContactUpdateManyMutationInput,
      ContactUncheckedUpdateManyWithoutContactsInput
    >;
  };

  export type SaleUpsertWithWhereUniqueWithoutClientInput = {
    where: SaleWhereUniqueInput;
    update: XOR<
      SaleUpdateWithoutClientInput,
      SaleUncheckedUpdateWithoutClientInput
    >;
    create: XOR<
      SaleCreateWithoutClientInput,
      SaleUncheckedCreateWithoutClientInput
    >;
  };

  export type SaleUpdateWithWhereUniqueWithoutClientInput = {
    where: SaleWhereUniqueInput;
    data: XOR<
      SaleUpdateWithoutClientInput,
      SaleUncheckedUpdateWithoutClientInput
    >;
  };

  export type SaleUpdateManyWithWhereWithoutClientInput = {
    where: SaleScalarWhereInput;
    data: XOR<
      SaleUpdateManyMutationInput,
      SaleUncheckedUpdateManyWithoutSalesInput
    >;
  };

  export type ClientCreateWithoutContactsInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributor?: DistributorCreateNestedOneWithoutClientsInput;
    group?: GroupCreateNestedOneWithoutClientsInput;
    projects?: ProjectCreateNestedManyWithoutClientInput;
    tasks?: TaskCreateNestedManyWithoutClientInput;
    sales?: SaleCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateWithoutContactsInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    groupId?: number;
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutClientInput;
    sales?: SaleUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientCreateOrConnectWithoutContactsInput = {
    where: ClientWhereUniqueInput;
    create: XOR<
      ClientCreateWithoutContactsInput,
      ClientUncheckedCreateWithoutContactsInput
    >;
  };

  export type DistributorCreateWithoutContactsInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutContactsInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutContactsInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutContactsInput,
      DistributorUncheckedCreateWithoutContactsInput
    >;
  };

  export type TaskCreateWithoutContactInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    status?: TaskStatusCreateNestedOneWithoutTasksInput;
    distributor?: DistributorCreateNestedOneWithoutTasksInput;
    client?: ClientCreateNestedOneWithoutTasksInput;
    project?: ProjectCreateNestedOneWithoutTasksInput;
    user: UserCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateWithoutContactInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateOrConnectWithoutContactInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutContactInput,
      TaskUncheckedCreateWithoutContactInput
    >;
  };

  export type TaskCreateManyContactInputEnvelope = {
    data: Enumerable<TaskCreateManyContactInput>;
    skipDuplicates?: boolean;
  };

  export type ClientUpsertWithoutContactsInput = {
    update: XOR<
      ClientUpdateWithoutContactsInput,
      ClientUncheckedUpdateWithoutContactsInput
    >;
    create: XOR<
      ClientCreateWithoutContactsInput,
      ClientUncheckedCreateWithoutContactsInput
    >;
  };

  export type ClientUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneWithoutClientsNestedInput;
    group?: GroupUpdateOneRequiredWithoutClientsNestedInput;
    projects?: ProjectUpdateManyWithoutClientNestedInput;
    tasks?: TaskUpdateManyWithoutClientNestedInput;
    sales?: SaleUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    groupId?: IntFieldUpdateOperationsInput | number;
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutClientNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type DistributorUpsertWithoutContactsInput = {
    update: XOR<
      DistributorUpdateWithoutContactsInput,
      DistributorUncheckedUpdateWithoutContactsInput
    >;
    create: XOR<
      DistributorCreateWithoutContactsInput,
      DistributorUncheckedCreateWithoutContactsInput
    >;
  };

  export type DistributorUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type TaskUpsertWithWhereUniqueWithoutContactInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutContactInput,
      TaskUncheckedUpdateWithoutContactInput
    >;
    create: XOR<
      TaskCreateWithoutContactInput,
      TaskUncheckedCreateWithoutContactInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutContactInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutContactInput,
      TaskUncheckedUpdateWithoutContactInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutContactInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutTasksInput
    >;
  };

  export type ProjectStatusCreateWithoutProjectsInput = {
    name: string;
  };

  export type ProjectStatusUncheckedCreateWithoutProjectsInput = {
    id?: number;
    name: string;
  };

  export type ProjectStatusCreateOrConnectWithoutProjectsInput = {
    where: ProjectStatusWhereUniqueInput;
    create: XOR<
      ProjectStatusCreateWithoutProjectsInput,
      ProjectStatusUncheckedCreateWithoutProjectsInput
    >;
  };

  export type DistributorCreateWithoutProjectsInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutProjectsInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutProjectsInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutProjectsInput,
      DistributorUncheckedCreateWithoutProjectsInput
    >;
  };

  export type ClientCreateWithoutProjectsInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributor?: DistributorCreateNestedOneWithoutClientsInput;
    group?: GroupCreateNestedOneWithoutClientsInput;
    tasks?: TaskCreateNestedManyWithoutClientInput;
    contacts?: ContactCreateNestedManyWithoutClientInput;
    sales?: SaleCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateWithoutProjectsInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    groupId?: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutClientInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutClientInput;
    sales?: SaleUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientCreateOrConnectWithoutProjectsInput = {
    where: ClientWhereUniqueInput;
    create: XOR<
      ClientCreateWithoutProjectsInput,
      ClientUncheckedCreateWithoutProjectsInput
    >;
  };

  export type GroupCreateWithoutProjectsInput = {
    name: string;
    clients?: ClientCreateNestedManyWithoutGroupInput;
    distributor?: DistributorCreateNestedOneWithoutGroupsInput;
  };

  export type GroupUncheckedCreateWithoutProjectsInput = {
    id?: number;
    name: string;
    clients?: ClientUncheckedCreateNestedManyWithoutGroupInput;
    distributorId?: number | null;
  };

  export type GroupCreateOrConnectWithoutProjectsInput = {
    where: GroupWhereUniqueInput;
    create: XOR<
      GroupCreateWithoutProjectsInput,
      GroupUncheckedCreateWithoutProjectsInput
    >;
  };

  export type TaskCreateWithoutProjectInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    status?: TaskStatusCreateNestedOneWithoutTasksInput;
    distributor?: DistributorCreateNestedOneWithoutTasksInput;
    client?: ClientCreateNestedOneWithoutTasksInput;
    user: UserCreateNestedOneWithoutTasksInput;
    contact?: ContactCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutProjectInput,
      TaskUncheckedCreateWithoutProjectInput
    >;
  };

  export type TaskCreateManyProjectInputEnvelope = {
    data: Enumerable<TaskCreateManyProjectInput>;
    skipDuplicates?: boolean;
  };

  export type SaleCreateWithoutProjectInput = {
    date: Date | string;
    sum: number;
    distributor: DistributorCreateNestedOneWithoutSalesInput;
    client: ClientCreateNestedOneWithoutSalesInput;
    user: UserCreateNestedOneWithoutSalesInput;
    saleContent?: SaleContentCreateNestedManyWithoutSaleInput;
    status: SaleStatusCreateNestedOneWithoutSalesInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateWithoutProjectInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    userId: number;
    saleContent?: SaleContentUncheckedCreateNestedManyWithoutSaleInput;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateOrConnectWithoutProjectInput = {
    where: SaleWhereUniqueInput;
    create: XOR<
      SaleCreateWithoutProjectInput,
      SaleUncheckedCreateWithoutProjectInput
    >;
  };

  export type SaleCreateManyProjectInputEnvelope = {
    data: Enumerable<SaleCreateManyProjectInput>;
    skipDuplicates?: boolean;
  };

  export type ProjectStatusUpsertWithoutProjectsInput = {
    update: XOR<
      ProjectStatusUpdateWithoutProjectsInput,
      ProjectStatusUncheckedUpdateWithoutProjectsInput
    >;
    create: XOR<
      ProjectStatusCreateWithoutProjectsInput,
      ProjectStatusUncheckedCreateWithoutProjectsInput
    >;
  };

  export type ProjectStatusUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type ProjectStatusUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type DistributorUpsertWithoutProjectsInput = {
    update: XOR<
      DistributorUpdateWithoutProjectsInput,
      DistributorUncheckedUpdateWithoutProjectsInput
    >;
    create: XOR<
      DistributorCreateWithoutProjectsInput,
      DistributorUncheckedCreateWithoutProjectsInput
    >;
  };

  export type DistributorUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type ClientUpsertWithoutProjectsInput = {
    update: XOR<
      ClientUpdateWithoutProjectsInput,
      ClientUncheckedUpdateWithoutProjectsInput
    >;
    create: XOR<
      ClientCreateWithoutProjectsInput,
      ClientUncheckedCreateWithoutProjectsInput
    >;
  };

  export type ClientUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneWithoutClientsNestedInput;
    group?: GroupUpdateOneRequiredWithoutClientsNestedInput;
    tasks?: TaskUpdateManyWithoutClientNestedInput;
    contacts?: ContactUpdateManyWithoutClientNestedInput;
    sales?: SaleUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    groupId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutClientNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutClientNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type GroupUpsertWithoutProjectsInput = {
    update: XOR<
      GroupUpdateWithoutProjectsInput,
      GroupUncheckedUpdateWithoutProjectsInput
    >;
    create: XOR<
      GroupCreateWithoutProjectsInput,
      GroupUncheckedCreateWithoutProjectsInput
    >;
  };

  export type GroupUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    clients?: ClientUpdateManyWithoutGroupNestedInput;
    distributor?: DistributorUpdateOneWithoutGroupsNestedInput;
  };

  export type GroupUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    clients?: ClientUncheckedUpdateManyWithoutGroupNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutProjectInput,
      TaskUncheckedUpdateWithoutProjectInput
    >;
    create: XOR<
      TaskCreateWithoutProjectInput,
      TaskUncheckedCreateWithoutProjectInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutProjectInput,
      TaskUncheckedUpdateWithoutProjectInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutTasksInput
    >;
  };

  export type SaleUpsertWithWhereUniqueWithoutProjectInput = {
    where: SaleWhereUniqueInput;
    update: XOR<
      SaleUpdateWithoutProjectInput,
      SaleUncheckedUpdateWithoutProjectInput
    >;
    create: XOR<
      SaleCreateWithoutProjectInput,
      SaleUncheckedCreateWithoutProjectInput
    >;
  };

  export type SaleUpdateWithWhereUniqueWithoutProjectInput = {
    where: SaleWhereUniqueInput;
    data: XOR<
      SaleUpdateWithoutProjectInput,
      SaleUncheckedUpdateWithoutProjectInput
    >;
  };

  export type SaleUpdateManyWithWhereWithoutProjectInput = {
    where: SaleScalarWhereInput;
    data: XOR<
      SaleUpdateManyMutationInput,
      SaleUncheckedUpdateManyWithoutSalesInput
    >;
  };

  export type ProjectCreateWithoutStatusInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    distributor: DistributorCreateNestedOneWithoutProjectsInput;
    client: ClientCreateNestedOneWithoutProjectsInput;
    group: GroupCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
    sales?: SaleCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutStatusInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    distributorId: number;
    clientId: number;
    groupId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
    sales?: SaleUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutStatusInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutStatusInput,
      ProjectUncheckedCreateWithoutStatusInput
    >;
  };

  export type ProjectCreateManyStatusInputEnvelope = {
    data: Enumerable<ProjectCreateManyStatusInput>;
    skipDuplicates?: boolean;
  };

  export type ProjectUpsertWithWhereUniqueWithoutStatusInput = {
    where: ProjectWhereUniqueInput;
    update: XOR<
      ProjectUpdateWithoutStatusInput,
      ProjectUncheckedUpdateWithoutStatusInput
    >;
    create: XOR<
      ProjectCreateWithoutStatusInput,
      ProjectUncheckedCreateWithoutStatusInput
    >;
  };

  export type ProjectUpdateWithWhereUniqueWithoutStatusInput = {
    where: ProjectWhereUniqueInput;
    data: XOR<
      ProjectUpdateWithoutStatusInput,
      ProjectUncheckedUpdateWithoutStatusInput
    >;
  };

  export type ProjectUpdateManyWithWhereWithoutStatusInput = {
    where: ProjectScalarWhereInput;
    data: XOR<
      ProjectUpdateManyMutationInput,
      ProjectUncheckedUpdateManyWithoutProjectsInput
    >;
  };

  export type TaskStatusCreateWithoutTasksInput = {
    name: string;
  };

  export type TaskStatusUncheckedCreateWithoutTasksInput = {
    id?: number;
    name: string;
  };

  export type TaskStatusCreateOrConnectWithoutTasksInput = {
    where: TaskStatusWhereUniqueInput;
    create: XOR<
      TaskStatusCreateWithoutTasksInput,
      TaskStatusUncheckedCreateWithoutTasksInput
    >;
  };

  export type DistributorCreateWithoutTasksInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutTasksInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutTasksInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutTasksInput,
      DistributorUncheckedCreateWithoutTasksInput
    >;
  };

  export type ClientCreateWithoutTasksInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributor?: DistributorCreateNestedOneWithoutClientsInput;
    group?: GroupCreateNestedOneWithoutClientsInput;
    projects?: ProjectCreateNestedManyWithoutClientInput;
    contacts?: ContactCreateNestedManyWithoutClientInput;
    sales?: SaleCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateWithoutTasksInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    groupId?: number;
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutClientInput;
    sales?: SaleUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientCreateOrConnectWithoutTasksInput = {
    where: ClientWhereUniqueInput;
    create: XOR<
      ClientCreateWithoutTasksInput,
      ClientUncheckedCreateWithoutTasksInput
    >;
  };

  export type ProjectCreateWithoutTasksInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    status?: ProjectStatusCreateNestedOneWithoutProjectsInput;
    distributor: DistributorCreateNestedOneWithoutProjectsInput;
    client: ClientCreateNestedOneWithoutProjectsInput;
    group: GroupCreateNestedOneWithoutProjectsInput;
    sales?: SaleCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    clientId: number;
    groupId: number;
    sales?: SaleUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
  };

  export type UserCreateWithoutTasksInput = {
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenCreateNestedOneWithoutUserInput;
    sales?: SaleCreateNestedManyWithoutUserInput;
    distributor?: DistributorCreateNestedOneWithoutUsersInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUncheckedCreateWithoutTasksInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenUncheckedCreateNestedOneWithoutUserInput;
    sales?: SaleUncheckedCreateNestedManyWithoutUserInput;
    distributorId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserCreateOrConnectWithoutTasksInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutTasksInput,
      UserUncheckedCreateWithoutTasksInput
    >;
  };

  export type ContactCreateWithoutTasksInput = {
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    client: ClientCreateNestedOneWithoutContactsInput;
    distributor: DistributorCreateNestedOneWithoutContactsInput;
  };

  export type ContactUncheckedCreateWithoutTasksInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    clientId: number;
    distributorId: number;
  };

  export type ContactCreateOrConnectWithoutTasksInput = {
    where: ContactWhereUniqueInput;
    create: XOR<
      ContactCreateWithoutTasksInput,
      ContactUncheckedCreateWithoutTasksInput
    >;
  };

  export type TaskStatusUpsertWithoutTasksInput = {
    update: XOR<
      TaskStatusUpdateWithoutTasksInput,
      TaskStatusUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      TaskStatusCreateWithoutTasksInput,
      TaskStatusUncheckedCreateWithoutTasksInput
    >;
  };

  export type TaskStatusUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type TaskStatusUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type DistributorUpsertWithoutTasksInput = {
    update: XOR<
      DistributorUpdateWithoutTasksInput,
      DistributorUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      DistributorCreateWithoutTasksInput,
      DistributorUncheckedCreateWithoutTasksInput
    >;
  };

  export type DistributorUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type ClientUpsertWithoutTasksInput = {
    update: XOR<
      ClientUpdateWithoutTasksInput,
      ClientUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      ClientCreateWithoutTasksInput,
      ClientUncheckedCreateWithoutTasksInput
    >;
  };

  export type ClientUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneWithoutClientsNestedInput;
    group?: GroupUpdateOneRequiredWithoutClientsNestedInput;
    projects?: ProjectUpdateManyWithoutClientNestedInput;
    contacts?: ContactUpdateManyWithoutClientNestedInput;
    sales?: SaleUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    groupId?: IntFieldUpdateOperationsInput | number;
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutClientNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<
      ProjectUpdateWithoutTasksInput,
      ProjectUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      ProjectCreateWithoutTasksInput,
      ProjectUncheckedCreateWithoutTasksInput
    >;
  };

  export type ProjectUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    status?: ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutProjectsNestedInput;
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput;
    group?: GroupUpdateOneRequiredWithoutProjectsNestedInput;
    sales?: SaleUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
    sales?: SaleUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type UserUpsertWithoutTasksInput = {
    update: XOR<
      UserUpdateWithoutTasksInput,
      UserUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      UserCreateWithoutTasksInput,
      UserUncheckedCreateWithoutTasksInput
    >;
  };

  export type UserUpdateWithoutTasksInput = {
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUpdateOneWithoutUserNestedInput;
    sales?: SaleUpdateManyWithoutUserNestedInput;
    distributor?: DistributorUpdateOneWithoutUsersNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUncheckedUpdateOneWithoutUserNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutUserNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ContactUpsertWithoutTasksInput = {
    update: XOR<
      ContactUpdateWithoutTasksInput,
      ContactUncheckedUpdateWithoutTasksInput
    >;
    create: XOR<
      ContactCreateWithoutTasksInput,
      ContactUncheckedCreateWithoutTasksInput
    >;
  };

  export type ContactUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    client?: ClientUpdateOneRequiredWithoutContactsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutContactsNestedInput;
  };

  export type ContactUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    clientId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
  };

  export type TaskCreateWithoutStatusInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    distributor?: DistributorCreateNestedOneWithoutTasksInput;
    client?: ClientCreateNestedOneWithoutTasksInput;
    project?: ProjectCreateNestedOneWithoutTasksInput;
    user: UserCreateNestedOneWithoutTasksInput;
    contact?: ContactCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateWithoutStatusInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateOrConnectWithoutStatusInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutStatusInput,
      TaskUncheckedCreateWithoutStatusInput
    >;
  };

  export type TaskCreateManyStatusInputEnvelope = {
    data: Enumerable<TaskCreateManyStatusInput>;
    skipDuplicates?: boolean;
  };

  export type TaskUpsertWithWhereUniqueWithoutStatusInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutStatusInput,
      TaskUncheckedUpdateWithoutStatusInput
    >;
    create: XOR<
      TaskCreateWithoutStatusInput,
      TaskUncheckedCreateWithoutStatusInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutStatusInput = {
    where: TaskWhereUniqueInput;
    data: XOR<
      TaskUpdateWithoutStatusInput,
      TaskUncheckedUpdateWithoutStatusInput
    >;
  };

  export type TaskUpdateManyWithWhereWithoutStatusInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutTasksInput
    >;
  };

  export type SubcategoryCreateWithoutCategoryInput = {
    name: string;
    products?: ProductCreateNestedManyWithoutSubcategoryInput;
  };

  export type SubcategoryUncheckedCreateWithoutCategoryInput = {
    id?: number;
    name: string;
    products?: ProductUncheckedCreateNestedManyWithoutSubcategoryInput;
  };

  export type SubcategoryCreateOrConnectWithoutCategoryInput = {
    where: SubcategoryWhereUniqueInput;
    create: XOR<
      SubcategoryCreateWithoutCategoryInput,
      SubcategoryUncheckedCreateWithoutCategoryInput
    >;
  };

  export type SubcategoryCreateManyCategoryInputEnvelope = {
    data: Enumerable<SubcategoryCreateManyCategoryInput>;
    skipDuplicates?: boolean;
  };

  export type ProductCreateWithoutCategoryInput = {
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicCreateNestedManyWithoutProductInput;
    subcategory?: SubcategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyUncheckedCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentUncheckedCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicUncheckedCreateNestedManyWithoutProductInput;
    subcategoryId?: number | null;
  };

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutCategoryInput,
      ProductUncheckedCreateWithoutCategoryInput
    >;
  };

  export type ProductCreateManyCategoryInputEnvelope = {
    data: Enumerable<ProductCreateManyCategoryInput>;
    skipDuplicates?: boolean;
  };

  export type SubcategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SubcategoryWhereUniqueInput;
    update: XOR<
      SubcategoryUpdateWithoutCategoryInput,
      SubcategoryUncheckedUpdateWithoutCategoryInput
    >;
    create: XOR<
      SubcategoryCreateWithoutCategoryInput,
      SubcategoryUncheckedCreateWithoutCategoryInput
    >;
  };

  export type SubcategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SubcategoryWhereUniqueInput;
    data: XOR<
      SubcategoryUpdateWithoutCategoryInput,
      SubcategoryUncheckedUpdateWithoutCategoryInput
    >;
  };

  export type SubcategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: SubcategoryScalarWhereInput;
    data: XOR<
      SubcategoryUpdateManyMutationInput,
      SubcategoryUncheckedUpdateManyWithoutSubcategoriesInput
    >;
  };

  export type SubcategoryScalarWhereInput = {
    AND?: Enumerable<SubcategoryScalarWhereInput>;
    OR?: Enumerable<SubcategoryScalarWhereInput>;
    NOT?: Enumerable<SubcategoryScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    categoryId?: IntFilter | number;
  };

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput;
    update: XOR<
      ProductUpdateWithoutCategoryInput,
      ProductUncheckedUpdateWithoutCategoryInput
    >;
    create: XOR<
      ProductCreateWithoutCategoryInput,
      ProductUncheckedCreateWithoutCategoryInput
    >;
  };

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput;
    data: XOR<
      ProductUpdateWithoutCategoryInput,
      ProductUncheckedUpdateWithoutCategoryInput
    >;
  };

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput;
    data: XOR<
      ProductUpdateManyMutationInput,
      ProductUncheckedUpdateManyWithoutProductsInput
    >;
  };

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>;
    OR?: Enumerable<ProductScalarWhereInput>;
    NOT?: Enumerable<ProductScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    description?: StringNullableFilter | string | null;
    price?: FloatFilter | number;
    images?: StringNullableListFilter;
    video?: StringNullableFilter | string | null;
    instruction?: StringNullableFilter | string | null;
    categoryId?: IntFilter | number;
    subcategoryId?: IntNullableFilter | number | null;
  };

  export type CategoryCreateWithoutSubcategoriesInput = {
    name: string;
    products?: ProductCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryUncheckedCreateWithoutSubcategoriesInput = {
    id?: number;
    name: string;
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryCreateOrConnectWithoutSubcategoriesInput = {
    where: CategoryWhereUniqueInput;
    create: XOR<
      CategoryCreateWithoutSubcategoriesInput,
      CategoryUncheckedCreateWithoutSubcategoriesInput
    >;
  };

  export type ProductCreateWithoutSubcategoryInput = {
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicCreateNestedManyWithoutProductInput;
    category: CategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateWithoutSubcategoryInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyUncheckedCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentUncheckedCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicUncheckedCreateNestedManyWithoutProductInput;
    categoryId: number;
  };

  export type ProductCreateOrConnectWithoutSubcategoryInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutSubcategoryInput,
      ProductUncheckedCreateWithoutSubcategoryInput
    >;
  };

  export type ProductCreateManySubcategoryInputEnvelope = {
    data: Enumerable<ProductCreateManySubcategoryInput>;
    skipDuplicates?: boolean;
  };

  export type CategoryUpsertWithoutSubcategoriesInput = {
    update: XOR<
      CategoryUpdateWithoutSubcategoriesInput,
      CategoryUncheckedUpdateWithoutSubcategoriesInput
    >;
    create: XOR<
      CategoryCreateWithoutSubcategoriesInput,
      CategoryUncheckedCreateWithoutSubcategoriesInput
    >;
  };

  export type CategoryUpdateWithoutSubcategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string;
    products?: ProductUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryUncheckedUpdateWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput;
  };

  export type ProductUpsertWithWhereUniqueWithoutSubcategoryInput = {
    where: ProductWhereUniqueInput;
    update: XOR<
      ProductUpdateWithoutSubcategoryInput,
      ProductUncheckedUpdateWithoutSubcategoryInput
    >;
    create: XOR<
      ProductCreateWithoutSubcategoryInput,
      ProductUncheckedCreateWithoutSubcategoryInput
    >;
  };

  export type ProductUpdateWithWhereUniqueWithoutSubcategoryInput = {
    where: ProductWhereUniqueInput;
    data: XOR<
      ProductUpdateWithoutSubcategoryInput,
      ProductUncheckedUpdateWithoutSubcategoryInput
    >;
  };

  export type ProductUpdateManyWithWhereWithoutSubcategoryInput = {
    where: ProductScalarWhereInput;
    data: XOR<
      ProductUpdateManyMutationInput,
      ProductUncheckedUpdateManyWithoutProductsInput
    >;
  };

  export type PropertyCreateWithoutProductInput = {
    img?: string | null;
    content: string;
  };

  export type PropertyUncheckedCreateWithoutProductInput = {
    id?: number;
    img?: string | null;
    content: string;
  };

  export type PropertyCreateOrConnectWithoutProductInput = {
    where: PropertyWhereUniqueInput;
    create: XOR<
      PropertyCreateWithoutProductInput,
      PropertyUncheckedCreateWithoutProductInput
    >;
  };

  export type PropertyCreateManyProductInputEnvelope = {
    data: Enumerable<PropertyCreateManyProductInput>;
    skipDuplicates?: boolean;
  };

  export type SaleContentCreateWithoutProductInput = {
    price: number;
    amount: number;
    sale: SaleCreateNestedOneWithoutSaleContentInput;
  };

  export type SaleContentUncheckedCreateWithoutProductInput = {
    id?: number;
    price: number;
    amount: number;
    saleId: number;
  };

  export type SaleContentCreateOrConnectWithoutProductInput = {
    where: SaleContentWhereUniqueInput;
    create: XOR<
      SaleContentCreateWithoutProductInput,
      SaleContentUncheckedCreateWithoutProductInput
    >;
  };

  export type SaleContentCreateManyProductInputEnvelope = {
    data: Enumerable<SaleContentCreateManyProductInput>;
    skipDuplicates?: boolean;
  };

  export type CharacteristicCreateWithoutProductInput = {
    name: string;
    unit?: string | null;
    value: string;
  };

  export type CharacteristicUncheckedCreateWithoutProductInput = {
    id?: number;
    name: string;
    unit?: string | null;
    value: string;
  };

  export type CharacteristicCreateOrConnectWithoutProductInput = {
    where: CharacteristicWhereUniqueInput;
    create: XOR<
      CharacteristicCreateWithoutProductInput,
      CharacteristicUncheckedCreateWithoutProductInput
    >;
  };

  export type CharacteristicCreateManyProductInputEnvelope = {
    data: Enumerable<CharacteristicCreateManyProductInput>;
    skipDuplicates?: boolean;
  };

  export type CategoryCreateWithoutProductsInput = {
    name: string;
    subcategories?: SubcategoryCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: number;
    name: string;
    subcategories?: SubcategoryUncheckedCreateNestedManyWithoutCategoryInput;
  };

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput;
    create: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
  };

  export type SubcategoryCreateWithoutProductsInput = {
    name: string;
    category: CategoryCreateNestedOneWithoutSubcategoriesInput;
  };

  export type SubcategoryUncheckedCreateWithoutProductsInput = {
    id?: number;
    name: string;
    categoryId: number;
  };

  export type SubcategoryCreateOrConnectWithoutProductsInput = {
    where: SubcategoryWhereUniqueInput;
    create: XOR<
      SubcategoryCreateWithoutProductsInput,
      SubcategoryUncheckedCreateWithoutProductsInput
    >;
  };

  export type PropertyUpsertWithWhereUniqueWithoutProductInput = {
    where: PropertyWhereUniqueInput;
    update: XOR<
      PropertyUpdateWithoutProductInput,
      PropertyUncheckedUpdateWithoutProductInput
    >;
    create: XOR<
      PropertyCreateWithoutProductInput,
      PropertyUncheckedCreateWithoutProductInput
    >;
  };

  export type PropertyUpdateWithWhereUniqueWithoutProductInput = {
    where: PropertyWhereUniqueInput;
    data: XOR<
      PropertyUpdateWithoutProductInput,
      PropertyUncheckedUpdateWithoutProductInput
    >;
  };

  export type PropertyUpdateManyWithWhereWithoutProductInput = {
    where: PropertyScalarWhereInput;
    data: XOR<
      PropertyUpdateManyMutationInput,
      PropertyUncheckedUpdateManyWithoutPropertiesInput
    >;
  };

  export type PropertyScalarWhereInput = {
    AND?: Enumerable<PropertyScalarWhereInput>;
    OR?: Enumerable<PropertyScalarWhereInput>;
    NOT?: Enumerable<PropertyScalarWhereInput>;
    id?: IntFilter | number;
    img?: StringNullableFilter | string | null;
    content?: StringFilter | string;
    productId?: IntFilter | number;
  };

  export type SaleContentUpsertWithWhereUniqueWithoutProductInput = {
    where: SaleContentWhereUniqueInput;
    update: XOR<
      SaleContentUpdateWithoutProductInput,
      SaleContentUncheckedUpdateWithoutProductInput
    >;
    create: XOR<
      SaleContentCreateWithoutProductInput,
      SaleContentUncheckedCreateWithoutProductInput
    >;
  };

  export type SaleContentUpdateWithWhereUniqueWithoutProductInput = {
    where: SaleContentWhereUniqueInput;
    data: XOR<
      SaleContentUpdateWithoutProductInput,
      SaleContentUncheckedUpdateWithoutProductInput
    >;
  };

  export type SaleContentUpdateManyWithWhereWithoutProductInput = {
    where: SaleContentScalarWhereInput;
    data: XOR<
      SaleContentUpdateManyMutationInput,
      SaleContentUncheckedUpdateManyWithoutSaleContentsInput
    >;
  };

  export type SaleContentScalarWhereInput = {
    AND?: Enumerable<SaleContentScalarWhereInput>;
    OR?: Enumerable<SaleContentScalarWhereInput>;
    NOT?: Enumerable<SaleContentScalarWhereInput>;
    id?: IntFilter | number;
    price?: FloatFilter | number;
    amount?: IntFilter | number;
    saleId?: IntFilter | number;
    productId?: IntFilter | number;
  };

  export type CharacteristicUpsertWithWhereUniqueWithoutProductInput = {
    where: CharacteristicWhereUniqueInput;
    update: XOR<
      CharacteristicUpdateWithoutProductInput,
      CharacteristicUncheckedUpdateWithoutProductInput
    >;
    create: XOR<
      CharacteristicCreateWithoutProductInput,
      CharacteristicUncheckedCreateWithoutProductInput
    >;
  };

  export type CharacteristicUpdateWithWhereUniqueWithoutProductInput = {
    where: CharacteristicWhereUniqueInput;
    data: XOR<
      CharacteristicUpdateWithoutProductInput,
      CharacteristicUncheckedUpdateWithoutProductInput
    >;
  };

  export type CharacteristicUpdateManyWithWhereWithoutProductInput = {
    where: CharacteristicScalarWhereInput;
    data: XOR<
      CharacteristicUpdateManyMutationInput,
      CharacteristicUncheckedUpdateManyWithoutCharacteristicsInput
    >;
  };

  export type CharacteristicScalarWhereInput = {
    AND?: Enumerable<CharacteristicScalarWhereInput>;
    OR?: Enumerable<CharacteristicScalarWhereInput>;
    NOT?: Enumerable<CharacteristicScalarWhereInput>;
    id?: IntFilter | number;
    name?: StringFilter | string;
    unit?: StringNullableFilter | string | null;
    value?: StringFilter | string;
    productId?: IntFilter | number;
  };

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<
      CategoryUpdateWithoutProductsInput,
      CategoryUncheckedUpdateWithoutProductsInput
    >;
    create: XOR<
      CategoryCreateWithoutProductsInput,
      CategoryUncheckedCreateWithoutProductsInput
    >;
  };

  export type CategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    subcategories?: SubcategoryUpdateManyWithoutCategoryNestedInput;
  };

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    subcategories?: SubcategoryUncheckedUpdateManyWithoutCategoryNestedInput;
  };

  export type SubcategoryUpsertWithoutProductsInput = {
    update: XOR<
      SubcategoryUpdateWithoutProductsInput,
      SubcategoryUncheckedUpdateWithoutProductsInput
    >;
    create: XOR<
      SubcategoryCreateWithoutProductsInput,
      SubcategoryUncheckedCreateWithoutProductsInput
    >;
  };

  export type SubcategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    category?: CategoryUpdateOneRequiredWithoutSubcategoriesNestedInput;
  };

  export type SubcategoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    categoryId?: IntFieldUpdateOperationsInput | number;
  };

  export type ProductCreateWithoutPropertiesInput = {
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    saleContents?: SaleContentCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicCreateNestedManyWithoutProductInput;
    category: CategoryCreateNestedOneWithoutProductsInput;
    subcategory?: SubcategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateWithoutPropertiesInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    saleContents?: SaleContentUncheckedCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicUncheckedCreateNestedManyWithoutProductInput;
    categoryId: number;
    subcategoryId?: number | null;
  };

  export type ProductCreateOrConnectWithoutPropertiesInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutPropertiesInput,
      ProductUncheckedCreateWithoutPropertiesInput
    >;
  };

  export type ProductUpsertWithoutPropertiesInput = {
    update: XOR<
      ProductUpdateWithoutPropertiesInput,
      ProductUncheckedUpdateWithoutPropertiesInput
    >;
    create: XOR<
      ProductCreateWithoutPropertiesInput,
      ProductUncheckedCreateWithoutPropertiesInput
    >;
  };

  export type ProductUpdateWithoutPropertiesInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    saleContents?: SaleContentUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUpdateManyWithoutProductNestedInput;
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput;
    subcategory?: SubcategoryUpdateOneWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateWithoutPropertiesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    saleContents?: SaleContentUncheckedUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUncheckedUpdateManyWithoutProductNestedInput;
    categoryId?: IntFieldUpdateOperationsInput | number;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type ProductCreateWithoutCharacteristicsInput = {
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentCreateNestedManyWithoutProductInput;
    category: CategoryCreateNestedOneWithoutProductsInput;
    subcategory?: SubcategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateWithoutCharacteristicsInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyUncheckedCreateNestedManyWithoutProductInput;
    saleContents?: SaleContentUncheckedCreateNestedManyWithoutProductInput;
    categoryId: number;
    subcategoryId?: number | null;
  };

  export type ProductCreateOrConnectWithoutCharacteristicsInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutCharacteristicsInput,
      ProductUncheckedCreateWithoutCharacteristicsInput
    >;
  };

  export type ProductUpsertWithoutCharacteristicsInput = {
    update: XOR<
      ProductUpdateWithoutCharacteristicsInput,
      ProductUncheckedUpdateWithoutCharacteristicsInput
    >;
    create: XOR<
      ProductCreateWithoutCharacteristicsInput,
      ProductUncheckedCreateWithoutCharacteristicsInput
    >;
  };

  export type ProductUpdateWithoutCharacteristicsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUpdateManyWithoutProductNestedInput;
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput;
    subcategory?: SubcategoryUpdateOneWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateWithoutCharacteristicsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUncheckedUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUncheckedUpdateManyWithoutProductNestedInput;
    categoryId?: IntFieldUpdateOperationsInput | number;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type DistributorCreateWithoutSalesInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    users?: UserCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutSalesInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    users?: UserUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutSalesInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutSalesInput,
      DistributorUncheckedCreateWithoutSalesInput
    >;
  };

  export type ClientCreateWithoutSalesInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributor?: DistributorCreateNestedOneWithoutClientsInput;
    group?: GroupCreateNestedOneWithoutClientsInput;
    projects?: ProjectCreateNestedManyWithoutClientInput;
    tasks?: TaskCreateNestedManyWithoutClientInput;
    contacts?: ContactCreateNestedManyWithoutClientInput;
  };

  export type ClientUncheckedCreateWithoutSalesInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
    groupId?: number;
    projects?: ProjectUncheckedCreateNestedManyWithoutClientInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutClientInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutClientInput;
  };

  export type ClientCreateOrConnectWithoutSalesInput = {
    where: ClientWhereUniqueInput;
    create: XOR<
      ClientCreateWithoutSalesInput,
      ClientUncheckedCreateWithoutSalesInput
    >;
  };

  export type ProjectCreateWithoutSalesInput = {
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    status?: ProjectStatusCreateNestedOneWithoutProjectsInput;
    distributor: DistributorCreateNestedOneWithoutProjectsInput;
    client: ClientCreateNestedOneWithoutProjectsInput;
    group: GroupCreateNestedOneWithoutProjectsInput;
    tasks?: TaskCreateNestedManyWithoutProjectInput;
  };

  export type ProjectUncheckedCreateWithoutSalesInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    clientId: number;
    groupId: number;
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput;
  };

  export type ProjectCreateOrConnectWithoutSalesInput = {
    where: ProjectWhereUniqueInput;
    create: XOR<
      ProjectCreateWithoutSalesInput,
      ProjectUncheckedCreateWithoutSalesInput
    >;
  };

  export type UserCreateWithoutSalesInput = {
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenCreateNestedOneWithoutUserInput;
    tasks?: TaskCreateNestedManyWithoutUserInput;
    distributor?: DistributorCreateNestedOneWithoutUsersInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUncheckedCreateWithoutSalesInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    token?: TokenUncheckedCreateNestedOneWithoutUserInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput;
    distributorId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserCreateOrConnectWithoutSalesInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutSalesInput,
      UserUncheckedCreateWithoutSalesInput
    >;
  };

  export type SaleContentCreateWithoutSaleInput = {
    price: number;
    amount: number;
    product: ProductCreateNestedOneWithoutSaleContentsInput;
  };

  export type SaleContentUncheckedCreateWithoutSaleInput = {
    id?: number;
    price: number;
    amount: number;
    productId: number;
  };

  export type SaleContentCreateOrConnectWithoutSaleInput = {
    where: SaleContentWhereUniqueInput;
    create: XOR<
      SaleContentCreateWithoutSaleInput,
      SaleContentUncheckedCreateWithoutSaleInput
    >;
  };

  export type SaleContentCreateManySaleInputEnvelope = {
    data: Enumerable<SaleContentCreateManySaleInput>;
    skipDuplicates?: boolean;
  };

  export type SaleStatusCreateWithoutSalesInput = {
    name: string;
  };

  export type SaleStatusUncheckedCreateWithoutSalesInput = {
    id?: number;
    name: string;
  };

  export type SaleStatusCreateOrConnectWithoutSalesInput = {
    where: SaleStatusWhereUniqueInput;
    create: XOR<
      SaleStatusCreateWithoutSalesInput,
      SaleStatusUncheckedCreateWithoutSalesInput
    >;
  };

  export type DistributorUpsertWithoutSalesInput = {
    update: XOR<
      DistributorUpdateWithoutSalesInput,
      DistributorUncheckedUpdateWithoutSalesInput
    >;
    create: XOR<
      DistributorCreateWithoutSalesInput,
      DistributorUncheckedCreateWithoutSalesInput
    >;
  };

  export type DistributorUpdateWithoutSalesInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    users?: UserUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    users?: UserUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type ClientUpsertWithoutSalesInput = {
    update: XOR<
      ClientUpdateWithoutSalesInput,
      ClientUncheckedUpdateWithoutSalesInput
    >;
    create: XOR<
      ClientCreateWithoutSalesInput,
      ClientUncheckedCreateWithoutSalesInput
    >;
  };

  export type ClientUpdateWithoutSalesInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneWithoutClientsNestedInput;
    group?: GroupUpdateOneRequiredWithoutClientsNestedInput;
    projects?: ProjectUpdateManyWithoutClientNestedInput;
    tasks?: TaskUpdateManyWithoutClientNestedInput;
    contacts?: ContactUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    groupId?: IntFieldUpdateOperationsInput | number;
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutClientNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type ProjectUpsertWithoutSalesInput = {
    update: XOR<
      ProjectUpdateWithoutSalesInput,
      ProjectUncheckedUpdateWithoutSalesInput
    >;
    create: XOR<
      ProjectCreateWithoutSalesInput,
      ProjectUncheckedCreateWithoutSalesInput
    >;
  };

  export type ProjectUpdateWithoutSalesInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    status?: ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutProjectsNestedInput;
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput;
    group?: GroupUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type UserUpsertWithoutSalesInput = {
    update: XOR<
      UserUpdateWithoutSalesInput,
      UserUncheckedUpdateWithoutSalesInput
    >;
    create: XOR<
      UserCreateWithoutSalesInput,
      UserUncheckedCreateWithoutSalesInput
    >;
  };

  export type UserUpdateWithoutSalesInput = {
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUpdateOneWithoutUserNestedInput;
    tasks?: TaskUpdateManyWithoutUserNestedInput;
    distributor?: DistributorUpdateOneWithoutUsersNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUncheckedUpdateOneWithoutUserNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleContentUpsertWithWhereUniqueWithoutSaleInput = {
    where: SaleContentWhereUniqueInput;
    update: XOR<
      SaleContentUpdateWithoutSaleInput,
      SaleContentUncheckedUpdateWithoutSaleInput
    >;
    create: XOR<
      SaleContentCreateWithoutSaleInput,
      SaleContentUncheckedCreateWithoutSaleInput
    >;
  };

  export type SaleContentUpdateWithWhereUniqueWithoutSaleInput = {
    where: SaleContentWhereUniqueInput;
    data: XOR<
      SaleContentUpdateWithoutSaleInput,
      SaleContentUncheckedUpdateWithoutSaleInput
    >;
  };

  export type SaleContentUpdateManyWithWhereWithoutSaleInput = {
    where: SaleContentScalarWhereInput;
    data: XOR<
      SaleContentUpdateManyMutationInput,
      SaleContentUncheckedUpdateManyWithoutSaleContentInput
    >;
  };

  export type SaleStatusUpsertWithoutSalesInput = {
    update: XOR<
      SaleStatusUpdateWithoutSalesInput,
      SaleStatusUncheckedUpdateWithoutSalesInput
    >;
    create: XOR<
      SaleStatusCreateWithoutSalesInput,
      SaleStatusUncheckedCreateWithoutSalesInput
    >;
  };

  export type SaleStatusUpdateWithoutSalesInput = {
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type SaleStatusUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type SaleCreateWithoutStatusInput = {
    date: Date | string;
    sum: number;
    distributor: DistributorCreateNestedOneWithoutSalesInput;
    client: ClientCreateNestedOneWithoutSalesInput;
    project: ProjectCreateNestedOneWithoutSalesInput;
    user: UserCreateNestedOneWithoutSalesInput;
    saleContent?: SaleContentCreateNestedManyWithoutSaleInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateWithoutStatusInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    saleContent?: SaleContentUncheckedCreateNestedManyWithoutSaleInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateOrConnectWithoutStatusInput = {
    where: SaleWhereUniqueInput;
    create: XOR<
      SaleCreateWithoutStatusInput,
      SaleUncheckedCreateWithoutStatusInput
    >;
  };

  export type SaleCreateManyStatusInputEnvelope = {
    data: Enumerable<SaleCreateManyStatusInput>;
    skipDuplicates?: boolean;
  };

  export type SaleUpsertWithWhereUniqueWithoutStatusInput = {
    where: SaleWhereUniqueInput;
    update: XOR<
      SaleUpdateWithoutStatusInput,
      SaleUncheckedUpdateWithoutStatusInput
    >;
    create: XOR<
      SaleCreateWithoutStatusInput,
      SaleUncheckedCreateWithoutStatusInput
    >;
  };

  export type SaleUpdateWithWhereUniqueWithoutStatusInput = {
    where: SaleWhereUniqueInput;
    data: XOR<
      SaleUpdateWithoutStatusInput,
      SaleUncheckedUpdateWithoutStatusInput
    >;
  };

  export type SaleUpdateManyWithWhereWithoutStatusInput = {
    where: SaleScalarWhereInput;
    data: XOR<
      SaleUpdateManyMutationInput,
      SaleUncheckedUpdateManyWithoutSalesInput
    >;
  };

  export type SaleCreateWithoutSaleContentInput = {
    date: Date | string;
    sum: number;
    distributor: DistributorCreateNestedOneWithoutSalesInput;
    client: ClientCreateNestedOneWithoutSalesInput;
    project: ProjectCreateNestedOneWithoutSalesInput;
    user: UserCreateNestedOneWithoutSalesInput;
    status: SaleStatusCreateNestedOneWithoutSalesInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateWithoutSaleContentInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateOrConnectWithoutSaleContentInput = {
    where: SaleWhereUniqueInput;
    create: XOR<
      SaleCreateWithoutSaleContentInput,
      SaleUncheckedCreateWithoutSaleContentInput
    >;
  };

  export type ProductCreateWithoutSaleContentsInput = {
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicCreateNestedManyWithoutProductInput;
    category: CategoryCreateNestedOneWithoutProductsInput;
    subcategory?: SubcategoryCreateNestedOneWithoutProductsInput;
  };

  export type ProductUncheckedCreateWithoutSaleContentsInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    properties?: PropertyUncheckedCreateNestedManyWithoutProductInput;
    characteristics?: CharacteristicUncheckedCreateNestedManyWithoutProductInput;
    categoryId: number;
    subcategoryId?: number | null;
  };

  export type ProductCreateOrConnectWithoutSaleContentsInput = {
    where: ProductWhereUniqueInput;
    create: XOR<
      ProductCreateWithoutSaleContentsInput,
      ProductUncheckedCreateWithoutSaleContentsInput
    >;
  };

  export type SaleUpsertWithoutSaleContentInput = {
    update: XOR<
      SaleUpdateWithoutSaleContentInput,
      SaleUncheckedUpdateWithoutSaleContentInput
    >;
    create: XOR<
      SaleCreateWithoutSaleContentInput,
      SaleUncheckedCreateWithoutSaleContentInput
    >;
  };

  export type SaleUpdateWithoutSaleContentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributor?: DistributorUpdateOneRequiredWithoutSalesNestedInput;
    client?: ClientUpdateOneRequiredWithoutSalesNestedInput;
    project?: ProjectUpdateOneRequiredWithoutSalesNestedInput;
    user?: UserUpdateOneRequiredWithoutSalesNestedInput;
    status?: SaleStatusUpdateOneRequiredWithoutSalesNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateWithoutSaleContentInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ProductUpsertWithoutSaleContentsInput = {
    update: XOR<
      ProductUpdateWithoutSaleContentsInput,
      ProductUncheckedUpdateWithoutSaleContentsInput
    >;
    create: XOR<
      ProductCreateWithoutSaleContentsInput,
      ProductUncheckedCreateWithoutSaleContentsInput
    >;
  };

  export type ProductUpdateWithoutSaleContentsInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUpdateManyWithoutProductNestedInput;
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput;
    subcategory?: SubcategoryUpdateOneWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateWithoutSaleContentsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUncheckedUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUncheckedUpdateManyWithoutProductNestedInput;
    categoryId?: IntFieldUpdateOperationsInput | number;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type TokenCreateWithoutUserInput = {
    refreshToken: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number;
    refreshToken: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput;
    create: XOR<
      TokenCreateWithoutUserInput,
      TokenUncheckedCreateWithoutUserInput
    >;
  };

  export type TaskCreateWithoutUserInput = {
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    status?: TaskStatusCreateNestedOneWithoutTasksInput;
    distributor?: DistributorCreateNestedOneWithoutTasksInput;
    client?: ClientCreateNestedOneWithoutTasksInput;
    project?: ProjectCreateNestedOneWithoutTasksInput;
    contact?: ContactCreateNestedOneWithoutTasksInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUncheckedCreateWithoutUserInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateOrConnectWithoutUserInput = {
    where: TaskWhereUniqueInput;
    create: XOR<
      TaskCreateWithoutUserInput,
      TaskUncheckedCreateWithoutUserInput
    >;
  };

  export type TaskCreateManyUserInputEnvelope = {
    data: Enumerable<TaskCreateManyUserInput>;
    skipDuplicates?: boolean;
  };

  export type SaleCreateWithoutUserInput = {
    date: Date | string;
    sum: number;
    distributor: DistributorCreateNestedOneWithoutSalesInput;
    client: ClientCreateNestedOneWithoutSalesInput;
    project: ProjectCreateNestedOneWithoutSalesInput;
    saleContent?: SaleContentCreateNestedManyWithoutSaleInput;
    status: SaleStatusCreateNestedOneWithoutSalesInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUncheckedCreateWithoutUserInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    saleContent?: SaleContentUncheckedCreateNestedManyWithoutSaleInput;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateOrConnectWithoutUserInput = {
    where: SaleWhereUniqueInput;
    create: XOR<
      SaleCreateWithoutUserInput,
      SaleUncheckedCreateWithoutUserInput
    >;
  };

  export type SaleCreateManyUserInputEnvelope = {
    data: Enumerable<SaleCreateManyUserInput>;
    skipDuplicates?: boolean;
  };

  export type DistributorCreateWithoutUsersInput = {
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientCreateNestedManyWithoutDistributorInput;
    projects?: ProjectCreateNestedManyWithoutDistributorInput;
    sales?: SaleCreateNestedManyWithoutDistributorInput;
    tasks?: TaskCreateNestedManyWithoutDistributorInput;
    contacts?: ContactCreateNestedManyWithoutDistributorInput;
    groups?: GroupCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorUncheckedCreateWithoutUsersInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    discount: number;
    clients?: ClientUncheckedCreateNestedManyWithoutDistributorInput;
    projects?: ProjectUncheckedCreateNestedManyWithoutDistributorInput;
    sales?: SaleUncheckedCreateNestedManyWithoutDistributorInput;
    tasks?: TaskUncheckedCreateNestedManyWithoutDistributorInput;
    contacts?: ContactUncheckedCreateNestedManyWithoutDistributorInput;
    groups?: GroupUncheckedCreateNestedManyWithoutDistributorInput;
  };

  export type DistributorCreateOrConnectWithoutUsersInput = {
    where: DistributorWhereUniqueInput;
    create: XOR<
      DistributorCreateWithoutUsersInput,
      DistributorUncheckedCreateWithoutUsersInput
    >;
  };

  export type TokenUpsertWithoutUserInput = {
    update: XOR<
      TokenUpdateWithoutUserInput,
      TokenUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      TokenCreateWithoutUserInput,
      TokenUncheckedCreateWithoutUserInput
    >;
  };

  export type TokenUpdateWithoutUserInput = {
    refreshToken?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    refreshToken?: StringFieldUpdateOperationsInput | string;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUpsertWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput;
    update: XOR<
      TaskUpdateWithoutUserInput,
      TaskUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      TaskCreateWithoutUserInput,
      TaskUncheckedCreateWithoutUserInput
    >;
  };

  export type TaskUpdateWithWhereUniqueWithoutUserInput = {
    where: TaskWhereUniqueInput;
    data: XOR<TaskUpdateWithoutUserInput, TaskUncheckedUpdateWithoutUserInput>;
  };

  export type TaskUpdateManyWithWhereWithoutUserInput = {
    where: TaskScalarWhereInput;
    data: XOR<
      TaskUpdateManyMutationInput,
      TaskUncheckedUpdateManyWithoutTasksInput
    >;
  };

  export type SaleUpsertWithWhereUniqueWithoutUserInput = {
    where: SaleWhereUniqueInput;
    update: XOR<
      SaleUpdateWithoutUserInput,
      SaleUncheckedUpdateWithoutUserInput
    >;
    create: XOR<
      SaleCreateWithoutUserInput,
      SaleUncheckedCreateWithoutUserInput
    >;
  };

  export type SaleUpdateWithWhereUniqueWithoutUserInput = {
    where: SaleWhereUniqueInput;
    data: XOR<SaleUpdateWithoutUserInput, SaleUncheckedUpdateWithoutUserInput>;
  };

  export type SaleUpdateManyWithWhereWithoutUserInput = {
    where: SaleScalarWhereInput;
    data: XOR<
      SaleUpdateManyMutationInput,
      SaleUncheckedUpdateManyWithoutSalesInput
    >;
  };

  export type DistributorUpsertWithoutUsersInput = {
    update: XOR<
      DistributorUpdateWithoutUsersInput,
      DistributorUncheckedUpdateWithoutUsersInput
    >;
    create: XOR<
      DistributorCreateWithoutUsersInput,
      DistributorUncheckedCreateWithoutUsersInput
    >;
  };

  export type DistributorUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUpdateManyWithoutDistributorNestedInput;
  };

  export type DistributorUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: FloatFieldUpdateOperationsInput | number;
    clients?: ClientUncheckedUpdateManyWithoutDistributorNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutDistributorNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutDistributorNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutDistributorNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutDistributorNestedInput;
    groups?: GroupUncheckedUpdateManyWithoutDistributorNestedInput;
  };

  export type UserCreateWithoutTokenInput = {
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    tasks?: TaskCreateNestedManyWithoutUserInput;
    sales?: SaleCreateNestedManyWithoutUserInput;
    distributor?: DistributorCreateNestedOneWithoutUsersInput;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserUncheckedCreateWithoutTokenInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    tasks?: TaskUncheckedCreateNestedManyWithoutUserInput;
    sales?: SaleUncheckedCreateNestedManyWithoutUserInput;
    distributorId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type UserCreateOrConnectWithoutTokenInput = {
    where: UserWhereUniqueInput;
    create: XOR<
      UserCreateWithoutTokenInput,
      UserUncheckedCreateWithoutTokenInput
    >;
  };

  export type UserUpsertWithoutTokenInput = {
    update: XOR<
      UserUpdateWithoutTokenInput,
      UserUncheckedUpdateWithoutTokenInput
    >;
    create: XOR<
      UserCreateWithoutTokenInput,
      UserUncheckedCreateWithoutTokenInput
    >;
  };

  export type UserUpdateWithoutTokenInput = {
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    tasks?: TaskUpdateManyWithoutUserNestedInput;
    sales?: SaleUpdateManyWithoutUserNestedInput;
    distributor?: DistributorUpdateOneWithoutUsersNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateWithoutTokenInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutUserNestedInput;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ClientCreateManyDistributorInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    groupId?: number;
  };

  export type ProjectCreateManyDistributorInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    clientId: number;
    groupId: number;
  };

  export type SaleCreateManyDistributorInput = {
    id?: number;
    date: Date | string;
    sum: number;
    clientId: number;
    projectId: number;
    userId: number;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskCreateManyDistributorInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type ContactCreateManyDistributorInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    clientId: number;
  };

  export type UserCreateManyDistributorInput = {
    id?: number;
    email: string;
    name?: string | null;
    phone?: string | null;
    description: string;
    password: string;
    salt: string;
    activated?: boolean;
    role?: Role;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type GroupCreateManyDistributorInput = {
    id?: number;
    name: string;
  };

  export type ClientUpdateWithoutDistributorInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    group?: GroupUpdateOneRequiredWithoutClientsNestedInput;
    projects?: ProjectUpdateManyWithoutClientNestedInput;
    tasks?: TaskUpdateManyWithoutClientNestedInput;
    contacts?: ContactUpdateManyWithoutClientNestedInput;
    sales?: SaleUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    groupId?: IntFieldUpdateOperationsInput | number;
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutClientNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutClientNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateManyWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    groupId?: IntFieldUpdateOperationsInput | number;
  };

  export type ProjectUpdateWithoutDistributorInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    status?: ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput;
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput;
    group?: GroupUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sales?: SaleUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleUpdateWithoutDistributorInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    client?: ClientUpdateOneRequiredWithoutSalesNestedInput;
    project?: ProjectUpdateOneRequiredWithoutSalesNestedInput;
    user?: UserUpdateOneRequiredWithoutSalesNestedInput;
    saleContent?: SaleContentUpdateManyWithoutSaleNestedInput;
    status?: SaleStatusUpdateOneRequiredWithoutSalesNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    saleContent?: SaleContentUncheckedUpdateManyWithoutSaleNestedInput;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateManyWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUpdateWithoutDistributorInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    status?: TaskStatusUpdateOneRequiredWithoutTasksNestedInput;
    client?: ClientUpdateOneWithoutTasksNestedInput;
    project?: ProjectUpdateOneWithoutTasksNestedInput;
    user?: UserUpdateOneRequiredWithoutTasksNestedInput;
    contact?: ContactUpdateOneWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateManyWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ContactUpdateWithoutDistributorInput = {
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    client?: ClientUpdateOneRequiredWithoutContactsNestedInput;
    tasks?: TaskUpdateManyWithoutContactNestedInput;
  };

  export type ContactUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    clientId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutContactNestedInput;
  };

  export type ContactUncheckedUpdateManyWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    clientId?: IntFieldUpdateOperationsInput | number;
  };

  export type UserUpdateWithoutDistributorInput = {
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUpdateOneWithoutUserNestedInput;
    tasks?: TaskUpdateManyWithoutUserNestedInput;
    sales?: SaleUpdateManyWithoutUserNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    token?: TokenUncheckedUpdateOneWithoutUserNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutUserNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutUserNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number;
    email?: StringFieldUpdateOperationsInput | string;
    name?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: StringFieldUpdateOperationsInput | string;
    password?: StringFieldUpdateOperationsInput | string;
    salt?: StringFieldUpdateOperationsInput | string;
    activated?: BoolFieldUpdateOperationsInput | boolean;
    role?: EnumRoleFieldUpdateOperationsInput | Role;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type GroupUpdateWithoutDistributorInput = {
    name?: StringFieldUpdateOperationsInput | string;
    clients?: ClientUpdateManyWithoutGroupNestedInput;
    projects?: ProjectUpdateManyWithoutGroupNestedInput;
  };

  export type GroupUncheckedUpdateWithoutDistributorInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    clients?: ClientUncheckedUpdateManyWithoutGroupNestedInput;
    projects?: ProjectUncheckedUpdateManyWithoutGroupNestedInput;
  };

  export type GroupUncheckedUpdateManyWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type ClientCreateManyGroupInput = {
    id?: number;
    name: string;
    fullName: string;
    legalAddress?: string | null;
    actualAddress?: string | null;
    inn: string;
    kpp?: string | null;
    ogrn?: string | null;
    manager?: string | null;
    website?: string | null;
    phone?: string | null;
    email?: string | null;
    info?: string | null;
    distributorId?: number | null;
  };

  export type ProjectCreateManyGroupInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    clientId: number;
  };

  export type ClientUpdateWithoutGroupInput = {
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneWithoutClientsNestedInput;
    projects?: ProjectUpdateManyWithoutClientNestedInput;
    tasks?: TaskUpdateManyWithoutClientNestedInput;
    contacts?: ContactUpdateManyWithoutClientNestedInput;
    sales?: SaleUpdateManyWithoutClientNestedInput;
  };

  export type ClientUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    fullName?: StringFieldUpdateOperationsInput | string;
    legalAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    actualAddress?: NullableStringFieldUpdateOperationsInput | string | null;
    inn?: StringFieldUpdateOperationsInput | string;
    kpp?: NullableStringFieldUpdateOperationsInput | string | null;
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null;
    manager?: NullableStringFieldUpdateOperationsInput | string | null;
    website?: NullableStringFieldUpdateOperationsInput | string | null;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    email?: NullableStringFieldUpdateOperationsInput | string | null;
    info?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    projects?: ProjectUncheckedUpdateManyWithoutClientNestedInput;
    tasks?: TaskUncheckedUpdateManyWithoutClientNestedInput;
    contacts?: ContactUncheckedUpdateManyWithoutClientNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutClientNestedInput;
  };

  export type ProjectUpdateWithoutGroupInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    status?: ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutProjectsNestedInput;
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sales?: SaleUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectCreateManyClientInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    statusId?: number;
    distributorId: number;
    groupId: number;
  };

  export type TaskCreateManyClientInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type ContactCreateManyClientInput = {
    id?: number;
    name: string;
    email: string;
    phone?: string | null;
    description?: string | null;
    distributorId: number;
  };

  export type SaleCreateManyClientInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    projectId: number;
    userId: number;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type ProjectUpdateWithoutClientInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    status?: ProjectStatusUpdateOneRequiredWithoutProjectsNestedInput;
    distributor?: DistributorUpdateOneRequiredWithoutProjectsNestedInput;
    group?: GroupUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sales?: SaleUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type TaskUpdateWithoutClientInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    status?: TaskStatusUpdateOneRequiredWithoutTasksNestedInput;
    distributor?: DistributorUpdateOneWithoutTasksNestedInput;
    project?: ProjectUpdateOneWithoutTasksNestedInput;
    user?: UserUpdateOneRequiredWithoutTasksNestedInput;
    contact?: ContactUpdateOneWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ContactUpdateWithoutClientInput = {
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    distributor?: DistributorUpdateOneRequiredWithoutContactsNestedInput;
    tasks?: TaskUpdateManyWithoutContactNestedInput;
  };

  export type ContactUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    email?: StringFieldUpdateOperationsInput | string;
    phone?: NullableStringFieldUpdateOperationsInput | string | null;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    distributorId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutContactNestedInput;
  };

  export type SaleUpdateWithoutClientInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributor?: DistributorUpdateOneRequiredWithoutSalesNestedInput;
    project?: ProjectUpdateOneRequiredWithoutSalesNestedInput;
    user?: UserUpdateOneRequiredWithoutSalesNestedInput;
    saleContent?: SaleContentUpdateManyWithoutSaleNestedInput;
    status?: SaleStatusUpdateOneRequiredWithoutSalesNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    saleContent?: SaleContentUncheckedUpdateManyWithoutSaleNestedInput;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskCreateManyContactInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUpdateWithoutContactInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    status?: TaskStatusUpdateOneRequiredWithoutTasksNestedInput;
    distributor?: DistributorUpdateOneWithoutTasksNestedInput;
    client?: ClientUpdateOneWithoutTasksNestedInput;
    project?: ProjectUpdateOneWithoutTasksNestedInput;
    user?: UserUpdateOneRequiredWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskCreateManyProjectInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateManyProjectInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    userId: number;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    status?: TaskStatusUpdateOneRequiredWithoutTasksNestedInput;
    distributor?: DistributorUpdateOneWithoutTasksNestedInput;
    client?: ClientUpdateOneWithoutTasksNestedInput;
    user?: UserUpdateOneRequiredWithoutTasksNestedInput;
    contact?: ContactUpdateOneWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUpdateWithoutProjectInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributor?: DistributorUpdateOneRequiredWithoutSalesNestedInput;
    client?: ClientUpdateOneRequiredWithoutSalesNestedInput;
    user?: UserUpdateOneRequiredWithoutSalesNestedInput;
    saleContent?: SaleContentUpdateManyWithoutSaleNestedInput;
    status?: SaleStatusUpdateOneRequiredWithoutSalesNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    saleContent?: SaleContentUncheckedUpdateManyWithoutSaleNestedInput;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type ProjectCreateManyStatusInput = {
    id?: number;
    name: string;
    description?: string | null;
    discount?: number | null;
    startDate: Date | string;
    finishDate?: Date | string | null;
    distributorId: number;
    clientId: number;
    groupId: number;
  };

  export type ProjectUpdateWithoutStatusInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    distributor?: DistributorUpdateOneRequiredWithoutProjectsNestedInput;
    client?: ClientUpdateOneRequiredWithoutProjectsNestedInput;
    group?: GroupUpdateOneRequiredWithoutProjectsNestedInput;
    tasks?: TaskUpdateManyWithoutProjectNestedInput;
    sales?: SaleUpdateManyWithoutProjectNestedInput;
  };

  export type ProjectUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    discount?: NullableFloatFieldUpdateOperationsInput | number | null;
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string;
    finishDate?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    groupId?: IntFieldUpdateOperationsInput | number;
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput;
    sales?: SaleUncheckedUpdateManyWithoutProjectNestedInput;
  };

  export type TaskCreateManyStatusInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    userId: number;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUpdateWithoutStatusInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    distributor?: DistributorUpdateOneWithoutTasksNestedInput;
    client?: ClientUpdateOneWithoutTasksNestedInput;
    project?: ProjectUpdateOneWithoutTasksNestedInput;
    user?: UserUpdateOneRequiredWithoutTasksNestedInput;
    contact?: ContactUpdateOneWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    userId?: IntFieldUpdateOperationsInput | number;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SubcategoryCreateManyCategoryInput = {
    id?: number;
    name: string;
  };

  export type ProductCreateManyCategoryInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    subcategoryId?: number | null;
  };

  export type SubcategoryUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string;
    products?: ProductUpdateManyWithoutSubcategoryNestedInput;
  };

  export type SubcategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    products?: ProductUncheckedUpdateManyWithoutSubcategoryNestedInput;
  };

  export type SubcategoryUncheckedUpdateManyWithoutSubcategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
  };

  export type ProductUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUpdateManyWithoutProductNestedInput;
    subcategory?: SubcategoryUpdateOneWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUncheckedUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUncheckedUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUncheckedUpdateManyWithoutProductNestedInput;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type ProductUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    subcategoryId?: NullableIntFieldUpdateOperationsInput | number | null;
  };

  export type ProductCreateManySubcategoryInput = {
    id?: number;
    name: string;
    description?: string | null;
    price: number;
    images?: ProductCreateimagesInput | Enumerable<string>;
    video?: string | null;
    instruction?: string | null;
    categoryId: number;
  };

  export type ProductUpdateWithoutSubcategoryInput = {
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUpdateManyWithoutProductNestedInput;
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput;
  };

  export type ProductUncheckedUpdateWithoutSubcategoryInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    description?: NullableStringFieldUpdateOperationsInput | string | null;
    price?: FloatFieldUpdateOperationsInput | number;
    images?: ProductUpdateimagesInput | Enumerable<string>;
    video?: NullableStringFieldUpdateOperationsInput | string | null;
    instruction?: NullableStringFieldUpdateOperationsInput | string | null;
    properties?: PropertyUncheckedUpdateManyWithoutProductNestedInput;
    saleContents?: SaleContentUncheckedUpdateManyWithoutProductNestedInput;
    characteristics?: CharacteristicUncheckedUpdateManyWithoutProductNestedInput;
    categoryId?: IntFieldUpdateOperationsInput | number;
  };

  export type PropertyCreateManyProductInput = {
    id?: number;
    img?: string | null;
    content: string;
  };

  export type SaleContentCreateManyProductInput = {
    id?: number;
    price: number;
    amount: number;
    saleId: number;
  };

  export type CharacteristicCreateManyProductInput = {
    id?: number;
    name: string;
    unit?: string | null;
    value: string;
  };

  export type PropertyUpdateWithoutProductInput = {
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
  };

  export type PropertyUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number;
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
  };

  export type PropertyUncheckedUpdateManyWithoutPropertiesInput = {
    id?: IntFieldUpdateOperationsInput | number;
    img?: NullableStringFieldUpdateOperationsInput | string | null;
    content?: StringFieldUpdateOperationsInput | string;
  };

  export type SaleContentUpdateWithoutProductInput = {
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    sale?: SaleUpdateOneRequiredWithoutSaleContentNestedInput;
  };

  export type SaleContentUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number;
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    saleId?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleContentUncheckedUpdateManyWithoutSaleContentsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    saleId?: IntFieldUpdateOperationsInput | number;
  };

  export type CharacteristicUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
  };

  export type CharacteristicUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
  };

  export type CharacteristicUncheckedUpdateManyWithoutCharacteristicsInput = {
    id?: IntFieldUpdateOperationsInput | number;
    name?: StringFieldUpdateOperationsInput | string;
    unit?: NullableStringFieldUpdateOperationsInput | string | null;
    value?: StringFieldUpdateOperationsInput | string;
  };

  export type SaleContentCreateManySaleInput = {
    id?: number;
    price: number;
    amount: number;
    productId: number;
  };

  export type SaleContentUpdateWithoutSaleInput = {
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    product?: ProductUpdateOneRequiredWithoutSaleContentsNestedInput;
  };

  export type SaleContentUncheckedUpdateWithoutSaleInput = {
    id?: IntFieldUpdateOperationsInput | number;
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleContentUncheckedUpdateManyWithoutSaleContentInput = {
    id?: IntFieldUpdateOperationsInput | number;
    price?: FloatFieldUpdateOperationsInput | number;
    amount?: IntFieldUpdateOperationsInput | number;
    productId?: IntFieldUpdateOperationsInput | number;
  };

  export type SaleCreateManyStatusInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    userId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleUpdateWithoutStatusInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributor?: DistributorUpdateOneRequiredWithoutSalesNestedInput;
    client?: ClientUpdateOneRequiredWithoutSalesNestedInput;
    project?: ProjectUpdateOneRequiredWithoutSalesNestedInput;
    user?: UserUpdateOneRequiredWithoutSalesNestedInput;
    saleContent?: SaleContentUpdateManyWithoutSaleNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateWithoutStatusInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    userId?: IntFieldUpdateOperationsInput | number;
    saleContent?: SaleContentUncheckedUpdateManyWithoutSaleNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskCreateManyUserInput = {
    id?: number;
    title: string;
    dateStarted: Date | string;
    dateEnded?: Date | string | null;
    content: string;
    statusId?: number;
    distributorId?: number | null;
    clientId?: number | null;
    projectId?: number | null;
    contactId?: number | null;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type SaleCreateManyUserInput = {
    id?: number;
    date: Date | string;
    sum: number;
    distributorId: number;
    clientId: number;
    projectId: number;
    statusId: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
  };

  export type TaskUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    status?: TaskStatusUpdateOneRequiredWithoutTasksNestedInput;
    distributor?: DistributorUpdateOneWithoutTasksNestedInput;
    client?: ClientUpdateOneWithoutTasksNestedInput;
    project?: ProjectUpdateOneWithoutTasksNestedInput;
    contact?: ContactUpdateOneWithoutTasksNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type TaskUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    title?: StringFieldUpdateOperationsInput | string;
    dateStarted?: DateTimeFieldUpdateOperationsInput | Date | string;
    dateEnded?:
      | NullableDateTimeFieldUpdateOperationsInput
      | Date
      | string
      | null;
    content?: StringFieldUpdateOperationsInput | string;
    statusId?: IntFieldUpdateOperationsInput | number;
    distributorId?: NullableIntFieldUpdateOperationsInput | number | null;
    clientId?: NullableIntFieldUpdateOperationsInput | number | null;
    projectId?: NullableIntFieldUpdateOperationsInput | number | null;
    contactId?: NullableIntFieldUpdateOperationsInput | number | null;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributor?: DistributorUpdateOneRequiredWithoutSalesNestedInput;
    client?: ClientUpdateOneRequiredWithoutSalesNestedInput;
    project?: ProjectUpdateOneRequiredWithoutSalesNestedInput;
    saleContent?: SaleContentUpdateManyWithoutSaleNestedInput;
    status?: SaleStatusUpdateOneRequiredWithoutSalesNestedInput;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  export type SaleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number;
    date?: DateTimeFieldUpdateOperationsInput | Date | string;
    sum?: FloatFieldUpdateOperationsInput | number;
    distributorId?: IntFieldUpdateOperationsInput | number;
    clientId?: IntFieldUpdateOperationsInput | number;
    projectId?: IntFieldUpdateOperationsInput | number;
    saleContent?: SaleContentUncheckedUpdateManyWithoutSaleNestedInput;
    statusId?: IntFieldUpdateOperationsInput | number;
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string;
  };

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number;
  };

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF;
}
